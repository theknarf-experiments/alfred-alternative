typedef unsigned char __uint8_t;
       typedef short __int16_t;
       typedef unsigned short __uint16_t;
       typedef int __int32_t;
       typedef unsigned int __uint32_t;
       typedef long long __int64_t;
       typedef unsigned long long __uint64_t;
       typedef long __darwin_intptr_t;
       typedef unsigned int __darwin_natural_t;
       typedef int __darwin_ct_rune_t;
       typedef union {   char __mbstate8128;   long long _mbstateL;  }
       __mbstate_t;
       typedef __mbstate_t __darwin_mbstate_t;
       typedef long int __darwin_ptrdiff_t;
       typedef long unsigned int __darwin_size_t;
       typedef __builtin_va_list __darwin_va_list;
       typedef int __darwin_wchar_t;
       typedef __darwin_wchar_t __darwin_rune_t;
       typedef int __darwin_wint_t;
       typedef unsigned long __darwin_clock_t;
       typedef __uint32_t __darwin_socklen_t;
       typedef long __darwin_ssize_t;
       typedef long __darwin_time_t;
       typedef signed char int8_t;
       typedef short int16_t;
       typedef int int32_t;
       typedef long long int64_t;
       typedef unsigned char u_int8_t;
       typedef unsigned short u_int16_t;
       typedef unsigned int u_int32_t;
       typedef unsigned long long u_int64_t;
       typedef int64_t register_t;
       typedef __darwin_intptr_t intptr_t;
       typedef unsigned long uintptr_t;
       typedef u_int64_t user_addr_t;
       typedef u_int64_t user_size_t;
       typedef int64_t user_ssize_t;
       typedef int64_t user_long_t;
       typedef u_int64_t user_ulong_t;
       typedef int64_t user_time_t;
       typedef int64_t user_off_t;
       typedef u_int64_t syscall_arg_t;
       typedef __int64_t __darwin_blkcnt_t;
       typedef __int32_t __darwin_blksize_t;
       typedef __int32_t __darwin_dev_t;
       typedef unsigned int __darwin_fsblkcnt_t;
       typedef unsigned int __darwin_fsfilcnt_t;
       typedef __uint32_t __darwin_gid_t;
       typedef __uint32_t __darwin_id_t;
       typedef __uint64_t __darwin_ino64_t;
       typedef __darwin_ino64_t __darwin_ino_t;
       typedef __darwin_natural_t __darwin_mach_port_name_t;
       typedef __darwin_mach_port_name_t __darwin_mach_port_t;
       typedef __uint16_t __darwin_mode_t;
       typedef __int64_t __darwin_off_t;
       typedef __int32_t __darwin_pid_t;
       typedef __uint32_t __darwin_sigset_t;
       typedef __int32_t __darwin_suseconds_t;
       typedef __uint32_t __darwin_uid_t;
       typedef __uint32_t __darwin_useconds_t;
       typedef unsigned char __darwin_uuid_t[16];
       typedef char __darwin_uuid_string_t[37];
       struct __darwin_pthread_handler_rec {   void (*__routine)(void *);   void *__arg;   struct __darwin_pthread_handler_rec *__next;  };
       struct _opaque_pthread_attr_t {   long __sig;   char __opaque[56];  };
       struct _opaque_pthread_cond_t {   long __sig;   char __opaque[40];  };
       struct _opaque_pthread_condattr_t {   long __sig;   char __opaque[8];  };
       struct _opaque_pthread_mutex_t {   long __sig;   char __opaque[56];  };
       struct _opaque_pthread_mutexattr_t {   long __sig;   char __opaque[8];  };
       struct _opaque_pthread_once_t {   long __sig;   char __opaque[8];  };
       struct _opaque_pthread_rwlock_t {   long __sig;   char __opaque[192];  };
       struct _opaque_pthread_rwlockattr_t {   long __sig;   char __opaque[16];  };
       struct _opaque_pthread_t {   long __sig;   struct __darwin_pthread_handler_rec *__cleanup_stack;   char __opaque[8176];  };
       typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
       typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
       typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
       typedef unsigned long __darwin_pthread_key_t;
       typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
       typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
       typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
       typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
       typedef __darwin_dev_t dev_t;
       typedef u_int32_t fixpt_t;
       typedef __darwin_blkcnt_t blkcnt_t;
       typedef __darwin_blksize_t blksize_t;
       typedef __darwin_gid_t gid_t;
       typedef __uint32_t in_addr_t;
       typedef __uint16_t in_port_t;
       typedef __darwin_ino_t ino_t;
       typedef __darwin_ino64_t ino64_t;
       typedef __int32_t key_t;
       typedef __darwin_mode_t mode_t;
       typedef __uint16_t nlink_t;
       typedef __darwin_id_t id_t;
       typedef __darwin_pid_t pid_t;
       typedef __darwin_off_t off_t;
       typedef int32_t segsz_t;
       typedef int32_t swblk_t;
       typedef __darwin_uid_t uid_t;
       typedef __darwin_clock_t clock_t;
       typedef __darwin_size_t size_t;
       typedef __darwin_ssize_t ssize_t;
       typedef __darwin_time_t time_t;
       typedef __darwin_useconds_t useconds_t;
       typedef __darwin_suseconds_t suseconds_t;
       typedef __darwin_size_t rsize_t;
       typedef int errno_t;
       typedef struct fd_set {   __int32_t fds_bits[(((1024) / ((sizeof(__int32_t) * 8))))];  }
       fd_set;
       static __inline int __darwin_fd_isset(int _n, const struct fd_set *_p) {   return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1)<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));  }
       typedef __int32_t fd_mask;
       typedef __darwin_pthread_attr_t pthread_attr_t;
       typedef __darwin_pthread_cond_t pthread_cond_t;
       typedef __darwin_ct_rune_t ct_rune_t;
       typedef __darwin_rune_t rune_t;
       typedef __darwin_wchar_t wchar_t;
       typedef __darwin_wint_t wint_t;
       extern double nexttoward(double, long double);
       extern float nexttowardf(float, long double);
       extern long double nexttowardl(long double, long double);
       extern float fdimf(float, float);
       extern double fdim(double, double);
       extern long double fdiml(long double, long double);
       extern float fmaxf(float, float);
       extern double fmax(double, double);
       extern double y1(double) __attribute__((availability(macosx,introduced=10.0)));
       extern double yn(int, double) __attribute__((availability(macosx,introduced=10.0)));
       extern double scalb(double, double);
       extern int signgam;
       typedef enum {   P_ALL,  P_PID,  P_PGID }
       idtype_t;
       typedef unsigned char uint8_t;
       typedef unsigned short uint16_t;
       typedef unsigned int uint32_t;
       typedef unsigned long long uint64_t;
       typedef int8_t int_least8_t;
       typedef int16_t int_least16_t;
       typedef int32_t int_least32_t;
       typedef int64_t int_least64_t;
       typedef uint8_t uint_least8_t;
       typedef uint16_t uint_least16_t;
       typedef uint32_t uint_least32_t;
       typedef uint64_t uint_least64_t;
       typedef int8_t int_fast8_t;
       typedef int16_t int_fast16_t;
       typedef int32_t int_fast32_t;
       typedef int64_t int_fast64_t;
       typedef uint8_t uint_fast8_t;
       typedef uint16_t uint_fast16_t;
       typedef uint32_t uint_fast32_t;
       typedef uint64_t uint_fast64_t;
       typedef long int intmax_t;
       typedef long unsigned int uintmax_t;
       struct timeval {   __darwin_time_t tv_sec;   __darwin_suseconds_t tv_usec;  };
       typedef __uint64_t rlim_t;
       struct rusage {   struct timeval ru_utime;   struct timeval ru_stime;   long ru_maxrss;   long ru_ixrss;   long ru_idrss;   long ru_isrss;   long ru_minflt;   long ru_majflt;   long ru_nswap;   long ru_inblock;   long ru_oublock;   long ru_msgsnd;   long ru_msgrcv;   long ru_nsignals;   long ru_nvcsw;   long ru_nivcsw;  };
       typedef void *rusage_info_t;
       struct rusage_info_v0 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;  };
       struct rusage_info_v1 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;  };
       struct rusage_info_v2 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;   uint64_t ri_diskio_bytesread;   uint64_t ri_diskio_byteswritten;  };
       struct rusage_info_v3 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;   uint64_t ri_diskio_bytesread;   uint64_t ri_diskio_byteswritten;   uint64_t ri_cpu_time_qos_default;   uint64_t ri_cpu_time_qos_maintenance;   uint64_t ri_cpu_time_qos_background;   uint64_t ri_cpu_time_qos_utility;   uint64_t ri_cpu_time_qos_legacy;   uint64_t ri_cpu_time_qos_user_initiated;   uint64_t ri_cpu_time_qos_user_interactive;   uint64_t ri_billed_system_time;   uint64_t ri_serviced_system_time;  };
       void *alloca(size_t);
       struct timespec {   __darwin_time_t tv_sec;   long tv_nsec;  };
       struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long tm_gmtoff;   char *tm_zone;  };
       extern char *tzname[];
       extern int getdate_err;
       __attribute__((availability(macosx,introduced=10.4))) extern uintmax_t wcstoumax(const wchar_t * restrict __nptr,    wchar_t ** restrict __endptr,    int __base);
       extern void *_Block_copy(const void *aBlock)     __attribute__((availability(macosx,introduced=10.6)));
       extern void _Block_release(const void *aBlock)     __attribute__((availability(macosx,introduced=10.6)));
       extern void _Block_object_assign(void *, const void *, const int)     __attribute__((availability(macosx,introduced=10.6)));
       extern void _Block_object_dispose(const void *, const int)     __attribute__((availability(macosx,introduced=10.6)));
       extern void * _NSConcreteGlobalBlock[32]     __attribute__((availability(macosx,introduced=10.6)));
       extern void * _NSConcreteStackBlock[32]     __attribute__((availability(macosx,introduced=10.6)));
       typedef unsigned char UInt8;
       typedef signed char SInt8;
       typedef unsigned short UInt16;
       typedef signed short SInt16;
       typedef unsigned int UInt32;
       typedef signed int SInt32;
       struct wide {    UInt32 lo;    SInt32 hi;  };
       typedef struct wide wide;
       struct UnsignedWide {    UInt32 lo;    UInt32 hi;  };
       typedef struct UnsignedWide UnsignedWide;
             typedef signed long long SInt64;
               typedef unsigned long long UInt64;
       typedef SInt32 Fixed;
       typedef Fixed * FixedPtr;
       typedef SInt32 Fract;
       typedef Fract * FractPtr;
       typedef UInt32 UnsignedFixed;
       typedef UnsignedFixed * UnsignedFixedPtr;
       typedef short ShortFixed;
       typedef ShortFixed * ShortFixedPtr;
       typedef float Float32;
       typedef double Float64;
       struct Float80 {      SInt16 exp;      UInt16 man[4];  };
       typedef struct Float80 Float80;
       struct Float96 {      SInt16 exp[2];      UInt16 man[4];  };
       typedef struct Float96 Float96;
       struct Float32Point {      Float32 x;      Float32 y;  };
       typedef struct Float32Point Float32Point;
       typedef char * Ptr;
       typedef Ptr * Handle;
       typedef long Size;
       typedef SInt16 OSErr;
       typedef SInt32 OSStatus;
       typedef void * LogicalAddress;
       typedef const void * ConstLogicalAddress;
       typedef void * PhysicalAddress;
       typedef UInt8 * BytePtr;
       typedef unsigned long ByteCount;
       typedef unsigned long ByteOffset;
       typedef SInt32 Duration;
       typedef UnsignedWide AbsoluteTime;
       typedef UInt32 OptionBits;
       typedef unsigned long ItemCount;
       typedef UInt32 PBVersion;
       typedef SInt16 ScriptCode;
       typedef SInt16 LangCode;
       typedef SInt16 RegionCode;
       typedef UInt32 FourCharCode;
       typedef FourCharCode OSType;
       typedef FourCharCode ResType;
       typedef OSType * OSTypePtr;
       typedef ResType * ResTypePtr;
       typedef unsigned char Boolean;
       typedef long ( * ProcPtr)();
       typedef void ( * Register68kProcPtr)();
       typedef ProcPtr UniversalProcPtr;
       typedef ProcPtr * ProcHandle;
       typedef UniversalProcPtr * UniversalProcHandle;
       typedef void * PRefCon;
       typedef void * URefCon;
       typedef void * SRefCon;
       enum {    noErr = 0 };
       enum {    kNilOptions = 0 };
       enum {    kVariableLengthArray   __attribute__((deprecated))   = 1 };
       enum {    kUnknownType = 0x3F3F3F3F };
       typedef UInt32 UnicodeScalarValue;
       typedef UInt32 UTF32Char;
       typedef UInt16 UniChar;
       typedef const unsigned char * ConstStr255Param;
       typedef const unsigned char * ConstStr63Param;
       typedef const unsigned char * ConstStr32Param;
       typedef const unsigned char * ConstStr31Param;
       typedef const unsigned char * ConstStr27Param;
       typedef const unsigned char * ConstStr15Param;
       typedef ConstStr63Param ConstStrFileNameParam;
       struct ProcessSerialNumber {    UInt32 highLongOfPSN;    UInt32 lowLongOfPSN;  };
       typedef struct ProcessSerialNumber ProcessSerialNumber;
       typedef ProcessSerialNumber * ProcessSerialNumberPtr;
       struct Point {    short v;    short h;  };
       typedef struct Point Point;
       typedef Point * PointPtr;
       struct Rect {    short top;    short left;    short bottom;    short right;  };
       typedef struct Rect Rect;
       typedef Rect * RectPtr;
       typedef Float96 extended96;
       typedef SInt8 VHSelect;
       extern void Debugger(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
       extern void DebugStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
       extern void SysBreak(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
       extern void SysBreakStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
       extern void SysBreakFunc(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
       extern double kCFCoreFoundationVersionNumber;
       typedef unsigned long CFTypeID;
       typedef unsigned long CFOptionFlags;
       typedef unsigned long CFHashCode;
       typedef signed long CFIndex;
       typedef const __attribute__((objc_bridge(id))) void * CFTypeRef;
       typedef const struct __attribute__((objc_bridge(NSString))) __CFString * CFStringRef;
       typedef struct __attribute__((objc_bridge_mutable(NSMutableString))) __CFString * CFMutableStringRef;
       typedef __attribute__((objc_bridge(id))) CFTypeRef CFPropertyListRef;
       typedef CFIndex CFComparisonResult;
       enum {      kCFCompareLessThan = -1L,     kCFCompareEqualTo = 0,     kCFCompareGreaterThan = 1 };
       typedef CFComparisonResult (*CFComparatorFunction)(const void *val1, const void *val2, void *context);
       static const CFIndex kCFNotFound = -1;
       typedef struct {      CFIndex location;      CFIndex length;  }
       CFRange;
       static __inline__ __attribute__((always_inline)) CFRange CFRangeMake(CFIndex loc, CFIndex len) {      CFRange range;      range.location = loc;      range.length = len;      return range;  }
       extern CFRange __CFRangeMake(CFIndex loc, CFIndex len);
       typedef const struct __attribute__((objc_bridge(NSNull))) __CFNull * CFNullRef;
       extern CFTypeID CFNullGetTypeID(void);
       extern const CFNullRef kCFNull;
       typedef const struct __attribute__((objc_bridge(id))) __CFAllocator * CFAllocatorRef;
       extern const CFAllocatorRef kCFAllocatorDefault;
       extern const CFAllocatorRef kCFAllocatorSystemDefault;
       extern const CFAllocatorRef kCFAllocatorMalloc;
       extern const CFAllocatorRef kCFAllocatorMallocZone;
       extern const CFAllocatorRef kCFAllocatorNull;
       extern const CFAllocatorRef kCFAllocatorUseContext;
       typedef const void * (*CFAllocatorRetainCallBack)(const void *info);
       typedef void (*CFAllocatorReleaseCallBack)(const void *info);
       typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack)(const void *info);
       typedef void * (*CFAllocatorAllocateCallBack)(CFIndex allocSize, CFOptionFlags hint, void *info);
       typedef void * (*CFAllocatorReallocateCallBack)(void *ptr, CFIndex newsize, CFOptionFlags hint, void *info);
       typedef void (*CFAllocatorDeallocateCallBack)(void *ptr, void *info);
       typedef CFIndex (*CFAllocatorPreferredSizeCallBack)(CFIndex size, CFOptionFlags hint, void *info);
       typedef struct {      CFIndex version;      void * info;      CFAllocatorRetainCallBack retain;      CFAllocatorReleaseCallBack release;      CFAllocatorCopyDescriptionCallBack copyDescription;      CFAllocatorAllocateCallBack allocate;      CFAllocatorReallocateCallBack reallocate;      CFAllocatorDeallocateCallBack deallocate;      CFAllocatorPreferredSizeCallBack preferredSize;  }
       CFAllocatorContext;
       extern CFTypeID CFAllocatorGetTypeID(void);
       extern void CFAllocatorSetDefault(CFAllocatorRef allocator);
       extern CFAllocatorRef CFAllocatorGetDefault(void);
       extern CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context);
       extern void *CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
       extern void *CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);
       extern void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr);
       extern CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
       extern void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context);
       extern CFTypeID CFGetTypeID(CFTypeRef cf);
       extern CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);
       extern CFTypeRef CFRetain(CFTypeRef cf);
       extern void CFRelease(CFTypeRef cf);
       extern CFTypeRef CFAutorelease(CFTypeRef __attribute__((cf_consumed)) arg) __attribute__((availability(macosx,introduced=10_9)));
       extern CFIndex CFGetRetainCount(CFTypeRef cf);
       extern Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);
       extern CFHashCode CFHash(CFTypeRef cf);
       extern CFStringRef CFCopyDescription(CFTypeRef cf);
       extern CFAllocatorRef CFGetAllocator(CFTypeRef cf);
       extern CFTypeRef CFMakeCollectable(CFTypeRef cf) ;
       typedef const void * (*CFArrayRetainCallBack)(CFAllocatorRef allocator, const void *value);
       typedef void (*CFArrayReleaseCallBack)(CFAllocatorRef allocator, const void *value);
       typedef CFStringRef (*CFArrayCopyDescriptionCallBack)(const void *value);
       typedef Boolean (*CFArrayEqualCallBack)(const void *value1, const void *value2);
       typedef struct {      CFIndex version;      CFArrayRetainCallBack retain;      CFArrayReleaseCallBack release;      CFArrayCopyDescriptionCallBack copyDescription;      CFArrayEqualCallBack equal;  }
       CFArrayCallBacks;
       extern const CFArrayCallBacks kCFTypeArrayCallBacks;
       typedef void (*CFArrayApplierFunction)(const void *value, void *context);
       typedef const struct __attribute__((objc_bridge(NSArray))) __CFArray * CFArrayRef;
       typedef struct __attribute__((objc_bridge_mutable(NSMutableArray))) __CFArray * CFMutableArrayRef;
       extern CFTypeID CFArrayGetTypeID(void);
       extern CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks);
       extern CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
       extern CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
       extern CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);
       extern CFIndex CFArrayGetCount(CFArrayRef theArray);
       extern CFIndex CFArrayGetCountOfValue(CFArrayRef theArray, CFRange range, const void *value);
       static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16BigToHost(uint16_t arg) {      return ((__uint16_t)(__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg)));  }
       static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32BigToHost(uint32_t arg) {      return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));  }
       static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64BigToHost(uint64_t arg) {      return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));  }
       static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToBig(uint16_t arg) {      return ((__uint16_t)(__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg)));  }
       static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToBig(uint32_t arg) {      return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));  }
       static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToBig(uint64_t arg) {      return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));  }
       static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16LittleToHost(uint16_t arg) {      return ((uint16_t)(arg));  }
       static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32LittleToHost(uint32_t arg) {      return ((uint32_t)(arg));  }
       static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64LittleToHost(uint64_t arg) {      return ((uint64_t)(arg));  }
       static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToLittle(uint16_t arg) {      return ((uint16_t)(arg));  }
       static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToLittle(uint32_t arg) {      return ((uint32_t)(arg));  }
       static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToLittle(uint64_t arg) {      return ((uint64_t)(arg));  }
       typedef struct { uint32_t v; }
       CFSwappedFloat32;
       typedef struct { uint64_t v; }
       CFSwappedFloat64;
       static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloat32HostToSwapped(Float32 arg) {      union CFSwap {  Float32 v;  CFSwappedFloat32 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.sv;  }
       static __inline__ __attribute__((always_inline)) Float32 CFConvertFloat32SwappedToHost(CFSwappedFloat32 arg) {      union CFSwap {  Float32 v;  CFSwappedFloat32 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.v;  }
       static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertFloat64HostToSwapped(Float64 arg) {      union CFSwap {  Float64 v;  CFSwappedFloat64 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.sv;  }
       static __inline__ __attribute__((always_inline)) Float64 CFConvertFloat64SwappedToHost(CFSwappedFloat64 arg) {      union CFSwap {  Float64 v;  CFSwappedFloat64 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.v;  }
       static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloatHostToSwapped(float arg) {      union CFSwap {  float v;  CFSwappedFloat32 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.sv;  }
       static __inline__ __attribute__((always_inline)) float CFConvertFloatSwappedToHost(CFSwappedFloat32 arg) {      union CFSwap {  float v;  CFSwappedFloat32 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.v;  }
       static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertDoubleHostToSwapped(double arg) {      union CFSwap {  double v;  CFSwappedFloat64 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.sv;  }
       static __inline__ __attribute__((always_inline)) double CFConvertDoubleSwappedToHost(CFSwappedFloat64 arg) {      union CFSwap {  double v;  CFSwappedFloat64 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.v;  }
       typedef const void * (*CFDictionaryRetainCallBack)(CFAllocatorRef allocator, const void *value);
       typedef void (*CFDictionaryReleaseCallBack)(CFAllocatorRef allocator, const void *value);
       typedef CFStringRef (*CFDictionaryCopyDescriptionCallBack)(const void *value);
       typedef Boolean (*CFDictionaryEqualCallBack)(const void *value1, const void *value2);
       typedef CFHashCode (*CFDictionaryHashCallBack)(const void *value);
       typedef struct {      CFIndex version;      CFDictionaryRetainCallBack retain;      CFDictionaryReleaseCallBack release;      CFDictionaryCopyDescriptionCallBack copyDescription;      CFDictionaryEqualCallBack equal;      CFDictionaryHashCallBack hash;  }
       CFDictionaryKeyCallBacks;
       extern const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
       extern const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
       typedef struct {      CFIndex version;      CFDictionaryRetainCallBack retain;      CFDictionaryReleaseCallBack release;      CFDictionaryCopyDescriptionCallBack copyDescription;      CFDictionaryEqualCallBack equal;  }
       CFDictionaryValueCallBacks;
       extern const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
       typedef void (*CFDictionaryApplierFunction)(const void *key, const void *value, void *context);
       typedef const struct __attribute__((objc_bridge(NSDictionary))) __CFDictionary * CFDictionaryRef;
       typedef struct __attribute__((objc_bridge_mutable(NSMutableDictionary))) __CFDictionary * CFMutableDictionaryRef;
       extern CFTypeID CFDictionaryGetTypeID(void);
       extern CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
       extern CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
       extern CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
       extern CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);
       extern CFIndex CFDictionaryGetCount(CFDictionaryRef theDict);
       extern CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key);
       extern CFIndex CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void *value);
       extern Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key);
       extern Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value);
       extern const void *CFDictionaryGetValue(CFDictionaryRef theDict, const void *key);
       extern Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value);
       extern void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values);
       extern void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction __attribute__((noescape)) applier, void *context);
       extern void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
       extern void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
       extern void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
       extern void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key);
       extern void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);
       typedef CFStringRef CFNotificationName __attribute__((swift_wrapper(struct)));
       typedef struct __attribute__((objc_bridge_mutable(id))) __CFNotificationCenter * CFNotificationCenterRef;
       typedef void (*CFNotificationCallback)(CFNotificationCenterRef center, void *observer, CFNotificationName name, const void *object, CFDictionaryRef userInfo);
       typedef CFIndex CFNotificationSuspensionBehavior;
       enum {      CFNotificationSuspensionBehaviorDrop = 1,     CFNotificationSuspensionBehaviorCoalesce = 2,     CFNotificationSuspensionBehaviorHold = 3,     CFNotificationSuspensionBehaviorDeliverImmediately = 4 };
       extern CFTypeID CFNotificationCenterGetTypeID(void);
       extern CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void);
       extern CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void);
       extern CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void);
       extern void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior);
       extern void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object);
       extern void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer);
       extern void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately);
       enum {      kCFNotificationDeliverImmediately = (1UL << 0),     kCFNotificationPostToAllSessions = (1UL << 1) };
       extern void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options);
       typedef CFStringRef CFLocaleIdentifier __attribute__((swift_wrapper(struct)));
       typedef CFStringRef CFLocaleKey __attribute__((swift_wrapper(enum)));
       typedef const struct __attribute__((objc_bridge(NSLocale))) __CFLocale *CFLocaleRef;
       extern CFTypeID CFLocaleGetTypeID(void);
       extern CFLocaleRef CFLocaleGetSystem(void);
       extern CFLocaleRef CFLocaleCopyCurrent(void);
       extern const CFLocaleKey kCFLocaleMeasurementSystem;
       extern const CFLocaleKey kCFLocaleDecimalSeparator;
       extern const CFLocaleKey kCFLocaleGroupingSeparator;
       extern const CFLocaleKey kCFLocaleCurrencySymbol;
       extern const CFLocaleKey kCFLocaleCurrencyCode;
       extern const CFLocaleKey kCFLocaleCollatorIdentifier __attribute__((availability(macosx,introduced=10_6)));
       extern const CFLocaleKey kCFLocaleQuotationBeginDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
       extern const CFLocaleKey kCFLocaleQuotationEndDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
       extern const CFLocaleKey kCFLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
       extern const CFLocaleKey kCFLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
       typedef CFStringRef CFCalendarIdentifier __attribute__((swift_wrapper(enum)));
       extern const CFCalendarIdentifier kCFGregorianCalendar;
       extern const CFCalendarIdentifier kCFBuddhistCalendar;
       extern const CFCalendarIdentifier kCFChineseCalendar;
       extern const CFCalendarIdentifier kCFHebrewCalendar;
       extern const CFCalendarIdentifier kCFIslamicCalendar;
       extern const CFCalendarIdentifier kCFIslamicCivilCalendar;
       extern const CFCalendarIdentifier kCFJapaneseCalendar;
       extern const CFCalendarIdentifier kCFRepublicOfChinaCalendar __attribute__((availability(macosx,introduced=10_6)));
       extern const CFCalendarIdentifier kCFPersianCalendar __attribute__((availability(macosx,introduced=10_6)));
       extern const CFCalendarIdentifier kCFIndianCalendar __attribute__((availability(macosx,introduced=10_6)));
       extern const CFCalendarIdentifier kCFISO8601Calendar __attribute__((availability(macosx,introduced=10_6)));
       extern const CFCalendarIdentifier kCFIslamicTabularCalendar __attribute__((availability(macosx,introduced=10_10)));
       extern const CFCalendarIdentifier kCFIslamicUmmAlQuraCalendar __attribute__((availability(macosx,introduced=10_10)));
       typedef double CFTimeInterval;
       typedef CFTimeInterval CFAbsoluteTime;
       extern CFAbsoluteTime CFAbsoluteTimeGetCurrent(void);
       extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
       extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;
       typedef const struct __attribute__((objc_bridge(NSDate))) __CFDate * CFDateRef;
       extern CFTypeID CFDateGetTypeID(void);
       extern CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at);
       extern CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate);
       extern CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate);
       extern CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context);
       typedef const struct __attribute__((objc_bridge(NSTimeZone))) __CFTimeZone * CFTimeZoneRef;
       typedef struct {      SInt32 year;      SInt8 month;      SInt8 day;      SInt8 hour;      SInt8 minute;      double second;  }
       CFGregorianDate __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       typedef struct {      SInt32 years;      SInt32 months;      SInt32 days;      SInt32 hours;      SInt32 minutes;      double seconds;  }
       CFGregorianUnits __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       typedef CFOptionFlags CFGregorianUnitFlags;
       enum {      kCFGregorianUnitsYears __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 0),     kCFGregorianUnitsMonths __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 1),     kCFGregorianUnitsDays __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 2),     kCFGregorianUnitsHours __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 3),     kCFGregorianUnitsMinutes __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 4),     kCFGregorianUnitsSeconds __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 5),     kCFGregorianAllUnits __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = 0x00FFFFFF };
       extern Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits units) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       extern SInt32 CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
       typedef const struct __attribute__((objc_bridge(NSData))) __CFData * CFDataRef;
       typedef struct __attribute__((objc_bridge_mutable(NSMutableData))) __CFData * CFMutableDataRef;
       extern CFTypeID CFDataGetTypeID(void);
       extern CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
       extern CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
       extern CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);
       extern CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
       extern CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);
       extern CFIndex CFDataGetLength(CFDataRef theData);
       extern const UInt8 *CFDataGetBytePtr(CFDataRef theData);
       extern UInt8 *CFDataGetMutableBytePtr(CFMutableDataRef theData);
       extern void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer);
       extern void CFDataSetLength(CFMutableDataRef theData, CFIndex length);
       extern void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);
       extern void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
       typedef ItemCount MPSemaphoreCount;
       typedef UInt32 MPTaskWeight;
       typedef UInt32 MPEventFlags;
       typedef UInt32 MPExceptionKind;
       typedef UInt32 MPTaskStateKind;
       typedef UInt32 MPPageSizeClass;
       enum {    kDurationImmediate = 0,   kDurationForever = 0x7FFFFFFF,   kDurationMillisecond = 1,   kDurationMicrosecond = -1 };
       extern ItemCount MPProcessors(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
       extern ItemCount MPProcessorsScheduled(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
       typedef struct AnkrTable AnkrTable;
       enum {    kLTAGCurrentVersion = 1 };
       struct LtagStringRange {    UInt16 offset;    UInt16 length;  };
       typedef struct LtagStringRange LtagStringRange;
       struct LtagTable {    UInt32 version;    UInt32 flags;    UInt32 numTags;    LtagStringRange tagRange[1];  };
       typedef struct LtagTable LtagTable;
       typedef double CGFloat;
       typedef struct __attribute__((objc_bridge(id))) __IOSurface *IOSurfaceRef __attribute__((swift_name("IOSurfaceRef")));
       struct CGPoint {      CGFloat x;      CGFloat y;  };
       typedef struct CGPoint CGPoint;
       struct CGSize {      CGFloat width;      CGFloat height;  };
       typedef struct CGSize CGSize;
       struct CGVector {      CGFloat dx;      CGFloat dy;  };
       typedef struct CGVector CGVector;
       struct CGRect {      CGPoint origin;      CGSize size;  };
       typedef struct CGRect CGRect;
       typedef uint32_t CGRectEdge;
       enum {      CGRectMinXEdge, CGRectMinYEdge, CGRectMaxXEdge, CGRectMaxYEdge };
       extern const CGPoint CGPointZero       __attribute__((availability(macosx,introduced=10.0)));
       extern const CGSize CGSizeZero     __attribute__((availability(macosx,introduced=10.0)));
       extern const CGRect CGRectZero     __attribute__((availability(macosx,introduced=10.0)));
       extern const CGRect CGRectNull     __attribute__((availability(macosx,introduced=10.0)));
       extern const CGRect CGRectInfinite     __attribute__((availability(macosx,introduced=10.4)));
       static inline CGPoint CGPointMake(CGFloat x, CGFloat y);
       typedef uint16_t CGKeyCode;
       typedef void (*CGScreenRefreshCallback)(uint32_t count,                                         const CGRect * rects,                                         void *_Nullable userInfo);
       NXMouseButton;
       typedef struct __IOFixedPoint32 {      int32_t x;      int32_t y;  }
       IOFixedPoint32;
       typedef int *NXEventSystemInfoType;
       typedef int NXEventSystemInfoData[(1024)];
       typedef struct {   int interface;   int interface_addr;   int dev_type;   int id;  }
       NXEventSystemDevice;
       typedef struct {   NXEventSystemDevice dev[16];  }
       NXEventSystemDeviceList;
       typedef enum { EVNOP, EVHIDE, EVSHOW, EVMOVE, EVLEVEL}
       EvCmd;
       typedef float NXCoord;
       typedef struct _NXPoint {      NXCoord x, y;  }
       NXPoint;
       typedef struct _NXSize {      NXCoord width, height;  }
       NXSize;
       typedef struct _NXTabletPointData {   SInt32 x;      SInt32 y;   SInt32 z;      UInt16 buttons;      UInt16 pressure;      struct {         SInt16 x;         SInt16 y;  }  tilt;   UInt16 rotation;   SInt16 tangentialPressure;   UInt16 deviceID;   SInt16 vendor1;   SInt16 vendor2;   SInt16 vendor3;  }
       NXTabletPointData, *NXTabletPointDataPtr;
       typedef struct _NXTabletProximityData {      UInt16 vendorID;   UInt16 tabletID;   UInt16 pointerID;   UInt16 deviceID;   UInt16 systemTabletID;   UInt16 vendorPointerType;   UInt32 pointerSerialNumber;   UInt64 uniqueID __attribute__ ((packed));   UInt32 capabilityMask;   UInt8 pointerType;   UInt8 enterProximity;   SInt16 reserved1;  }
       NXTabletProximityData, *NXTabletProximityDataPtr;
       typedef union {      struct {         UInt8 subx;         UInt8 suby;         SInt16 eventNum;         SInt32 click;         UInt8 pressure;         UInt8 buttonNumber;         UInt8 subType;         UInt8 reserved2;         SInt32 reserved3;         union {             NXTabletPointData point;             NXTabletProximityData proximity;         } tablet;     }  mouse;      struct {         SInt32 dx;         SInt32 dy;         UInt8 subx;         UInt8 suby;         UInt8 subType;         UInt8 reserved1;         SInt32 reserved2;         union {             NXTabletPointData point;             NXTabletProximityData proximity;         } tablet;     }  mouseMove;      struct {         UInt16 origCharSet;         SInt16 repeat;         UInt16 charSet;         UInt16 charCode;         UInt16 keyCode;         UInt16 origCharCode;         SInt32 reserved1;         UInt32 keyboardType;         SInt32 reserved2;         SInt32 reserved3;         SInt32 reserved4;         SInt32 reserved5[4];     }  key;      struct {         SInt16 reserved;         SInt16 eventNum;         SInt32 trackingNum;         SInt32 userData;         SInt32 reserved1;         SInt32 reserved2;         SInt32 reserved3;         SInt32 reserved4;         SInt32 reserved5;         SInt32 reserved6[4];     }  tracking;      struct {         SInt16 deltaAxis1;         SInt16 deltaAxis2;         SInt16 deltaAxis3;         SInt16 reserved1;         SInt32 fixedDeltaAxis1;         SInt32 fixedDeltaAxis2;         SInt32 fixedDeltaAxis3;         SInt32 pointDeltaAxis1;         SInt32 pointDeltaAxis2;         SInt32 pointDeltaAxis3;         SInt32 reserved8[4];     }  scrollWheel, zoom;      struct {         SInt16 reserved;         SInt16 subType;         union {             float F[11];             SInt32 L[11];             SInt16 S[22];             char C[44];         } misc;     }  compound;      struct {         SInt32 x;         SInt32 y;         SInt32 z;         UInt16 buttons;         UInt16 pressure;         struct {             SInt16 x;             SInt16 y;         } tilt;         UInt16 rotation;         SInt16 tangentialPressure;         UInt16 deviceID;         SInt16 vendor1;         SInt16 vendor2;         SInt16 vendor3;         SInt32 reserved[4];     }  tablet;      struct {         UInt16 vendorID;         UInt16 tabletID;         UInt16 pointerID;         UInt16 deviceID;         UInt16 systemTabletID;         UInt16 vendorPointerType;         UInt32 pointerSerialNumber;         UInt64 uniqueID __attribute__ ((packed));         UInt32 capabilityMask;         UInt8 pointerType;         UInt8 enterProximity;         SInt16 reserved1;         SInt32 reserved2[4];     }  proximity;  }
       NXEventData;
       typedef struct _NXEvent {   SInt32 type;      struct {         SInt32 x, y;     }  location;      UInt64 time __attribute__ ((packed));      SInt32 flags;      UInt32 window;      UInt64 service_id __attribute__ ((packed));      SInt32 ext_pid;      NXEventData data;  }
       NXEvent, *NXEventPtr;
       typedef struct _NXEventExtension {      UInt32 flags;  }
       NXEventExtension;
       typedef struct _NXEventExt {      NXEvent payload;      NXEventExtension extension;  }
       NXEventExt;
       typedef struct __CGEvent *CGEventRef;
       typedef uint32_t CGMouseButton;
       enum {    kCGMouseButtonLeft = 0,   kCGMouseButtonRight = 1,   kCGMouseButtonCenter = 2 };
       typedef uint32_t CGScrollEventUnit;
       enum {    kCGScrollEventUnitPixel = 0,   kCGScrollEventUnitLine = 1, };
       typedef uint32_t CGMomentumScrollPhase;
       enum {      kCGMomentumScrollPhaseNone = 0,     kCGMomentumScrollPhaseBegin = 1,     kCGMomentumScrollPhaseContinue = 2,     kCGMomentumScrollPhaseEnd = 3 };
       typedef uint32_t CGScrollPhase;
       enum {      kCGScrollPhaseBegan = 1,     kCGScrollPhaseChanged = 2,     kCGScrollPhaseEnded = 4,     kCGScrollPhaseCancelled = 8,     kCGScrollPhaseMayBegin = 128 };
       typedef uint32_t CGGesturePhase;
       enum {      kCGGesturePhaseNone = 0,     kCGGesturePhaseBegan = 1,     kCGGesturePhaseChanged = 2,     kCGGesturePhaseEnded = 4,     kCGGesturePhaseCancelled = 8,     kCGGesturePhaseMayBegin = 128 };
       typedef uint64_t CGEventFlags;
       enum {    kCGEventFlagMaskAlphaShift = 0x00010000,   kCGEventFlagMaskShift = 0x00020000,   kCGEventFlagMaskControl = 0x00040000,   kCGEventFlagMaskAlternate = 0x00080000,   kCGEventFlagMaskCommand = 0x00100000,   kCGEventFlagMaskHelp = 0x00400000,   kCGEventFlagMaskSecondaryFn = 0x00800000,   kCGEventFlagMaskNumericPad = 0x00200000,   kCGEventFlagMaskNonCoalesced = 0x00000100 };
       typedef uint32_t CGEventType;
       enum {    kCGEventNull = 0,   kCGEventLeftMouseDown = 1,   kCGEventLeftMouseUp = 2,   kCGEventRightMouseDown = 3,   kCGEventRightMouseUp = 4,   kCGEventMouseMoved = 5,   kCGEventLeftMouseDragged = 6,   kCGEventRightMouseDragged = 7,   kCGEventKeyDown = 10,   kCGEventKeyUp = 11,   kCGEventFlagsChanged = 12,   kCGEventScrollWheel = 22,   kCGEventTabletPointer = 23,   kCGEventTabletProximity = 24,   kCGEventOtherMouseDown = 25,   kCGEventOtherMouseUp = 26,   kCGEventOtherMouseDragged = 27,   kCGEventTapDisabledByTimeout = 0xFFFFFFFE,   kCGEventTapDisabledByUserInput = 0xFFFFFFFF };
       typedef uint64_t CGEventTimestamp;
       typedef uint32_t CGEventField;
       enum {    kCGMouseEventNumber = 0,   kCGMouseEventClickState = 1,   kCGMouseEventPressure = 2,   kCGMouseEventButtonNumber = 3,   kCGMouseEventDeltaX = 4,   kCGMouseEventDeltaY = 5,   kCGMouseEventInstantMouser = 6,   kCGMouseEventSubtype = 7,   kCGKeyboardEventAutorepeat = 8,   kCGKeyboardEventKeycode = 9,   kCGKeyboardEventKeyboardType = 10,   kCGScrollWheelEventDeltaAxis1 = 11,   kCGScrollWheelEventDeltaAxis2 = 12,   kCGScrollWheelEventDeltaAxis3 = 13,   kCGScrollWheelEventFixedPtDeltaAxis1 = 93,   kCGScrollWheelEventFixedPtDeltaAxis2 = 94,   kCGScrollWheelEventFixedPtDeltaAxis3 = 95,   kCGScrollWheelEventPointDeltaAxis1 = 96,   kCGScrollWheelEventPointDeltaAxis2 = 97,   kCGScrollWheelEventPointDeltaAxis3 = 98,   kCGScrollWheelEventScrollPhase = 99,   kCGScrollWheelEventScrollCount = 100,   kCGScrollWheelEventMomentumPhase = 123,   kCGScrollWheelEventInstantMouser = 14,   kCGTabletEventPointX = 15,   kCGTabletEventPointY = 16,   kCGTabletEventPointZ = 17,   kCGTabletEventPointButtons = 18,   kCGTabletEventPointPressure = 19,   kCGTabletEventTiltX = 20,   kCGTabletEventTiltY = 21,   kCGTabletEventRotation = 22,   kCGTabletEventTangentialPressure = 23,   kCGTabletEventDeviceID = 24,   kCGTabletEventVendor1 = 25,   kCGTabletEventVendor2 = 26,   kCGTabletEventVendor3 = 27,   kCGTabletProximityEventVendorID = 28,   kCGTabletProximityEventTabletID = 29,   kCGTabletProximityEventPointerID = 30,   kCGTabletProximityEventDeviceID = 31,   kCGTabletProximityEventSystemTabletID = 32,   kCGTabletProximityEventVendorPointerType = 33,   kCGTabletProximityEventVendorPointerSerialNumber = 34,   kCGTabletProximityEventVendorUniqueID = 35,   kCGTabletProximityEventCapabilityMask = 36,   kCGTabletProximityEventPointerType = 37,   kCGTabletProximityEventEnterProximity = 38,   kCGEventTargetProcessSerialNumber = 39,   kCGEventTargetUnixProcessID = 40,   kCGEventSourceUnixProcessID = 41,   kCGEventSourceUserData = 42,   kCGEventSourceUserID = 43,   kCGEventSourceGroupID = 44,   kCGEventSourceStateID = 45,   kCGScrollWheelEventIsContinuous = 88,   kCGMouseEventWindowUnderMousePointer = 91,   kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92 };
       typedef uint32_t CGEventMouseSubtype;
       enum {    kCGEventMouseSubtypeDefault = 0,   kCGEventMouseSubtypeTabletPoint = 1,   kCGEventMouseSubtypeTabletProximity = 2 };
       typedef uint32_t CGEventTapLocation;
       enum {    kCGHIDEventTap = 0,   kCGSessionEventTap,   kCGAnnotatedSessionEventTap };
       typedef uint32_t CGEventTapPlacement;
       enum {    kCGHeadInsertEventTap = 0,   kCGTailAppendEventTap };
       typedef uint32_t CGEventTapOptions;
       enum {    kCGEventTapOptionDefault = 0x00000000,   kCGEventTapOptionListenOnly = 0x00000001 };
       typedef uint64_t CGEventMask;
       typedef struct __CGEventTapProxy *CGEventTapProxy;
       typedef CGEventRef _Nullable (*CGEventTapCallBack)(CGEventTapProxy proxy,   CGEventType type, CGEventRef event, void * _Nullable userInfo);
       struct __CGEventTapInformation {    uint32_t eventTapID;    CGEventTapLocation tapPoint;    CGEventTapOptions options;    CGEventMask eventsOfInterest;    pid_t tappingProcess;    pid_t processBeingTapped;    _Bool enabled;    float minUsecLatency;    float avgUsecLatency;    float maxUsecLatency;  };
       typedef struct __CGEventTapInformation CGEventTapInformation;
       typedef struct __CGEventSource *CGEventSourceRef;
       typedef int32_t CGEventSourceStateID;
       enum {    kCGEventSourceStatePrivate = -1,   kCGEventSourceStateCombinedSessionState = 0,   kCGEventSourceStateHIDSystemState = 1 };
       typedef uint32_t CGEventSourceKeyboardType;
       extern CFTypeID CGEventGetTypeID(void)     __attribute__((availability(macosx,introduced=10.4)));
       extern CGEventRef _Nullable CGEventCreate(CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.4)));
       extern CFDataRef _Nullable CGEventCreateData(     CFAllocatorRef _Nullable allocator,     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
       extern CGEventRef _Nullable CGEventCreateFromData(     CFAllocatorRef _Nullable allocator, CFDataRef _Nullable data)     __attribute__((availability(macosx,introduced=10.4)));
       extern CGEventRef _Nullable CGEventCreateMouseEvent(     CGEventSourceRef _Nullable source,     CGEventType mouseType, CGPoint mouseCursorPosition,     CGMouseButton mouseButton)     __attribute__((availability(macosx,introduced=10.4)));
       extern CGEventRef _Nullable CGEventCreateKeyboardEvent(     CGEventSourceRef _Nullable source,     CGKeyCode virtualKey, _Bool keyDown)     __attribute__((availability(macosx,introduced=10.4)));
       extern CGEventRef _Nullable CGEventCreateScrollWheelEvent(     CGEventSourceRef _Nullable source,     CGScrollEventUnit units, uint32_t wheelCount, int32_t wheel1, ...)     __attribute__((availability(macosx,introduced=10.5)));
       extern _Bool CGEventSourceKeyState(CGEventSourceStateID stateID,     CGKeyCode key)     __attribute__((availability(macosx,introduced=10.4)));
       enum {    cmXYZData = 'XYZ ',   cmLabData = 'Lab ',   cmLuvData = 'Luv ',   cmYCbCrData = 'YCbr',   cmYxyData = 'Yxy ',   cmRGBData = 'RGB ',   cmSRGBData = 'sRGB',   cmGrayData = 'GRAY',   cmHSVData = 'HSV ',   cmHLSData = 'HLS ',   cmCMYKData = 'CMYK',   cmCMYData = 'CMY ',   cmMCH5Data = 'MCH5',   cmMCH6Data = 'MCH6',   cmMCH7Data = 'MCH7',   cmMCH8Data = 'MCH8',   cm3CLRData = '3CLR',   cm4CLRData = '4CLR',   cm5CLRData = '5CLR',   cm6CLRData = '6CLR',   cm7CLRData = '7CLR',   cm8CLRData = '8CLR',   cm9CLRData = '9CLR',   cm10CLRData = 'ACLR',   cm11CLRData = 'BCLR',   cm12CLRData = 'CCLR',   cm13CLRData = 'DCLR',   cm14CLRData = 'ECLR',   cm15CLRData = 'FCLR',   cmNamedData = 'NAME' };
       enum {    cmInputClass = 'scnr',   cmDisplayClass = 'mntr',   cmOutputClass = 'prtr',   cmLinkClass = 'link',   cmAbstractClass = 'abst',   cmColorSpaceClass = 'spac',   cmNamedColorClass = 'nmcl' };
       enum {    cmMacintosh = 'APPL',   cmMicrosoft = 'MSFT',   cmSolaris = 'SUNW',   cmSiliconGraphics = 'SGI ',   cmTaligent = 'TGNT' };
       enum {    cmParametricType0 = 0,   cmParametricType1 = 1,   cmParametricType2 = 2,   cmParametricType3 = 3,   cmParametricType4 = 4 };
       enum {    cmCS1ChromTag = 'chrm',   cmCS1TRCTag = 'trc ',   cmCS1NameTag = 'name',   cmCS1CustTag = 'cust' };
       typedef struct CMDateTime {    UInt16 year;    UInt16 month;    UInt16 dayOfTheMonth;    UInt16 hours;    UInt16 minutes;    UInt16 seconds;  }
       CMVideoCardGammaTable __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMVideoCardGammaFormula {    Fixed redGamma;    Fixed redMin;    Fixed redMax;    Fixed greenGamma;    Fixed greenMin;    Fixed greenMax;    Fixed blueGamma;    Fixed blueMin;    Fixed blueMax;  }
       CMVideoCardGammaFormula __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMVideoCardGamma {    UInt32 tagType;    union {     CMVideoCardGammaTable table;     CMVideoCardGammaFormula formula;   }  u;  }
       CMVideoCardGamma __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMVideoCardGammaType {    OSType typeDescriptor;    UInt32 reserved;    CMVideoCardGamma gamma;  }
       CMVideoCardGammaType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMMakeAndModel {    OSType manufacturer;    UInt32 model;    UInt32 serialNumber;    UInt32 manufactureDate;    UInt32 reserved1;    UInt32 reserved2;    UInt32 reserved3;    UInt32 reserved4;  }
       CMMakeAndModel __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMMakeAndModelType {    OSType typeDescriptor;    UInt32 reserved;    CMMakeAndModel makeAndModel;  }
       CMMakeAndModelType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       typedef struct CMMultiLocalizedUniCodeEntryRec {    char languageCode[2];    char regionCode[2];    UInt32 textLength;    UInt32 textOffset;  }
       CMMultiLocalizedUniCodeEntryRec __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
       struct RGBColor {    unsigned short red;    unsigned short green;    unsigned short blue;  };
       typedef struct RGBColor RGBColor;
       struct ColorSpec {    short value;    RGBColor rgb;  };
       typedef struct ColorSpec ColorSpec;
       typedef ColorSpec * ColorSpecPtr;
       typedef ColorSpec CSpecArray[1];
       struct ColorTable {    SInt32 ctSeed;    short ctFlags;    short ctSize;    CSpecArray ctTable;  };
       typedef struct ColorTable ColorTable;
       typedef ColorTable * CTabPtr;
       typedef CTabPtr * CTabHandle;
       struct PixMap {    Ptr baseAddr;    short rowBytes;    Rect bounds;    short pmVersion;    short packType;    SInt32 packSize;    Fixed hRes;    Fixed vRes;    short pixelType;    short pixelSize;    short cmpCount;    short cmpSize;    OSType pixelFormat;    CTabHandle pmTable;    void * pmExt;  };
       typedef struct PixMap PixMap;
       typedef PixMap * PixMapPtr;
       typedef PixMapPtr * PixMapHandle;
       enum {    k1MonochromePixelFormat = 0x00000001,   k2IndexedPixelFormat = 0x00000002,   k4IndexedPixelFormat = 0x00000004,   k8IndexedPixelFormat = 0x00000008,   k16BE555PixelFormat = 0x00000010,   k24RGBPixelFormat = 0x00000018,   k32ARGBPixelFormat = 0x00000020,   k1IndexedGrayPixelFormat = 0x00000021,   k2IndexedGrayPixelFormat = 0x00000022,   k4IndexedGrayPixelFormat = 0x00000024,   k8IndexedGrayPixelFormat = 0x00000028,   k16LE555PixelFormat = 'L555',   k16LE5551PixelFormat = '5551',   k16BE565PixelFormat = 'B565',   k16LE565PixelFormat = 'L565',   k24BGRPixelFormat = '24BG',   k32BGRAPixelFormat = 'BGRA',   k32ABGRPixelFormat = 'ABGR',   k32RGBAPixelFormat = 'RGBA',   kYUVSPixelFormat = 'yuvs',   kYUVUPixelFormat = 'yuvu',   kYVU9PixelFormat = 'YVU9',   kYUV411PixelFormat = 'Y411',   kYVYU422PixelFormat = 'YVYU',   kUYVY422PixelFormat = 'UYVY',   kYUV211PixelFormat = 'Y211',   k2vuyPixelFormat = '2vuy' };
       struct Pattern {    UInt8 pat[8];  };
       typedef struct Pattern Pattern;
       typedef Pattern * PatPtr;
       typedef PatPtr * PatHandle;
       struct PixPat {    short patType;    PixMapHandle patMap;    Handle patData;    Handle patXData;    short patXValid;    Handle patXMap;    Pattern pat1Data;  };
       typedef struct PixPat PixPat;
       typedef PixPat * PixPatPtr;
       typedef PixPatPtr * PixPatHandle;
       typedef struct OpaqueRgnHandle* RgnHandle;
       typedef struct GDevice GDevice;
       typedef GDevice * GDPtr;
       typedef GDPtr * GDHandle;
       struct GDevice {    short gdRefNum;    short gdID;    short gdType;    Handle gdITable;    short gdResPref;    Handle gdSearchProc;    Handle gdCompProc;    short gdFlags;    PixMapHandle gdPMap;    SInt32 gdRefCon;    GDHandle gdNextGD;    Rect gdRect;    SInt32 gdMode;    short gdCCBytes;    short gdCCDepth;    Handle gdCCXData;    Handle gdCCXMask;    Handle gdExt;  };
       struct Picture {    short picSize;    Rect picFrame;  };
       typedef struct Picture Picture;
       typedef Picture * PicPtr;
       typedef PicPtr * PicHandle;
       struct OpenCPicParams {    Rect srcRect;    Fixed hRes;    Fixed vRes;    short version;    short reserved1;    SInt32 reserved2;  };
       typedef struct OpenCPicParams OpenCPicParams;
       struct FontInfo {    short ascent;    short descent;    short widMax;    short leading;  };
       typedef struct FontInfo FontInfo;
       typedef SInt32 QDRegionParseDirection;
       typedef OSStatus ( * RegionToRectsProcPtr)(UInt16 message, RgnHandle rgn, const Rect *rect, void *refCon);
       typedef RegionToRectsProcPtr RegionToRectsUPP;
       typedef short TruncCode;
       typedef UInt16 DragConstraint;
       enum {    kNoConstraint = 0,   kVerticalConstraint = 1,   kHorizontalConstraint = 2 };
       typedef void ( * DragGrayRgnProcPtr)(void);
       typedef Boolean ( * ColorSearchProcPtr)(RGBColor *rgb, long *position);
       typedef Boolean ( * ColorComplementProcPtr)(RGBColor * rgb);
       typedef DragGrayRgnProcPtr DragGrayRgnUPP;
       typedef ColorSearchProcPtr ColorSearchUPP;
       typedef ColorComplementProcPtr ColorComplementUPP;
       typedef struct OpaqueWindowPtr* WindowPtr;
       typedef struct OpaqueDialogPtr* DialogPtr;
       typedef WindowPtr WindowRef;
       struct VDGammaRecord {    Ptr csGTable;  };
       typedef struct VDGammaRecord VDGammaRecord;
       typedef VDGammaRecord * VDGamRecPtr;
       typedef void ( * QDGetPicProcPtr)(void *dataPtr, short byteCount);
       typedef void ( * QDPutPicProcPtr)(const void *dataPtr, short byteCount);
       typedef void ( * QDOpcodeProcPtr)(const Rect *fromRect, const Rect *toRect, UInt16 opcode, SInt16 version);
       typedef CGPoint HIPoint;
       typedef CGSize HISize;
       typedef CGRect HIRect;
       typedef UInt32 HICoordinateSpace;
       enum {    kHICoordSpace72DPIGlobal = 1,   kHICoordSpaceScreenPixel = 2,   kHICoordSpaceWindow = 3,   kHICoordSpaceView = 4 };
       extern void HIPointConvert(   HIPoint * ioPoint,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
       extern void HIRectConvert(   HIRect * ioRect,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
       extern void HISizeConvert(   HISize * ioSize,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
       typedef struct OpaqueEventRef* EventRef;
       enum {    eventAlreadyPostedErr = -9860,   eventTargetBusyErr = -9861,   eventClassInvalidErr = -9862,   eventClassIncorrectErr = -9864,   eventDeferAccessibilityEventErr = -9865,   eventHandlerAlreadyInstalledErr = -9866,   eventInternalErr = -9868,   eventKindIncorrectErr = -9869,   eventParameterNotFoundErr = -9870,   eventNotHandledErr = -9874,   eventLoopTimedOutErr = -9875,   eventLoopQuitErr = -9876,   eventNotInQueueErr = -9877,   eventHotKeyExistsErr = -9878,   eventHotKeyInvalidErr = -9879,   eventPassToNextTargetErr = -9880 };
       enum {    kEventParamDirectObject = '----',   kEventParamDragRef = 'drag' };
       enum {    typeDragRef = 'drag',   typeCTFontRef = 'ctfr',   typeCTGlyphInfoRef = 'ctgi' };
       typedef SInt16 EventPriority;
       enum {    kEventPriorityLow = 0,   kEventPriorityStandard = 1,   kEventPriorityHigh = 2 };
       enum {    kEventLeaveInQueue = 0,   kEventRemoveFromQueue = 1 };
       typedef double EventTime;
       typedef EventTime EventTimeout;
       typedef EventTime EventTimerInterval;
       struct EventTypeSpec {    OSType eventClass;    UInt32 eventKind;  };
       typedef struct EventTypeSpec EventTypeSpec;
       typedef OSType EventParamName;
       typedef OSType EventParamType;
       typedef struct OpaqueEventLoopRef* EventLoopRef;
       extern EventLoopRef GetCurrentEventLoop(void) ;
       extern EventLoopRef GetMainEventLoop(void) ;
       extern OSStatus RunCurrentEventLoop(EventTimeout inTimeout) ;
       extern OSStatus QuitEventLoop(EventLoopRef inEventLoop) ;
       extern CFTypeRef GetCFRunLoopFromEventLoop(EventLoopRef inEventLoop) __attribute__((availability(macosx,introduced=10.1)));
       extern OSStatus ReceiveNextEvent(   ItemCount inNumTypes,   const EventTypeSpec * inList,   EventTimeout inTimeout,   Boolean inPullEvent,   EventRef * outEvent) ;
       typedef UInt32 EventAttributes;
       enum {    kEventAttributeNone = 0,   kEventAttributeUserEvent = 1 << 0,   kEventAttributeMonitored = 1 << 3 };
       extern OSStatus CreateEvent(   CFAllocatorRef inAllocator,   OSType inClassID,   UInt32 inKind,   EventTime inWhen,   EventAttributes inAttributes,   EventRef * outEvent) ;
       extern EventRef CopyEvent(EventRef inOther) ;
       typedef struct OpaqueEventHandlerRef* EventHandlerRef;
       typedef struct OpaqueEventHandlerCallRef* EventHandlerCallRef;
       typedef OSStatus ( * EventHandlerProcPtr)(EventHandlerCallRef inHandlerCallRef, EventRef inEvent, void *inUserData);
       typedef EventHandlerProcPtr EventHandlerUPP;
       extern EventHandlerUPP NewEventHandlerUPP(EventHandlerProcPtr userRoutine) ;
       extern void DisposeEventHandlerUPP(EventHandlerUPP userUPP) ;
       extern OSStatus InvokeEventHandlerUPP(   EventHandlerCallRef inHandlerCallRef,   EventRef inEvent,   void * inUserData,   EventHandlerUPP userUPP) ;
       typedef struct OpaqueEventTargetRef* EventTargetRef;
       extern OSStatus InstallEventHandler(   EventTargetRef inTarget,   EventHandlerUPP inHandler,   ItemCount inNumTypes,   const EventTypeSpec * inList,   void * inUserData,   EventHandlerRef * outRef) ;
       extern OSStatus RemoveEventHandler(EventHandlerRef inHandlerRef) ;
       extern OSStatus AddEventTypesToHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
       extern OSStatus RemoveEventTypesFromHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
       extern OSStatus CallNextEventHandler(   EventHandlerCallRef inCallRef,   EventRef inEvent) ;
       enum {    kEventTargetDontPropagate = (1 << 0),   kEventTargetSendToAllHandlers = (1 << 1) };
       extern OSStatus SendEventToEventTarget(   EventRef inEvent,   EventTargetRef inTarget) ;
       extern OSStatus SendEventToEventTargetWithOptions(   EventRef inEvent,   EventTargetRef inTarget,   OptionBits inOptions) __attribute__((availability(macosx,introduced=10.2)));
       extern OSStatus EnableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
       extern OSStatus DisableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
       extern Boolean IsSecureEventInputEnabled(void) __attribute__((availability(macosx,introduced=10.3)));
       typedef UInt16 EventKind;
       typedef UInt16 EventMask;
       enum {    nullEvent = 0,   mouseDown = 1,   mouseUp = 2,   keyDown = 3,   keyUp = 4,   autoKey = 5,   updateEvt = 6,   diskEvt = 7,   activateEvt = 8,   osEvt = 15,   kHighLevelEvent = 23 };
       enum {    mDownMask = 1 << mouseDown,   mUpMask = 1 << mouseUp,   keyDownMask = 1 << keyDown,   keyUpMask = 1 << keyUp,   autoKeyMask = 1 << autoKey,   updateMask = 1 << updateEvt,   diskMask = 1 << diskEvt,   activMask = 1 << activateEvt,   highLevelEventMask = 0x0400,   osMask = 1 << osEvt,   everyEvent = 0xFFFF };
       enum {    charCodeMask = 0x000000FF,   keyCodeMask = 0x0000FF00,   adbAddrMask = 0x00FF0000,   osEvtMessageMask = (UInt32)0xFF000000 };
       enum {    mouseMovedMessage = 0x00FA,   suspendResumeMessage = 0x0001 };
       enum {    resumeFlag = 1 };
       typedef UInt16 EventModifiers;
       enum {    activeFlagBit = 0,   btnStateBit = 7,   cmdKeyBit = 8,   shiftKeyBit = 9,   alphaLockBit = 10,   optionKeyBit = 11,   controlKeyBit = 12,   rightShiftKeyBit = 13,   rightOptionKeyBit = 14,   rightControlKeyBit = 15 };
       enum {    activeFlag = 1 << activeFlagBit,   btnState = 1 << btnStateBit,   cmdKey = 1 << cmdKeyBit,   shiftKey = 1 << shiftKeyBit,   alphaLock = 1 << alphaLockBit,   optionKey = 1 << optionKeyBit,   controlKey = 1 << controlKeyBit,   rightShiftKey = 1 << rightShiftKeyBit,   rightOptionKey = 1 << rightOptionKeyBit,   rightControlKey = 1 << rightControlKeyBit };
       enum {    kNullCharCode = 0,   kHomeCharCode = 1,   kEnterCharCode = 3,   kEndCharCode = 4,   kHelpCharCode = 5,   kBellCharCode = 7,   kBackspaceCharCode = 8,   kTabCharCode = 9,   kLineFeedCharCode = 10,   kVerticalTabCharCode = 11,   kPageUpCharCode = 11,   kFormFeedCharCode = 12,   kPageDownCharCode = 12,   kReturnCharCode = 13,   kFunctionKeyCharCode = 16,   kCommandCharCode = 17,   kCheckCharCode = 18,   kDiamondCharCode = 19,   kAppleLogoCharCode = 20,   kEscapeCharCode = 27,   kClearCharCode = 27,   kLeftArrowCharCode = 28,   kRightArrowCharCode = 29,   kUpArrowCharCode = 30,   kDownArrowCharCode = 31,   kSpaceCharCode = 32,   kDeleteCharCode = 127,   kBulletCharCode = 165,   kNonBreakingSpaceCharCode = 202 };
       enum {    kShiftUnicode = 0x21E7,   kControlUnicode = 0x2303,   kOptionUnicode = 0x2325,   kCommandUnicode = 0x2318,   kPencilUnicode = 0x270E,   kPencilLeftUnicode = 0xF802,   kCheckUnicode = 0x2713,   kDiamondUnicode = 0x25C6,   kBulletUnicode = 0x2022,   kAppleLogoUnicode = 0xF8FF };
       enum {    kVK_ANSI_A = 0x00,   kVK_ANSI_S = 0x01,   kVK_ANSI_D = 0x02,   kVK_ANSI_F = 0x03,   kVK_ANSI_H = 0x04,   kVK_ANSI_G = 0x05,   kVK_ANSI_Z = 0x06,   kVK_ANSI_X = 0x07,   kVK_ANSI_C = 0x08,   kVK_ANSI_V = 0x09,   kVK_ANSI_B = 0x0B,   kVK_ANSI_Q = 0x0C,   kVK_ANSI_W = 0x0D,   kVK_ANSI_E = 0x0E,   kVK_ANSI_R = 0x0F,   kVK_ANSI_Y = 0x10,   kVK_ANSI_T = 0x11,   kVK_ANSI_1 = 0x12,   kVK_ANSI_2 = 0x13,   kVK_ANSI_3 = 0x14,   kVK_ANSI_4 = 0x15,   kVK_ANSI_6 = 0x16,   kVK_ANSI_5 = 0x17,   kVK_ANSI_Equal = 0x18,   kVK_ANSI_9 = 0x19,   kVK_ANSI_7 = 0x1A,   kVK_ANSI_Minus = 0x1B,   kVK_ANSI_8 = 0x1C,   kVK_ANSI_0 = 0x1D,   kVK_ANSI_RightBracket = 0x1E,   kVK_ANSI_O = 0x1F,   kVK_ANSI_U = 0x20,   kVK_ANSI_LeftBracket = 0x21,   kVK_ANSI_I = 0x22,   kVK_ANSI_P = 0x23,   kVK_ANSI_L = 0x25,   kVK_ANSI_J = 0x26,   kVK_ANSI_Quote = 0x27,   kVK_ANSI_K = 0x28,   kVK_ANSI_Semicolon = 0x29,   kVK_ANSI_Backslash = 0x2A,   kVK_ANSI_Comma = 0x2B,   kVK_ANSI_Slash = 0x2C,   kVK_ANSI_N = 0x2D,   kVK_ANSI_M = 0x2E,   kVK_ANSI_Period = 0x2F,   kVK_ANSI_Grave = 0x32,   kVK_ANSI_KeypadDecimal = 0x41,   kVK_ANSI_KeypadMultiply = 0x43,   kVK_ANSI_KeypadPlus = 0x45,   kVK_ANSI_KeypadClear = 0x47,   kVK_ANSI_KeypadDivide = 0x4B,   kVK_ANSI_KeypadEnter = 0x4C,   kVK_ANSI_KeypadMinus = 0x4E,   kVK_ANSI_KeypadEquals = 0x51,   kVK_ANSI_Keypad0 = 0x52,   kVK_ANSI_Keypad1 = 0x53,   kVK_ANSI_Keypad2 = 0x54,   kVK_ANSI_Keypad3 = 0x55,   kVK_ANSI_Keypad4 = 0x56,   kVK_ANSI_Keypad5 = 0x57,   kVK_ANSI_Keypad6 = 0x58,   kVK_ANSI_Keypad7 = 0x59,   kVK_ANSI_Keypad8 = 0x5B,   kVK_ANSI_Keypad9 = 0x5C };
       enum {    kVK_Return = 0x24,   kVK_Tab = 0x30,   kVK_Space = 0x31,   kVK_Delete = 0x33,   kVK_Escape = 0x35,   kVK_Command = 0x37,   kVK_Shift = 0x38,   kVK_CapsLock = 0x39,   kVK_Option = 0x3A,   kVK_Control = 0x3B,   kVK_RightCommand = 0x36,   kVK_RightShift = 0x3C,   kVK_RightOption = 0x3D,   kVK_RightControl = 0x3E,   kVK_Function = 0x3F,   kVK_F17 = 0x40,   kVK_VolumeUp = 0x48,   kVK_VolumeDown = 0x49,   kVK_Mute = 0x4A,   kVK_F18 = 0x4F,   kVK_F19 = 0x50,   kVK_F20 = 0x5A,   kVK_F5 = 0x60,   kVK_F6 = 0x61,   kVK_F7 = 0x62,   kVK_F3 = 0x63,   kVK_F8 = 0x64,   kVK_F9 = 0x65,   kVK_F11 = 0x67,   kVK_F13 = 0x69,   kVK_F16 = 0x6A,   kVK_F14 = 0x6B,   kVK_F10 = 0x6D,   kVK_F12 = 0x6F,   kVK_F15 = 0x71,   kVK_Help = 0x72,   kVK_Home = 0x73,   kVK_PageUp = 0x74,   kVK_ForwardDelete = 0x75,   kVK_F4 = 0x76,   kVK_End = 0x77,   kVK_F2 = 0x78,   kVK_PageDown = 0x79,   kVK_F1 = 0x7A,   kVK_LeftArrow = 0x7B,   kVK_RightArrow = 0x7C,   kVK_DownArrow = 0x7D,   kVK_UpArrow = 0x7E };
       enum {    kVK_ISO_Section = 0x0A };
       enum {    kVK_JIS_Yen = 0x5D,   kVK_JIS_Underscore = 0x5E,   kVK_JIS_KeypadComma = 0x5F,   kVK_JIS_Eisu = 0x66,   kVK_JIS_Kana = 0x68 };
       struct EventRecord {    EventKind what;    unsigned long message;    UInt32 when;    Point where;    EventModifiers modifiers;  };
       extern UInt8 LMGetKbdLast(void) ;
       extern UInt8 LMGetKbdType(void) ;
       enum {    kAppearanceEventClass = 'appr',   kAEAppearanceChanged = 'thme',   kAESystemFontChanged = 'sysf',   kAESmallSystemFontChanged = 'ssfn',   kAEViewsFontChanged = 'vfnt' };
       enum {    kThemeDataFileType = 'thme',   kThemePlatinumFileType = 'pltn',   kThemeCustomThemesFileType = 'scen',   kThemeSoundTrackFileType = 'tsnd' };
       typedef SInt16 AppearancePartCode;
       enum {    kAppearancePartMetaNone = 0,   kAppearancePartMetaDisabled = 254,   kAppearancePartMetaInactive = 255,   kAppearancePartIndicator = 129,   kAppearancePartUpButton = 20,   kAppearancePartDownButton = 21,   kAppearancePartLeftButton = kAppearancePartUpButton,   kAppearancePartRightButton = kAppearancePartDownButton,   kAppearancePartPageUpArea = 22,   kAppearancePartPageDownArea = 23,   kAppearancePartPageLeftArea = kAppearancePartPageUpArea,   kAppearancePartPageRightArea = kAppearancePartPageDownArea };
       typedef UInt16 AppearanceRegionCode;
       enum {    kAppearanceRegionTitleBar = 0,   kAppearanceRegionTitleText = 1,   kAppearanceRegionCloseBox = 2,   kAppearanceRegionZoomBox = 3,   kAppearanceRegionDrag = 5,   kAppearanceRegionGrow = 6,   kAppearanceRegionCollapseBox = 7,   kAppearanceRegionTitleProxyIcon = 8,   kAppearanceRegionStructure = 32,   kAppearanceRegionContent = 33,   kAppearanceRegionToolbarButton = 41 };
       enum {    kThemeBrushDialogBackgroundActive = 1,   kThemeBrushDialogBackgroundInactive = 2,   kThemeBrushAlertBackgroundActive = 3,   kThemeBrushAlertBackgroundInactive = 4,   kThemeBrushModelessDialogBackgroundActive = 5,   kThemeBrushModelessDialogBackgroundInactive = 6,   kThemeBrushUtilityWindowBackgroundActive = 7,   kThemeBrushUtilityWindowBackgroundInactive = 8,   kThemeBrushListViewSortColumnBackground = 9,   kThemeBrushListViewBackground = 10,   kThemeBrushIconLabelBackground = 11,   kThemeBrushListViewSeparator = 12,   kThemeBrushChasingArrows = 13,   kThemeBrushDragHilite = 14,   kThemeBrushDocumentWindowBackground = 15,   kThemeBrushFinderWindowBackground = 16,   kThemeBrushScrollBarDelimiterActive = 17,   kThemeBrushScrollBarDelimiterInactive = 18,   kThemeBrushFocusHighlight = 19,   kThemeBrushPopupArrowActive = 20,   kThemeBrushPopupArrowPressed = 21,   kThemeBrushPopupArrowInactive = 22,   kThemeBrushAppleGuideCoachmark = 23,   kThemeBrushIconLabelBackgroundSelected = 24,   kThemeBrushStaticAreaFill = 25,   kThemeBrushActiveAreaFill = 26,   kThemeBrushButtonFrameActive = 27,   kThemeBrushButtonFrameInactive = 28,   kThemeBrushButtonFaceActive = 29,   kThemeBrushButtonFaceInactive = 30,   kThemeBrushButtonFacePressed = 31,   kThemeBrushButtonActiveDarkShadow = 32,   kThemeBrushButtonActiveDarkHighlight = 33,   kThemeBrushButtonActiveLightShadow = 34,   kThemeBrushButtonActiveLightHighlight = 35,   kThemeBrushButtonInactiveDarkShadow = 36,   kThemeBrushButtonInactiveDarkHighlight = 37,   kThemeBrushButtonInactiveLightShadow = 38,   kThemeBrushButtonInactiveLightHighlight = 39,   kThemeBrushButtonPressedDarkShadow = 40,   kThemeBrushButtonPressedDarkHighlight = 41,   kThemeBrushButtonPressedLightShadow = 42,   kThemeBrushButtonPressedLightHighlight = 43,   kThemeBrushBevelActiveLight = 44,   kThemeBrushBevelActiveDark = 45,   kThemeBrushBevelInactiveLight = 46,   kThemeBrushBevelInactiveDark = 47,   kThemeBrushNotificationWindowBackground = 48,   kThemeBrushMovableModalBackground = 49,   kThemeBrushSheetBackgroundOpaque = 50,   kThemeBrushDrawerBackground = 51,   kThemeBrushToolbarBackground = 52,   kThemeBrushSheetBackgroundTransparent = 53,   kThemeBrushMenuBackground = 54,   kThemeBrushMenuBackgroundSelected = 55,   kThemeBrushListViewOddRowBackground = 56,   kThemeBrushListViewEvenRowBackground = 57,   kThemeBrushListViewColumnDivider = 58,   kThemeBrushSheetBackground = kThemeBrushSheetBackgroundOpaque,   kThemeBrushBlack = -1,   kThemeBrushWhite = -2,   kThemeBrushPrimaryHighlightColor = -3,   kThemeBrushSecondaryHighlightColor = -4,   kThemeBrushAlternatePrimaryHighlightColor = -5 };
       typedef SInt16 ThemeBrush;
       enum {    kThemeTextColorDialogActive = 1,   kThemeTextColorDialogInactive = 2,   kThemeTextColorAlertActive = 3,   kThemeTextColorAlertInactive = 4,   kThemeTextColorModelessDialogActive = 5,   kThemeTextColorModelessDialogInactive = 6,   kThemeTextColorWindowHeaderActive = 7,   kThemeTextColorWindowHeaderInactive = 8,   kThemeTextColorPlacardActive = 9,   kThemeTextColorPlacardInactive = 10,   kThemeTextColorPlacardPressed = 11,   kThemeTextColorPushButtonActive = 12,   kThemeTextColorPushButtonInactive = 13,   kThemeTextColorPushButtonPressed = 14,   kThemeTextColorBevelButtonActive = 15,   kThemeTextColorBevelButtonInactive = 16,   kThemeTextColorBevelButtonPressed = 17,   kThemeTextColorPopupButtonActive = 18,   kThemeTextColorPopupButtonInactive = 19,   kThemeTextColorPopupButtonPressed = 20,   kThemeTextColorIconLabel = 21,   kThemeTextColorListView = 22 };
       enum {    kThemeTextColorDocumentWindowTitleActive = 23,   kThemeTextColorDocumentWindowTitleInactive = 24,   kThemeTextColorMovableModalWindowTitleActive = 25,   kThemeTextColorMovableModalWindowTitleInactive = 26,   kThemeTextColorUtilityWindowTitleActive = 27,   kThemeTextColorUtilityWindowTitleInactive = 28,   kThemeTextColorPopupWindowTitleActive = 29,   kThemeTextColorPopupWindowTitleInactive = 30,   kThemeTextColorRootMenuActive = 31,   kThemeTextColorRootMenuSelected = 32,   kThemeTextColorRootMenuDisabled = 33,   kThemeTextColorMenuItemActive = 34,   kThemeTextColorMenuItemSelected = 35,   kThemeTextColorMenuItemDisabled = 36,   kThemeTextColorPopupLabelActive = 37,   kThemeTextColorPopupLabelInactive = 38 };
       enum {    kThemeTextColorTabFrontActive = 39,   kThemeTextColorTabNonFrontActive = 40,   kThemeTextColorTabNonFrontPressed = 41,   kThemeTextColorTabFrontInactive = 42,   kThemeTextColorTabNonFrontInactive = 43,   kThemeTextColorIconLabelSelected = 44,   kThemeTextColorBevelButtonStickyActive = 45,   kThemeTextColorBevelButtonStickyInactive = 46 };
       enum {    kThemeTextColorNotification = 47 };
       enum {    kThemeTextColorSystemDetail = 48 };
       enum {    kThemeTextColorBlack = -1,   kThemeTextColorWhite = -2 };
       typedef SInt16 ThemeTextColor;
       enum {    kThemeStateInactive = 0,   kThemeStateActive = 1,   kThemeStatePressed = 2,   kThemeStateRollover = 6,   kThemeStateUnavailable = 7,   kThemeStateUnavailableInactive = 8 };
       typedef struct OpaqueControlRef* ControlRef;
       typedef ControlRef ControlHandle;
       typedef ControlRef HIViewRef;
       enum {    textMenuProc = 0,   kHIMenuAppendItem = 0x0000FFFF };
       enum {    noMark = 0 };
       enum {    kMenuStdMenuProc = 63,   kMenuStdMenuBarProc = 63 };
       enum {    kMenuNoModifiers = 0,   kMenuShiftModifier = (1 << 0),   kMenuOptionModifier = (1 << 1),   kMenuControlModifier = (1 << 2),   kMenuNoCommandModifier = (1 << 3) };
       enum {    kMenuNoIcon = 0,   kMenuIconType = 1,   kMenuShrinkIconType = 2,   kMenuSmallIconType = 3,   kMenuColorIconType = 4,   kMenuIconSuiteType = 5,   kMenuIconRefType = 6,   kMenuCGImageRefType = 7,   kMenuSystemIconSelectorType = 8,   kMenuIconResourceType = 9 };
       enum {    kMenuNullGlyph = 0x00,   kMenuTabRightGlyph = 0x02,   kMenuTabLeftGlyph = 0x03,   kMenuEnterGlyph = 0x04,   kMenuShiftGlyph = 0x05,   kMenuControlGlyph = 0x06,   kMenuOptionGlyph = 0x07,   kMenuSpaceGlyph = 0x09,   kMenuDeleteRightGlyph = 0x0A,   kMenuReturnGlyph = 0x0B,   kMenuReturnR2LGlyph = 0x0C,   kMenuNonmarkingReturnGlyph = 0x0D,   kMenuPencilGlyph = 0x0F,   kMenuDownwardArrowDashedGlyph = 0x10,   kMenuCommandGlyph = 0x11,   kMenuCheckmarkGlyph = 0x12,   kMenuDiamondGlyph = 0x13,   kMenuAppleLogoFilledGlyph = 0x14,   kMenuParagraphKoreanGlyph = 0x15,   kMenuDeleteLeftGlyph = 0x17,   kMenuLeftArrowDashedGlyph = 0x18,   kMenuUpArrowDashedGlyph = 0x19,   kMenuRightArrowDashedGlyph = 0x1A,   kMenuEscapeGlyph = 0x1B,   kMenuClearGlyph = 0x1C,   kMenuLeftDoubleQuotesJapaneseGlyph = 0x1D,   kMenuRightDoubleQuotesJapaneseGlyph = 0x1E,   kMenuTrademarkJapaneseGlyph = 0x1F,   kMenuBlankGlyph = 0x61,   kMenuPageUpGlyph = 0x62,   kMenuCapsLockGlyph = 0x63,   kMenuLeftArrowGlyph = 0x64,   kMenuRightArrowGlyph = 0x65,   kMenuNorthwestArrowGlyph = 0x66,   kMenuHelpGlyph = 0x67,   kMenuUpArrowGlyph = 0x68,   kMenuSoutheastArrowGlyph = 0x69,   kMenuDownArrowGlyph = 0x6A,   kMenuPageDownGlyph = 0x6B,   kMenuAppleLogoOutlineGlyph = 0x6C,   kMenuContextualMenuGlyph = 0x6D,   kMenuPowerGlyph = 0x6E,   kMenuF1Glyph = 0x6F,   kMenuF2Glyph = 0x70,   kMenuF3Glyph = 0x71,   kMenuF4Glyph = 0x72,   kMenuF5Glyph = 0x73,   kMenuF6Glyph = 0x74,   kMenuF7Glyph = 0x75,   kMenuF8Glyph = 0x76,   kMenuF9Glyph = 0x77,   kMenuF10Glyph = 0x78,   kMenuF11Glyph = 0x79,   kMenuF12Glyph = 0x7A,   kMenuF13Glyph = 0x87,   kMenuF14Glyph = 0x88,   kMenuF15Glyph = 0x89,   kMenuControlISOGlyph = 0x8A,   kMenuEjectGlyph = 0x8C,   kMenuEisuGlyph = 0x8D,   kMenuKanaGlyph = 0x8E,   kMenuF16Glyph = 0x8F,   kMenuF17Glyph = 0x90,   kMenuF18Glyph = 0x91,   kMenuF19Glyph = 0x92 };
       typedef UInt32 MenuAttributes;
       enum {    kMenuAttrExcludesMarkColumn = (1 << 0),   kMenuAttrAutoDisable = (1 << 2),   kMenuAttrUsePencilGlyph = (1 << 3),   kMenuAttrHidden = (1 << 4),   kMenuAttrCondenseSeparators = (1 << 5),   kMenuAttrDoNotCacheImage = (1 << 6),   kMenuAttrDoNotUseUserCommandKeys = (1 << 7) };
       typedef UInt32 MenuItemAttributes;
       enum {    kMenuItemAttrDisabled = (1 << 0),   kMenuItemAttrIconDisabled = (1 << 1),   kMenuItemAttrSubmenuParentChoosable = (1 << 2),   kMenuItemAttrDynamic = (1 << 3),   kMenuItemAttrNotPreviousAlternate = (1 << 4),   kMenuItemAttrHidden = (1 << 5),   kMenuItemAttrSeparator = (1 << 6),   kMenuItemAttrSectionHeader = (1 << 7),   kMenuItemAttrIgnoreMeta = (1 << 8),   kMenuItemAttrAutoRepeat = (1 << 9),   kMenuItemAttrUseVirtualKey = (1 << 10),   kMenuItemAttrCustomDraw = (1 << 11),   kMenuItemAttrIncludeInCmdKeyMatching = (1 << 12),   kMenuItemAttrAutoDisable = (1 << 13),   kMenuItemAttrUpdateSingleItem = (1 << 14) };
       typedef UInt32 MenuTrackingMode;
       enum {    kMenuTrackingModeMouse = 1,   kMenuTrackingModeKeyboard = 2 };
       typedef UInt32 MenuEventOptions;
       enum {    kMenuEventIncludeDisabledItems = 0x0001,   kMenuEventQueryOnly = 0x0002,   kMenuEventDontCheckSubmenus = 0x0004 };
       typedef SInt16 MenuID;
       typedef UInt16 MenuItemIndex;
       typedef OSType MenuCommand;
       typedef struct OpaqueMenuRef* MenuRef;
       typedef MenuRef MenuHandle;
       typedef Handle MenuBarHandle;
       struct MenuBarHeader {    UInt16 lastMenu;    SInt16 lastRight;    SInt16 mbResID;  };
       typedef struct MenuBarHeader MenuBarHeader;
       struct HMenuBarHeader {    UInt16 lastHMenu;    PixMapHandle menuTitleBits;  };
       typedef struct HMenuBarHeader HMenuBarHeader;
       struct MenuBarMenu {    MenuRef menu;    SInt16 menuLeft;  };
       typedef struct MenuBarMenu MenuBarMenu;
       struct HMenuBarMenu {    MenuRef menu;    SInt16 reserved;  };
       enum {    kEventParamAppleEvent = 'aevt',   kEventParamAppleEventReply = 'aerp' };
       typedef UInt16 MouseTrackingResult;
       enum {    kMouseTrackingMouseDown = 1,   kMouseTrackingMouseUp = 2,   kMouseTrackingMouseExited = 3,   kMouseTrackingMouseEntered = 4,   kMouseTrackingMouseDragged = 5,   kMouseTrackingKeyModifiersChanged = 6,   kMouseTrackingUserCancelled = 7,   kMouseTrackingTimedOut = 8,   kMouseTrackingMouseMoved = 9,   kMouseTrackingClientEvent = 10,   kMouseTrackingScrollWheel = 11 };
       enum {    kTrackMouseLocationOptionDontConsumeMouseUp = (1 << 0),   kTrackMouseLocationOptionIncludeScrollWheel = (1 << 3) };
       extern Boolean CheckEventQueueForUserCancel(void) ;
       extern Boolean IsUserCancelEventRef(EventRef event) ;
       enum {    kMouseParamsSticky = 'stic',   kMouseParamsProxyIcon = 'prox',   kMouseParamsClickAndHold = 'clho',   kMouseParamsDragInitiation = 'drag' };
       extern OSStatus HIMouseTrackingGetParameters(   OSType inSelector,   EventTime * outTime,   HISize * outDistance) __attribute__((availability(macosx,introduced=10.3)));
       enum {    kEventClassMouse = 'mous',   kEventClassKeyboard = 'keyb',   kEventClassTextInput = 'text',   kEventClassApplication = 'appl',   kEventClassAppleEvent = 'eppc',   kEventClassMenu = 'menu',   kEventClassWindow = 'wind',   kEventClassControl = 'cntl',   kEventClassCommand = 'cmds',   kEventClassTablet = 'tblt',   kEventClassVolume = 'vol ',   kEventClassAppearance = 'appm',   kEventClassService = 'serv',   kEventClassToolbar = 'tbar',   kEventClassToolbarItem = 'tbit',   kEventClassToolbarItemView = 'tbiv',   kEventClassAccessibility = 'acce',   kEventClassSystem = 'macs',   kEventClassInk = 'ink ',   kEventClassTSMDocumentAccess = 'tdac',   kEventClassGesture = 'gest' };
       typedef UInt16 EventMouseButton;
       enum {    kEventTextInputUpdateActiveInputArea = 1 };
       enum {    kEventTextInputUnicodeForKeyEvent = 2 };
       enum {    kEventTextInputOffsetToPos = 3 };
       enum {    kEventTextInputPosToOffset = 4 };
       enum {    kEventTextInputShowHideBottomWindow = 5 };
       enum {    kEventTextInputGetSelectedText = 6 };
       enum {    kEventTextInputUnicodeText = 7 };
       enum {    kEventTextInputFilterText = 14 };
       enum {    kEventTextInputIsMouseEventInInlineInputArea = 16 };
       enum {    kEventRawKeyDown = 1 };
       enum {    kEventRawKeyRepeat = 2 };
       enum {    kEventRawKeyUp = 3 };
       enum {    kEventRawKeyModifiersChanged = 4 };
       enum {    kEventHotKeyPressed = 5 };
       enum {    kEventHotKeyReleased = 6 };
       enum {    kEventKeyModifierNumLockBit = 16,   kEventKeyModifierFnBit = 17 };
       enum {    kEventKeyModifierNumLockMask = 1 << kEventKeyModifierNumLockBit,   kEventKeyModifierFnMask = 1 << kEventKeyModifierFnBit };
       enum {    kEventAppActivated = 1 };
       enum {    kEventAppDeactivated = 2 };
       enum {    kEventAppQuit = 3 };
       enum {    kEventAppLaunchNotification = 4 };
       enum {    kEventAppLaunched = 5 };
       enum {    kEventAppTerminated = 6 };
       enum {    kEventMenuMeasureItemWidth = 100 };
       enum {    kEventMenuMeasureItemHeight = 101 };
       enum {    kEventMenuDrawItem = 102 };
       enum {    kEventMenuDrawItemContent = 103 };
       enum {    kEventMenuCalculateSize = 1004 };
       enum {    kEventMenuCreateFrameView = 1005 };
       enum {    kEventMenuGetFrameBounds = 1006 };
       enum {    kEventMenuBecomeScrollable = 1007 };
       enum {    kEventMenuCeaseToBeScrollable = 1008 };
       enum {    kEventMenuBarShown = 2000 };
       enum {    kEventMenuBarHidden = 2001 };
       enum {    kEventCommandProcess = 1 };
       enum {    kEventCommandUpdateStatus = 2 };
       enum {    kHICommandOK = 'ok  ',   kHICommandCancel = 'not!',   kHICommandQuit = 'quit',   kHICommandQuitAndDiscardWindows = 'qudw',   kHICommandQuitAndKeepWindows = 'qukw',   kHICommandUndo = 'undo',   kHICommandRedo = 'redo',   kHICommandCut = 'cut ',   kHICommandCopy = 'copy',   kHICommandPaste = 'past',   kHICommandClear = 'clea',   kHICommandSelectAll = 'sall',   kHICommandHide = 'hide',   kHICommandHideOthers = 'hido',   kHICommandShowAll = 'shal',   kHICommandPreferences = 'pref',   kHICommandZoomWindow = 'zoom',   kHICommandMinimizeWindow = 'mini',   kHICommandMinimizeAll = 'mina',   kHICommandMaximizeWindow = 'maxi',   kHICommandMaximizeAll = 'maxa',   kHICommandArrangeInFront = 'frnt',   kHICommandBringAllToFront = 'bfrt',   kHICommandWindowListSeparator = 'wldv',   kHICommandWindowListTerminator = 'wlst',   kHICommandSelectWindow = 'swin',   kHICommandRotateWindowsForward = 'rotw',   kHICommandRotateWindowsBackward = 'rotb',   kHICommandRotateFloatingWindowsForward = 'rtfw',   kHICommandRotateFloatingWindowsBackward = 'rtfb',   kHICommandToggleFullScreen = 'fsm ',   kHICommandAbout = 'abou',   kHICommandNew = 'new ',   kHICommandOpen = 'open',   kHICommandClose = 'clos',   kHICommandCloseAll = 'cloa',   kHICommandCloseFile = 'clof',   kHICommandSave = 'save',   kHICommandSaveAs = 'svas',   kHICommandRevert = 'rvrt',   kHICommandPrint = 'prnt',   kHICommandPageSetup = 'page',   kHICommandAppHelp = 'ahlp',   kHICommandShowCharacterPalette = 'chrp',   kHICommandShowSpellingPanel = 'shsp',   kHICommandCheckSpelling = 'cksp',   kHICommandChangeSpelling = 'chsp',   kHICommandCheckSpellingAsYouType = 'aspc',   kHICommandIgnoreSpelling = 'igsp',   kHICommandLearnWord = 'lrwd',   kHICommandStartDictation = 'sdct' };
       enum {    kHICommandFromMenu = (1 << 0),   kHICommandFromControl = (1 << 1),   kHICommandFromWindow = (1 << 2) };
       struct HICommand {    UInt32 attributes;    UInt32 commandID;    struct {     MenuRef menuRef;     MenuItemIndex menuItemIndex;   }  menu;  };
       typedef struct HICommand HICommand;
       struct HICommandExtended {    UInt32 attributes;    UInt32 commandID;    union {     ControlRef control;     WindowRef window;     struct {       MenuRef menuRef;       MenuItemIndex menuItemIndex;     } menu;   }  source;  };
       enum {    kEventSystemTimeDateChanged = 2 };
       enum {    kEventSystemDisplaysAsleep = 3 };
       enum {    kEventSystemDisplaysAwake = 4 };
       enum {    kEventSystemDisplayReconfigured = 6 };
       enum {    kEventSystemUserSessionActivated = 10 };
       enum {    kEventSystemUserSessionDeactivated = 11 };
       extern EventTargetRef GetApplicationEventTarget(void) ;
       extern EventTargetRef GetEventDispatcherTarget(void) ;
       extern EventTargetRef GetEventMonitorTarget(void) __attribute__((availability(macosx,introduced=10.3)));
       extern OSStatus ProcessHICommand(const HICommand * inCommand) ;
       struct EventHotKeyID {    OSType signature;    UInt32 id;  };
       typedef struct EventHotKeyID EventHotKeyID;
       typedef struct OpaqueEventHotKeyRef* EventHotKeyRef;
       enum {    kEventHotKeyNoOptions = 0,   kEventHotKeyExclusive = (1 << 0) };
       extern OSStatus RegisterEventHotKey(   UInt32 inHotKeyCode,   UInt32 inHotKeyModifiers,   EventHotKeyID inHotKeyID,   EventTargetRef inTarget,   OptionBits inOptions,   EventHotKeyRef * outRef) ;
       extern OSStatus UnregisterEventHotKey(EventHotKeyRef inHotKey) ;
       extern OSStatus CopySymbolicHotKeys(CFArrayRef * outHotKeyArray) __attribute__((availability(macosx,introduced=10.3)));
       enum {    kHIHotKeyModeAllEnabled = 0,   kHIHotKeyModeAllDisabled = (1 << 0),   kHIHotKeyModeAllDisabledExceptUniversalAccess = (1 << 1) };
