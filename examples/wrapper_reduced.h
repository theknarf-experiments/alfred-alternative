typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;
typedef union {   char __mbstate8128;   long long _mbstateL;  } __mbstate_t;
typedef __mbstate_t __darwin_mbstate_t;
typedef long int __darwin_ptrdiff_t;
typedef long unsigned int __darwin_size_t;
typedef __builtin_va_list __darwin_va_list;
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t __darwin_rune_t;
typedef int __darwin_wint_t;
typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;
typedef int64_t register_t;
typedef __darwin_intptr_t intptr_t;
typedef unsigned long uintptr_t;
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
typedef u_int64_t syscall_arg_t;
extern double fdim(double, double);
extern long double fdiml(long double, long double);
extern float fmaxf(float, float);
extern double fmax(double, double);
extern double y1(double) __attribute__((availability(macosx,introduced=10.0)));
extern double yn(int, double) __attribute__((availability(macosx,introduced=10.0)));
extern double scalb(double, double);
extern int signgam;
typedef enum {   P_ALL,  P_PID,  P_PGID }
idtype_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef unsigned char UInt8;
typedef signed char SInt8;
typedef unsigned short UInt16;
typedef signed short SInt16;
typedef unsigned int UInt32;
typedef signed int SInt32;
struct wide {    UInt32 lo;    SInt32 hi;  };
typedef struct wide wide;
struct UnsignedWide {    UInt32 lo;    UInt32 hi;  };
typedef struct UnsignedWide UnsignedWide;
typedef signed long long SInt64;
typedef unsigned long long UInt64;
typedef SInt32 Fixed;
typedef Fixed * FixedPtr;
typedef SInt32 Fract;
typedef Fract * FractPtr;
typedef UInt32 UnsignedFixed;
typedef UnsignedFixed * UnsignedFixedPtr;
typedef short ShortFixed;
typedef ShortFixed * ShortFixedPtr;
typedef float Float32;
typedef double Float64;
struct Float80 {      SInt16 exp;      UInt16 man[4];  };
typedef struct Float80 Float80;
struct Float96 {      SInt16 exp[2];      UInt16 man[4];  };
typedef struct Float96 Float96;
struct Float32Point {      Float32 x;      Float32 y;  };
typedef struct Float32Point Float32Point;
typedef char * Ptr;
typedef Ptr * Handle;
typedef long Size;
typedef SInt16 OSErr;
typedef SInt32 OSStatus;
typedef void * LogicalAddress;
typedef const void * ConstLogicalAddress;
typedef void * PhysicalAddress;
typedef UInt8 * BytePtr;
typedef unsigned long ByteCount;
typedef unsigned long ByteOffset;
typedef SInt32 Duration;
typedef UnsignedWide AbsoluteTime;
typedef UInt32 OptionBits;
typedef unsigned long ItemCount;
typedef UInt32 PBVersion;
typedef SInt16 ScriptCode;
typedef SInt16 LangCode;
typedef SInt16 RegionCode;
typedef UInt32 FourCharCode;
typedef FourCharCode OSType;
typedef FourCharCode ResType;
typedef OSType * OSTypePtr;
typedef ResType * ResTypePtr;
typedef unsigned char Boolean;
typedef long ( * ProcPtr)();
typedef void ( * Register68kProcPtr)();
typedef ProcPtr UniversalProcPtr;
typedef ProcPtr * ProcHandle;
typedef UniversalProcPtr * UniversalProcHandle;
typedef void * PRefCon;
typedef void * URefCon;
typedef void * SRefCon;
enum {    kNilOptions = 0 };
enum {    kVariableLengthArray   __attribute__((deprecated))   = 1 };
enum {    kUnknownType = 0x3F3F3F3F };
typedef UInt32 UnicodeScalarValue;
typedef UInt32 UTF32Char;
typedef UInt16 UniChar;
typedef const unsigned char * ConstStr255Param;
typedef const unsigned char * ConstStr63Param;
typedef const unsigned char * ConstStr32Param;
typedef const unsigned char * ConstStr31Param;
typedef const unsigned char * ConstStr27Param;
typedef const unsigned char * ConstStr15Param;
typedef ConstStr63Param ConstStrFileNameParam;
struct ProcessSerialNumber {    UInt32 highLongOfPSN;    UInt32 lowLongOfPSN;  };
typedef struct ProcessSerialNumber ProcessSerialNumber;
typedef ProcessSerialNumber * ProcessSerialNumberPtr;
struct Point {    short v;    short h;  };
typedef struct Point Point;
typedef Point * PointPtr;
struct Rect {    short top;    short left;    short bottom;    short right;  };
typedef struct Rect Rect;
typedef Rect * RectPtr;
typedef Float96 extended96;
typedef SInt8 VHSelect;
extern void Debugger(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
extern void DebugStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
extern void SysBreak(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
extern void SysBreakStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
extern void SysBreakFunc(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
extern double kCFCoreFoundationVersionNumber;
typedef unsigned long CFTypeID;
typedef unsigned long CFOptionFlags;
typedef unsigned long CFHashCode;
typedef signed long CFIndex;
typedef const __attribute__((objc_bridge(id))) void * CFTypeRef;
typedef const struct __attribute__((objc_bridge(NSString))) __CFString * CFStringRef;
typedef struct __attribute__((objc_bridge_mutable(NSMutableString))) __CFString * CFMutableStringRef;
typedef __attribute__((objc_bridge(id))) CFTypeRef CFPropertyListRef;
typedef CFIndex CFComparisonResult;
enum {      kCFCompareLessThan = -1L,     kCFCompareEqualTo = 0,     kCFCompareGreaterThan = 1 };
typedef CFComparisonResult (*CFComparatorFunction)(const void *val1, const void *val2, void *context);
static const CFIndex kCFNotFound = -1;
typedef struct {      CFIndex location;      CFIndex length;  }
CFRange;
static __inline__ __attribute__((always_inline)) CFRange CFRangeMake(CFIndex loc, CFIndex len) {      CFRange range;      range.location = loc;      range.length = len;      return range;  }
extern CFRange __CFRangeMake(CFIndex loc, CFIndex len);
typedef const struct __attribute__((objc_bridge(NSNull))) __CFNull * CFNullRef;
extern CFTypeID CFNullGetTypeID(void);
extern const CFNullRef kCFNull;
typedef const struct __attribute__((objc_bridge(id))) __CFAllocator * CFAllocatorRef;
extern const CFAllocatorRef kCFAllocatorDefault;
extern const CFAllocatorRef kCFAllocatorSystemDefault;
extern const CFAllocatorRef kCFAllocatorMalloc;
extern const CFAllocatorRef kCFAllocatorMallocZone;
extern const CFAllocatorRef kCFAllocatorNull;
extern const CFAllocatorRef kCFAllocatorUseContext;
typedef const void * (*CFAllocatorRetainCallBack)(const void *info);
typedef void (*CFAllocatorReleaseCallBack)(const void *info);
typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack)(const void *info);
typedef void * (*CFAllocatorAllocateCallBack)(CFIndex allocSize, CFOptionFlags hint, void *info);
typedef void * (*CFAllocatorReallocateCallBack)(void *ptr, CFIndex newsize, CFOptionFlags hint, void *info);
typedef void (*CFAllocatorDeallocateCallBack)(void *ptr, void *info);
typedef CFIndex (*CFAllocatorPreferredSizeCallBack)(CFIndex size, CFOptionFlags hint, void *info);
typedef struct {      CFIndex version;      void * info;      CFAllocatorRetainCallBack retain;      CFAllocatorReleaseCallBack release;      CFAllocatorCopyDescriptionCallBack copyDescription;      CFAllocatorAllocateCallBack allocate;      CFAllocatorReallocateCallBack reallocate;      CFAllocatorDeallocateCallBack deallocate;      CFAllocatorPreferredSizeCallBack preferredSize;  }
CFAllocatorContext;
extern CFTypeID CFAllocatorGetTypeID(void);
extern void CFAllocatorSetDefault(CFAllocatorRef allocator);
extern CFAllocatorRef CFAllocatorGetDefault(void);
extern CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context);
extern void *CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
extern void *CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);
extern void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr);
extern CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
extern void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context);
extern CFTypeID CFGetTypeID(CFTypeRef cf);
extern CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);
extern CFTypeRef CFRetain(CFTypeRef cf);
extern void CFRelease(CFTypeRef cf);
extern CFTypeRef CFAutorelease(CFTypeRef __attribute__((cf_consumed)) arg) __attribute__((availability(macosx,introduced=10_9)));
extern CFIndex CFGetRetainCount(CFTypeRef cf);
extern Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);
extern CFHashCode CFHash(CFTypeRef cf);
extern CFStringRef CFCopyDescription(CFTypeRef cf);
extern CFAllocatorRef CFGetAllocator(CFTypeRef cf);
extern CFTypeRef CFMakeCollectable(CFTypeRef cf) ;
typedef const void * (*CFArrayRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFArrayReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFArrayCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFArrayEqualCallBack)(const void *value1, const void *value2);
typedef struct {      CFIndex version;      CFArrayRetainCallBack retain;      CFArrayReleaseCallBack release;      CFArrayCopyDescriptionCallBack copyDescription;      CFArrayEqualCallBack equal;  }
CFArrayCallBacks;
extern const CFArrayCallBacks kCFTypeArrayCallBacks;
typedef void (*CFArrayApplierFunction)(const void *value, void *context);
typedef const struct __attribute__((objc_bridge(NSArray))) __CFArray * CFArrayRef;
typedef UInt32 MPTaskStateKind;
typedef UInt32 MPPageSizeClass;
extern ItemCount MPProcessors(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
extern ItemCount MPProcessorsScheduled(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
typedef struct AnkrTable AnkrTable;
enum {    kLTAGCurrentVersion = 1 };
struct LtagStringRange {    UInt16 offset;    UInt16 length;  };
typedef struct LtagStringRange LtagStringRange;
struct LtagTable {    UInt32 version;    UInt32 flags;    UInt32 numTags;    LtagStringRange tagRange[1];  };
typedef struct LtagTable LtagTable;
typedef double CGFloat;
typedef struct __attribute__((objc_bridge(id))) __IOSurface *IOSurfaceRef __attribute__((swift_name("IOSurfaceRef")));
struct CGPoint {      CGFloat x;      CGFloat y;  };
typedef struct CGPoint CGPoint;
struct CGSize {      CGFloat width;      CGFloat height;  };
typedef struct CGSize CGSize;
struct CGVector {      CGFloat dx;      CGFloat dy;  };
typedef struct CGVector CGVector;
struct CGRect {      CGPoint origin;      CGSize size;  };
typedef struct CGRect CGRect;
typedef uint32_t CGRectEdge;
enum {      CGRectMinXEdge, CGRectMinYEdge, CGRectMaxXEdge, CGRectMaxYEdge };
typedef struct CMMultiLocalizedUniCodeEntryRec {    char languageCode[2];    char regionCode[2];    UInt32 textLength;    UInt32 textOffset;  }
CMMultiLocalizedUniCodeEntryRec __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
struct RGBColor {    unsigned short red;    unsigned short green;    unsigned short blue;  };
typedef struct RGBColor RGBColor;
struct ColorSpec {    short value;    RGBColor rgb;  };
typedef struct ColorSpec ColorSpec;
typedef ColorSpec * ColorSpecPtr;
typedef ColorSpec CSpecArray[1];
struct ColorTable {    SInt32 ctSeed;    short ctFlags;    short ctSize;    CSpecArray ctTable;  };
typedef struct ColorTable ColorTable;
typedef ColorTable * CTabPtr;
typedef CTabPtr * CTabHandle;
struct PixMap {    Ptr baseAddr;    short rowBytes;    Rect bounds;    short pmVersion;    short packType;    SInt32 packSize;    Fixed hRes;    Fixed vRes;    short pixelType;    short pixelSize;    short cmpCount;    short cmpSize;    OSType pixelFormat;    CTabHandle pmTable;    void * pmExt;  };
typedef struct PixMap PixMap;
typedef PixMap * PixMapPtr;
typedef PixMapPtr * PixMapHandle;
enum {    k1MonochromePixelFormat = 0x00000001,   k2IndexedPixelFormat = 0x00000002,   k4IndexedPixelFormat = 0x00000004,   k8IndexedPixelFormat = 0x00000008,   k16BE555PixelFormat = 0x00000010,   k24RGBPixelFormat = 0x00000018,   k32ARGBPixelFormat = 0x00000020,   k1IndexedGrayPixelFormat = 0x00000021,   k2IndexedGrayPixelFormat = 0x00000022,   k4IndexedGrayPixelFormat = 0x00000024,   k8IndexedGrayPixelFormat = 0x00000028,   k16LE555PixelFormat = 'L555',   k16LE5551PixelFormat = '5551',   k16BE565PixelFormat = 'B565',   k16LE565PixelFormat = 'L565',   k24BGRPixelFormat = '24BG',   k32BGRAPixelFormat = 'BGRA',   k32ABGRPixelFormat = 'ABGR',   k32RGBAPixelFormat = 'RGBA',   kYUVSPixelFormat = 'yuvs',   kYUVUPixelFormat = 'yuvu',   kYVU9PixelFormat = 'YVU9',   kYUV411PixelFormat = 'Y411',   kYVYU422PixelFormat = 'YVYU',   kUYVY422PixelFormat = 'UYVY',   kYUV211PixelFormat = 'Y211',   k2vuyPixelFormat = '2vuy' };
struct Pattern {    UInt8 pat[8];  };
typedef struct Pattern Pattern;
typedef Pattern * PatPtr;
typedef PatPtr * PatHandle;
struct PixPat {    short patType;    PixMapHandle patMap;    Handle patData;    Handle patXData;    short patXValid;    Handle patXMap;    Pattern pat1Data;  };
typedef struct PixPat PixPat;
typedef PixPat * PixPatPtr;
typedef short TruncCode;
typedef UInt16 DragConstraint;
enum {    kNoConstraint = 0,   kVerticalConstraint = 1,   kHorizontalConstraint = 2 };
typedef void ( * DragGrayRgnProcPtr)(void);
typedef Boolean ( * ColorSearchProcPtr)(RGBColor *rgb, long *position);
typedef Boolean ( * ColorComplementProcPtr)(RGBColor * rgb);
typedef DragGrayRgnProcPtr DragGrayRgnUPP;
typedef ColorSearchProcPtr ColorSearchUPP;
typedef ColorComplementProcPtr ColorComplementUPP;
typedef struct OpaqueWindowPtr* WindowPtr;
typedef struct OpaqueDialogPtr* DialogPtr;
typedef WindowPtr WindowRef;
struct VDGammaRecord {    Ptr csGTable;  };
typedef struct VDGammaRecord VDGammaRecord;
typedef VDGammaRecord * VDGamRecPtr;
typedef void ( * QDGetPicProcPtr)(void *dataPtr, short byteCount);
typedef void ( * QDPutPicProcPtr)(const void *dataPtr, short byteCount);
typedef void ( * QDOpcodeProcPtr)(const Rect *fromRect, const Rect *toRect, UInt16 opcode, SInt16 version);
typedef CGPoint HIPoint;
typedef CGSize HISize;
typedef CGRect HIRect;
typedef UInt32 HICoordinateSpace;
enum {    kHICoordSpace72DPIGlobal = 1,   kHICoordSpaceScreenPixel = 2,   kHICoordSpaceWindow = 3,   kHICoordSpaceView = 4 };
extern void HIPointConvert(   HIPoint * ioPoint,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
extern void HIRectConvert(   HIRect * ioRect,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
extern void HISizeConvert(   HISize * ioSize,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
typedef struct OpaqueEventRef* EventRef;
enum {    eventAlreadyPostedErr = -9860,   eventTargetBusyErr = -9861,   eventClassInvalidErr = -9862,   eventClassIncorrectErr = -9864,   eventDeferAccessibilityEventErr = -9865,   eventHandlerAlreadyInstalledErr = -9866,   eventInternalErr = -9868,   eventKindIncorrectErr = -9869,   eventParameterNotFoundErr = -9870,   eventNotHandledErr = -9874,   eventLoopTimedOutErr = -9875,   eventLoopQuitErr = -9876,   eventNotInQueueErr = -9877,   eventHotKeyExistsErr = -9878,   eventHotKeyInvalidErr = -9879,   eventPassToNextTargetErr = -9880 };
enum {    kEventParamDirectObject = '----',   kEventParamDragRef = 'drag' };
enum {    typeDragRef = 'drag',   typeCTFontRef = 'ctfr',   typeCTGlyphInfoRef = 'ctgi' };
typedef SInt16 EventPriority;
enum {    kEventPriorityLow = 0,   kEventPriorityStandard = 1,   kEventPriorityHigh = 2 };
enum {    kEventLeaveInQueue = 0,   kEventRemoveFromQueue = 1 };
typedef double EventTime;
typedef EventTime EventTimeout;
typedef EventTime EventTimerInterval;
struct EventTypeSpec {    OSType eventClass;    UInt32 eventKind;  };
typedef struct EventTypeSpec EventTypeSpec;
typedef OSType EventParamName;
typedef OSType EventParamType;
typedef struct OpaqueEventLoopRef* EventLoopRef;
extern EventLoopRef GetCurrentEventLoop(void) ;
extern EventLoopRef GetMainEventLoop(void) ;
extern OSStatus RunCurrentEventLoop(EventTimeout inTimeout) ;
extern OSStatus QuitEventLoop(EventLoopRef inEventLoop) ;
extern CFTypeRef GetCFRunLoopFromEventLoop(EventLoopRef inEventLoop) __attribute__((availability(macosx,introduced=10.1)));
extern OSStatus ReceiveNextEvent(   ItemCount inNumTypes,   const EventTypeSpec * inList,   EventTimeout inTimeout,   Boolean inPullEvent,   EventRef * outEvent) ;
typedef UInt32 EventAttributes;
enum {    kEventAttributeNone = 0,   kEventAttributeUserEvent = 1 << 0,   kEventAttributeMonitored = 1 << 3 };
extern OSStatus CreateEvent(   CFAllocatorRef inAllocator,   OSType inClassID,   UInt32 inKind,   EventTime inWhen,   EventAttributes inAttributes,   EventRef * outEvent) ;
extern EventRef CopyEvent(EventRef inOther) ;
typedef struct OpaqueEventHandlerRef* EventHandlerRef;
typedef struct OpaqueEventHandlerCallRef* EventHandlerCallRef;
typedef OSStatus ( * EventHandlerProcPtr)(EventHandlerCallRef inHandlerCallRef, EventRef inEvent, void *inUserData);
typedef EventHandlerProcPtr EventHandlerUPP;
extern EventHandlerUPP NewEventHandlerUPP(EventHandlerProcPtr userRoutine) ;
extern void DisposeEventHandlerUPP(EventHandlerUPP userUPP) ;
extern OSStatus InvokeEventHandlerUPP(   EventHandlerCallRef inHandlerCallRef,   EventRef inEvent,   void * inUserData,   EventHandlerUPP userUPP) ;
typedef struct OpaqueEventTargetRef* EventTargetRef;
extern OSStatus InstallEventHandler(   EventTargetRef inTarget,   EventHandlerUPP inHandler,   ItemCount inNumTypes,   const EventTypeSpec * inList,   void * inUserData,   EventHandlerRef * outRef) ;
extern OSStatus RemoveEventHandler(EventHandlerRef inHandlerRef) ;
extern OSStatus AddEventTypesToHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
extern OSStatus RemoveEventTypesFromHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
extern OSStatus CallNextEventHandler(   EventHandlerCallRef inCallRef,   EventRef inEvent) ;
enum {    kEventTargetDontPropagate = (1 << 0),   kEventTargetSendToAllHandlers = (1 << 1) };
extern OSStatus SendEventToEventTarget(   EventRef inEvent,   EventTargetRef inTarget) ;
extern OSStatus SendEventToEventTargetWithOptions(   EventRef inEvent,   EventTargetRef inTarget,   OptionBits inOptions) __attribute__((availability(macosx,introduced=10.2)));
extern OSStatus EnableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
extern OSStatus DisableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
extern Boolean IsSecureEventInputEnabled(void) __attribute__((availability(macosx,introduced=10.3)));
typedef UInt16 EventKind;
typedef UInt16 EventMask;
enum {    nullEvent = 0,   mouseDown = 1,   mouseUp = 2,   keyDown = 3,   keyUp = 4,   autoKey = 5,   updateEvt = 6,   diskEvt = 7,   activateEvt = 8,   osEvt = 15,   kHighLevelEvent = 23 };
enum {    mDownMask = 1 << mouseDown,   mUpMask = 1 << mouseUp,   keyDownMask = 1 << keyDown,   keyUpMask = 1 << keyUp,   autoKeyMask = 1 << autoKey,   updateMask = 1 << updateEvt,   diskMask = 1 << diskEvt,   activMask = 1 << activateEvt,   highLevelEventMask = 0x0400,   osMask = 1 << osEvt,   everyEvent = 0xFFFF };
enum {    charCodeMask = 0x000000FF,   keyCodeMask = 0x0000FF00,   adbAddrMask = 0x00FF0000,   osEvtMessageMask = (UInt32)0xFF000000 };
enum {    mouseMovedMessage = 0x00FA,   suspendResumeMessage = 0x0001 };
enum {    resumeFlag = 1 };
typedef UInt16 EventModifiers;
enum {    activeFlagBit = 0,   btnStateBit = 7,   cmdKeyBit = 8,   shiftKeyBit = 9,   alphaLockBit = 10,   optionKeyBit = 11,   controlKeyBit = 12,   rightShiftKeyBit = 13,   rightOptionKeyBit = 14,   rightControlKeyBit = 15 };
enum {    activeFlag = 1 << activeFlagBit,   btnState = 1 << btnStateBit,   cmdKey = 1 << cmdKeyBit,   shiftKey = 1 << shiftKeyBit,   alphaLock = 1 << alphaLockBit,   optionKey = 1 << optionKeyBit,   controlKey = 1 << controlKeyBit,   rightShiftKey = 1 << rightShiftKeyBit,   rightOptionKey = 1 << rightOptionKeyBit,   rightControlKey = 1 << rightControlKeyBit };
enum {    kNullCharCode = 0,   kHomeCharCode = 1,   kEnterCharCode = 3,   kEndCharCode = 4,   kHelpCharCode = 5,   kBellCharCode = 7,   kBackspaceCharCode = 8,   kTabCharCode = 9,   kLineFeedCharCode = 10,   kVerticalTabCharCode = 11,   kPageUpCharCode = 11,   kFormFeedCharCode = 12,   kPageDownCharCode = 12,   kReturnCharCode = 13,   kFunctionKeyCharCode = 16,   kCommandCharCode = 17,   kCheckCharCode = 18,   kDiamondCharCode = 19,   kAppleLogoCharCode = 20,   kEscapeCharCode = 27,   kClearCharCode = 27,   kLeftArrowCharCode = 28,   kRightArrowCharCode = 29,   kUpArrowCharCode = 30,   kDownArrowCharCode = 31,   kSpaceCharCode = 32,   kDeleteCharCode = 127,   kBulletCharCode = 165,   kNonBreakingSpaceCharCode = 202 };
enum {    kShiftUnicode = 0x21E7,   kControlUnicode = 0x2303,   kOptionUnicode = 0x2325,   kCommandUnicode = 0x2318,   kPencilUnicode = 0x270E,   kPencilLeftUnicode = 0xF802,   kCheckUnicode = 0x2713,   kDiamondUnicode = 0x25C6,   kBulletUnicode = 0x2022,   kAppleLogoUnicode = 0xF8FF };
enum {    kVK_ANSI_A = 0x00,   kVK_ANSI_S = 0x01,   kVK_ANSI_D = 0x02,   kVK_ANSI_F = 0x03,   kVK_ANSI_H = 0x04,   kVK_ANSI_G = 0x05,   kVK_ANSI_Z = 0x06,   kVK_ANSI_X = 0x07,   kVK_ANSI_C = 0x08,   kVK_ANSI_V = 0x09,   kVK_ANSI_B = 0x0B,   kVK_ANSI_Q = 0x0C,   kVK_ANSI_W = 0x0D,   kVK_ANSI_E = 0x0E,   kVK_ANSI_R = 0x0F,   kVK_ANSI_Y = 0x10,   kVK_ANSI_T = 0x11,   kVK_ANSI_1 = 0x12,   kVK_ANSI_2 = 0x13,   kVK_ANSI_3 = 0x14,   kVK_ANSI_4 = 0x15,   kVK_ANSI_6 = 0x16,   kVK_ANSI_5 = 0x17,   kVK_ANSI_Equal = 0x18,   kVK_ANSI_9 = 0x19,   kVK_ANSI_7 = 0x1A,   kVK_ANSI_Minus = 0x1B,   kVK_ANSI_8 = 0x1C,   kVK_ANSI_0 = 0x1D,   kVK_ANSI_RightBracket = 0x1E,   kVK_ANSI_O = 0x1F,   kVK_ANSI_U = 0x20,   kVK_ANSI_LeftBracket = 0x21,   kVK_ANSI_I = 0x22,   kVK_ANSI_P = 0x23,   kVK_ANSI_L = 0x25,   kVK_ANSI_J = 0x26,   kVK_ANSI_Quote = 0x27,   kVK_ANSI_K = 0x28,   kVK_ANSI_Semicolon = 0x29,   kVK_ANSI_Backslash = 0x2A,   kVK_ANSI_Comma = 0x2B,   kVK_ANSI_Slash = 0x2C,   kVK_ANSI_N = 0x2D,   kVK_ANSI_M = 0x2E,   kVK_ANSI_Period = 0x2F,   kVK_ANSI_Grave = 0x32,   kVK_ANSI_KeypadDecimal = 0x41,   kVK_ANSI_KeypadMultiply = 0x43,   kVK_ANSI_KeypadPlus = 0x45,   kVK_ANSI_KeypadClear = 0x47,   kVK_ANSI_KeypadDivide = 0x4B,   kVK_ANSI_KeypadEnter = 0x4C,   kVK_ANSI_KeypadMinus = 0x4E,   kVK_ANSI_KeypadEquals = 0x51,   kVK_ANSI_Keypad0 = 0x52,   kVK_ANSI_Keypad1 = 0x53,   kVK_ANSI_Keypad2 = 0x54,   kVK_ANSI_Keypad3 = 0x55,   kVK_ANSI_Keypad4 = 0x56,   kVK_ANSI_Keypad5 = 0x57,   kVK_ANSI_Keypad6 = 0x58,   kVK_ANSI_Keypad7 = 0x59,   kVK_ANSI_Keypad8 = 0x5B,   kVK_ANSI_Keypad9 = 0x5C };
enum {    kVK_Return = 0x24,   kVK_Tab = 0x30,   kVK_Space = 0x31,   kVK_Delete = 0x33,   kVK_Escape = 0x35,   kVK_Command = 0x37,   kVK_Shift = 0x38,   kVK_CapsLock = 0x39,   kVK_Option = 0x3A,   kVK_Control = 0x3B,   kVK_RightCommand = 0x36,   kVK_RightShift = 0x3C,   kVK_RightOption = 0x3D,   kVK_RightControl = 0x3E,   kVK_Function = 0x3F,   kVK_F17 = 0x40,   kVK_VolumeUp = 0x48,   kVK_VolumeDown = 0x49,   kVK_Mute = 0x4A,   kVK_F18 = 0x4F,   kVK_F19 = 0x50,   kVK_F20 = 0x5A,   kVK_F5 = 0x60,   kVK_F6 = 0x61,   kVK_F7 = 0x62,   kVK_F3 = 0x63,   kVK_F8 = 0x64,   kVK_F9 = 0x65,   kVK_F11 = 0x67,   kVK_F13 = 0x69,   kVK_F16 = 0x6A,   kVK_F14 = 0x6B,   kVK_F10 = 0x6D,   kVK_F12 = 0x6F,   kVK_F15 = 0x71,   kVK_Help = 0x72,   kVK_Home = 0x73,   kVK_PageUp = 0x74,   kVK_ForwardDelete = 0x75,   kVK_F4 = 0x76,   kVK_End = 0x77,   kVK_F2 = 0x78,   kVK_PageDown = 0x79,   kVK_F1 = 0x7A,   kVK_LeftArrow = 0x7B,   kVK_RightArrow = 0x7C,   kVK_DownArrow = 0x7D,   kVK_UpArrow = 0x7E };
enum {    kVK_ISO_Section = 0x0A };
enum {    kThemeTextColorBlack = -1,   kThemeTextColorWhite = -2 };
typedef SInt16 ThemeTextColor;
enum {    kThemeStateInactive = 0,   kThemeStateActive = 1,   kThemeStatePressed = 2,   kThemeStateRollover = 6,   kThemeStateUnavailable = 7,   kThemeStateUnavailableInactive = 8 };
typedef struct OpaqueControlRef* ControlRef;
typedef ControlRef ControlHandle;
typedef ControlRef HIViewRef;
enum {    textMenuProc = 0,   kHIMenuAppendItem = 0x0000FFFF };
enum {    noMark = 0 };
enum {    kMenuStdMenuProc = 63,   kMenuStdMenuBarProc = 63 };
enum {    kMenuNoModifiers = 0,   kMenuShiftModifier = (1 << 0),   kMenuOptionModifier = (1 << 1),   kMenuControlModifier = (1 << 2),   kMenuNoCommandModifier = (1 << 3) };
enum {    kMenuNoIcon = 0,   kMenuIconType = 1,   kMenuShrinkIconType = 2,   kMenuSmallIconType = 3,   kMenuColorIconType = 4,   kMenuIconSuiteType = 5,   kMenuIconRefType = 6,   kMenuCGImageRefType = 7,   kMenuSystemIconSelectorType = 8,   kMenuIconResourceType = 9 };
enum {    kMenuNullGlyph = 0x00,   kMenuTabRightGlyph = 0x02,   kMenuTabLeftGlyph = 0x03,   kMenuEnterGlyph = 0x04,   kMenuShiftGlyph = 0x05,   kMenuControlGlyph = 0x06,   kMenuOptionGlyph = 0x07,   kMenuSpaceGlyph = 0x09,   kMenuDeleteRightGlyph = 0x0A,   kMenuReturnGlyph = 0x0B,   kMenuReturnR2LGlyph = 0x0C,   kMenuNonmarkingReturnGlyph = 0x0D,   kMenuPencilGlyph = 0x0F,   kMenuDownwardArrowDashedGlyph = 0x10,   kMenuCommandGlyph = 0x11,   kMenuCheckmarkGlyph = 0x12,   kMenuDiamondGlyph = 0x13,   kMenuAppleLogoFilledGlyph = 0x14,   kMenuParagraphKoreanGlyph = 0x15,   kMenuDeleteLeftGlyph = 0x17,   kMenuLeftArrowDashedGlyph = 0x18,   kMenuUpArrowDashedGlyph = 0x19,   kMenuRightArrowDashedGlyph = 0x1A,   kMenuEscapeGlyph = 0x1B,   kMenuClearGlyph = 0x1C,   kMenuLeftDoubleQuotesJapaneseGlyph = 0x1D,   kMenuRightDoubleQuotesJapaneseGlyph = 0x1E,   kMenuTrademarkJapaneseGlyph = 0x1F,   kMenuBlankGlyph = 0x61,   kMenuPageUpGlyph = 0x62,   kMenuCapsLockGlyph = 0x63,   kMenuLeftArrowGlyph = 0x64,   kMenuRightArrowGlyph = 0x65,   kMenuNorthwestArrowGlyph = 0x66,   kMenuHelpGlyph = 0x67,   kMenuUpArrowGlyph = 0x68,   kMenuSoutheastArrowGlyph = 0x69,   kMenuDownArrowGlyph = 0x6A,   kMenuPageDownGlyph = 0x6B,   kMenuAppleLogoOutlineGlyph = 0x6C,   kMenuContextualMenuGlyph = 0x6D,   kMenuPowerGlyph = 0x6E,   kMenuF1Glyph = 0x6F,   kMenuF2Glyph = 0x70,   kMenuF3Glyph = 0x71,   kMenuF4Glyph = 0x72,   kMenuF5Glyph = 0x73,   kMenuF6Glyph = 0x74,   kMenuF7Glyph = 0x75,   kMenuF8Glyph = 0x76,   kMenuF9Glyph = 0x77,   kMenuF10Glyph = 0x78,   kMenuF11Glyph = 0x79,   kMenuF12Glyph = 0x7A,   kMenuF13Glyph = 0x87,   kMenuF14Glyph = 0x88,   kMenuF15Glyph = 0x89,   kMenuControlISOGlyph = 0x8A,   kMenuEjectGlyph = 0x8C,   kMenuEisuGlyph = 0x8D,   kMenuKanaGlyph = 0x8E,   kMenuF16Glyph = 0x8F,   kMenuF17Glyph = 0x90,   kMenuF18Glyph = 0x91,   kMenuF19Glyph = 0x92 };
typedef UInt32 MenuAttributes;
enum {    kMenuAttrExcludesMarkColumn = (1 << 0),   kMenuAttrAutoDisable = (1 << 2),   kMenuAttrUsePencilGlyph = (1 << 3),   kMenuAttrHidden = (1 << 4),   kMenuAttrCondenseSeparators = (1 << 5),   kMenuAttrDoNotCacheImage = (1 << 6),   kMenuAttrDoNotUseUserCommandKeys = (1 << 7) };
typedef UInt32 MenuItemAttributes;
enum {    kMenuItemAttrDisabled = (1 << 0),   kMenuItemAttrIconDisabled = (1 << 1),   kMenuItemAttrSubmenuParentChoosable = (1 << 2),   kMenuItemAttrDynamic = (1 << 3),   kMenuItemAttrNotPreviousAlternate = (1 << 4),   kMenuItemAttrHidden = (1 << 5),   kMenuItemAttrSeparator = (1 << 6),   kMenuItemAttrSectionHeader = (1 << 7),   kMenuItemAttrIgnoreMeta = (1 << 8),   kMenuItemAttrAutoRepeat = (1 << 9),   kMenuItemAttrUseVirtualKey = (1 << 10),   kMenuItemAttrCustomDraw = (1 << 11),   kMenuItemAttrIncludeInCmdKeyMatching = (1 << 12),   kMenuItemAttrAutoDisable = (1 << 13),   kMenuItemAttrUpdateSingleItem = (1 << 14) };
typedef UInt32 MenuTrackingMode;
enum {    kMenuTrackingModeMouse = 1,   kMenuTrackingModeKeyboard = 2 };
typedef UInt32 MenuEventOptions;
enum {    kMenuEventIncludeDisabledItems = 0x0001,   kMenuEventQueryOnly = 0x0002,   kMenuEventDontCheckSubmenus = 0x0004 };
typedef SInt16 MenuID;
typedef UInt16 MenuItemIndex;
typedef OSType MenuCommand;
typedef struct OpaqueMenuRef* MenuRef;
typedef MenuRef MenuHandle;
typedef Handle MenuBarHandle;
struct MenuBarHeader {    UInt16 lastMenu;    SInt16 lastRight;    SInt16 mbResID;  };
typedef struct MenuBarHeader MenuBarHeader;
struct HMenuBarHeader {    UInt16 lastHMenu;    PixMapHandle menuTitleBits;  };
typedef struct HMenuBarHeader HMenuBarHeader;
struct MenuBarMenu {    MenuRef menu;    SInt16 menuLeft;  };
typedef struct MenuBarMenu MenuBarMenu;
struct HMenuBarMenu {    MenuRef menu;    SInt16 reserved;  };
enum {    kEventParamAppleEvent = 'aevt',   kEventParamAppleEventReply = 'aerp' };
typedef UInt16 MouseTrackingResult;
enum {    kMouseTrackingMouseDown = 1,   kMouseTrackingMouseUp = 2,   kMouseTrackingMouseExited = 3,   kMouseTrackingMouseEntered = 4,   kMouseTrackingMouseDragged = 5,   kMouseTrackingKeyModifiersChanged = 6,   kMouseTrackingUserCancelled = 7,   kMouseTrackingTimedOut = 8,   kMouseTrackingMouseMoved = 9,   kMouseTrackingClientEvent = 10,   kMouseTrackingScrollWheel = 11 };
enum {    kTrackMouseLocationOptionDontConsumeMouseUp = (1 << 0),   kTrackMouseLocationOptionIncludeScrollWheel = (1 << 3) };
extern Boolean CheckEventQueueForUserCancel(void) ;
extern Boolean IsUserCancelEventRef(EventRef event) ;
enum {    kMouseParamsSticky = 'stic',   kMouseParamsProxyIcon = 'prox',   kMouseParamsClickAndHold = 'clho',   kMouseParamsDragInitiation = 'drag' };
extern OSStatus HIMouseTrackingGetParameters(   OSType inSelector,   EventTime * outTime,   HISize * outDistance) __attribute__((availability(macosx,introduced=10.3)));
typedef UInt16 EventMouseButton;
enum {    kEventTextInputUpdateActiveInputArea = 1 };
enum {    kEventTextInputUnicodeForKeyEvent = 2 };
enum {    kEventTextInputOffsetToPos = 3 };
enum {    kEventTextInputPosToOffset = 4 };
enum {    kEventTextInputShowHideBottomWindow = 5 };
enum {    kEventTextInputGetSelectedText = 6 };
enum {    kEventTextInputUnicodeText = 7 };
enum {    kEventTextInputFilterText = 14 };
enum {    kEventTextInputIsMouseEventInInlineInputArea = 16 };
enum {    kEventAppActivated = 1 };
enum {    kEventAppDeactivated = 2 };
enum {    kEventAppQuit = 3 };
enum {    kEventAppLaunchNotification = 4 };
enum {    kEventAppLaunched = 5 };
enum {    kEventAppTerminated = 6 };
enum {    kEventMenuMeasureItemWidth = 100 };
enum {    kEventMenuMeasureItemHeight = 101 };
enum {    kEventMenuDrawItem = 102 };
enum {    kEventMenuDrawItemContent = 103 };
enum {    kEventMenuCalculateSize = 1004 };
enum {    kEventMenuCreateFrameView = 1005 };
enum {    kEventMenuGetFrameBounds = 1006 };
enum {    kEventMenuBecomeScrollable = 1007 };
enum {    kEventMenuCeaseToBeScrollable = 1008 };
enum {    kEventMenuBarShown = 2000 };
enum {    kEventMenuBarHidden = 2001 };
enum {    kEventCommandProcess = 1 };
enum {    kEventCommandUpdateStatus = 2 };
enum {    kHICommandOK = 'ok  ',   kHICommandCancel = 'not!',   kHICommandQuit = 'quit',   kHICommandQuitAndDiscardWindows = 'qudw',   kHICommandQuitAndKeepWindows = 'qukw',   kHICommandUndo = 'undo',   kHICommandRedo = 'redo',   kHICommandCut = 'cut ',   kHICommandCopy = 'copy',   kHICommandPaste = 'past',   kHICommandClear = 'clea',   kHICommandSelectAll = 'sall',   kHICommandHide = 'hide',   kHICommandHideOthers = 'hido',   kHICommandShowAll = 'shal',   kHICommandPreferences = 'pref',   kHICommandZoomWindow = 'zoom',   kHICommandMinimizeWindow = 'mini',   kHICommandMinimizeAll = 'mina',   kHICommandMaximizeWindow = 'maxi',   kHICommandMaximizeAll = 'maxa',   kHICommandArrangeInFront = 'frnt',   kHICommandBringAllToFront = 'bfrt',   kHICommandWindowListSeparator = 'wldv',   kHICommandWindowListTerminator = 'wlst',   kHICommandSelectWindow = 'swin',   kHICommandRotateWindowsForward = 'rotw',   kHICommandRotateWindowsBackward = 'rotb',   kHICommandRotateFloatingWindowsForward = 'rtfw',   kHICommandRotateFloatingWindowsBackward = 'rtfb',   kHICommandToggleFullScreen = 'fsm ',   kHICommandAbout = 'abou',   kHICommandNew = 'new ',   kHICommandOpen = 'open',   kHICommandClose = 'clos',   kHICommandCloseAll = 'cloa',   kHICommandCloseFile = 'clof',   kHICommandSave = 'save',   kHICommandSaveAs = 'svas',   kHICommandRevert = 'rvrt',   kHICommandPrint = 'prnt',   kHICommandPageSetup = 'page',   kHICommandAppHelp = 'ahlp',   kHICommandShowCharacterPalette = 'chrp',   kHICommandShowSpellingPanel = 'shsp',   kHICommandCheckSpelling = 'cksp',   kHICommandChangeSpelling = 'chsp',   kHICommandCheckSpellingAsYouType = 'aspc',   kHICommandIgnoreSpelling = 'igsp',   kHICommandLearnWord = 'lrwd',   kHICommandStartDictation = 'sdct' };
enum {    kHICommandFromMenu = (1 << 0),   kHICommandFromControl = (1 << 1),   kHICommandFromWindow = (1 << 2) };
struct HICommand {    UInt32 attributes;    UInt32 commandID;    struct {     MenuRef menuRef;     MenuItemIndex menuItemIndex;   }  menu;  };
typedef struct HICommand HICommand;
struct HICommandExtended {    UInt32 attributes;    UInt32 commandID;    union {     ControlRef control;     WindowRef window;     struct {       MenuRef menuRef;       MenuItemIndex menuItemIndex;     } menu;   }  source;  };
enum {    kEventSystemTimeDateChanged = 2 };
enum {    kEventSystemDisplaysAsleep = 3 };
enum {    kEventSystemDisplaysAwake = 4 };
enum {    kEventSystemDisplayReconfigured = 6 };
enum {    kEventSystemUserSessionActivated = 10 };
enum {    kEventSystemUserSessionDeactivated = 11 };
extern EventTargetRef GetApplicationEventTarget(void) ;
extern EventTargetRef GetEventDispatcherTarget(void) ;
extern EventTargetRef GetEventMonitorTarget(void) __attribute__((availability(macosx,introduced=10.3)));
extern OSStatus ProcessHICommand(const HICommand * inCommand) ;
struct EventHotKeyID {    OSType signature;    UInt32 id;  };
typedef struct EventHotKeyID EventHotKeyID;
typedef struct OpaqueEventHotKeyRef* EventHotKeyRef;
enum {    kEventHotKeyNoOptions = 0,   kEventHotKeyExclusive = (1 << 0) };
extern OSStatus RegisterEventHotKey(   UInt32 inHotKeyCode,   UInt32 inHotKeyModifiers,   EventHotKeyID inHotKeyID,   EventTargetRef inTarget,   OptionBits inOptions,   EventHotKeyRef * outRef) ;
extern OSStatus UnregisterEventHotKey(EventHotKeyRef inHotKey) ;
extern OSStatus CopySymbolicHotKeys(CFArrayRef * outHotKeyArray) __attribute__((availability(macosx,introduced=10.3)));
enum {    kHIHotKeyModeAllEnabled = 0,   kHIHotKeyModeAllDisabled = (1 << 0),   kHIHotKeyModeAllDisabledExceptUniversalAccess = (1 << 1) };
