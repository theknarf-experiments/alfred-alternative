typedef unsigned char __uint8_t;
     typedef short __int16_t;
     typedef unsigned short __uint16_t;
     typedef int __int32_t;
     typedef unsigned int __uint32_t;
     typedef long long __int64_t;
     typedef unsigned long long __uint64_t;
     typedef long __darwin_intptr_t;
     typedef unsigned int __darwin_natural_t;
     typedef int __darwin_ct_rune_t;
     typedef union {   char __mbstate8128;   long long _mbstateL;  }
     __mbstate_t;
     typedef __mbstate_t __darwin_mbstate_t;
     typedef long int __darwin_ptrdiff_t;
     typedef long unsigned int __darwin_size_t;
     typedef __builtin_va_list __darwin_va_list;
     typedef int __darwin_wchar_t;
     typedef __darwin_wchar_t __darwin_rune_t;
     typedef int __darwin_wint_t;
     typedef unsigned long __darwin_clock_t;
     typedef __uint32_t __darwin_socklen_t;
     typedef long __darwin_ssize_t;
     typedef long __darwin_time_t;
     typedef signed char int8_t;
     typedef short int16_t;
     typedef int int32_t;
     typedef long long int64_t;
     typedef unsigned char u_int8_t;
     typedef unsigned short u_int16_t;
     typedef unsigned int u_int32_t;
     typedef unsigned long long u_int64_t;
     typedef int64_t register_t;
     typedef __darwin_intptr_t intptr_t;
     typedef unsigned long uintptr_t;
     typedef u_int64_t user_addr_t;
     typedef u_int64_t user_size_t;
     typedef int64_t user_ssize_t;
     typedef int64_t user_long_t;
     typedef u_int64_t user_ulong_t;
     typedef int64_t user_time_t;
     typedef int64_t user_off_t;
     typedef u_int64_t syscall_arg_t;
     typedef __int64_t __darwin_blkcnt_t;
     typedef __int32_t __darwin_blksize_t;
     typedef __int32_t __darwin_dev_t;
     typedef unsigned int __darwin_fsblkcnt_t;
     typedef unsigned int __darwin_fsfilcnt_t;
     typedef __uint32_t __darwin_gid_t;
     typedef __uint32_t __darwin_id_t;
     typedef __uint64_t __darwin_ino64_t;
     typedef __darwin_ino64_t __darwin_ino_t;
     typedef __darwin_natural_t __darwin_mach_port_name_t;
     typedef __darwin_mach_port_name_t __darwin_mach_port_t;
     typedef __uint16_t __darwin_mode_t;
     typedef __int64_t __darwin_off_t;
     typedef __int32_t __darwin_pid_t;
     typedef __uint32_t __darwin_sigset_t;
     typedef __int32_t __darwin_suseconds_t;
     typedef __uint32_t __darwin_uid_t;
     typedef __uint32_t __darwin_useconds_t;
     typedef unsigned char __darwin_uuid_t[16];
     typedef char __darwin_uuid_string_t[37];
     struct __darwin_pthread_handler_rec {   void (*__routine)(void *);   void *__arg;   struct __darwin_pthread_handler_rec *__next;  };
     struct _opaque_pthread_attr_t {   long __sig;   char __opaque[56];  };
     struct _opaque_pthread_cond_t {   long __sig;   char __opaque[40];  };
     struct _opaque_pthread_condattr_t {   long __sig;   char __opaque[8];  };
     struct _opaque_pthread_mutex_t {   long __sig;   char __opaque[56];  };
     struct _opaque_pthread_mutexattr_t {   long __sig;   char __opaque[8];  };
     struct _opaque_pthread_once_t {   long __sig;   char __opaque[8];  };
     struct _opaque_pthread_rwlock_t {   long __sig;   char __opaque[192];  };
     struct _opaque_pthread_rwlockattr_t {   long __sig;   char __opaque[16];  };
     struct _opaque_pthread_t {   long __sig;   struct __darwin_pthread_handler_rec *__cleanup_stack;   char __opaque[8176];  };
     typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
     typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
     typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
     typedef unsigned long __darwin_pthread_key_t;
     typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
     typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
     typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
     typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
     typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
     typedef struct _opaque_pthread_t *__darwin_pthread_t;
     static inline __uint16_t _OSSwapInt16(     __uint16_t _data ) {      return ((__uint16_t)((_data << 8) | (_data >> 8)));  }
     static inline __uint32_t _OSSwapInt32(     __uint32_t _data ) {      return __builtin_bswap32(_data);  }
     static inline __uint64_t _OSSwapInt64(     __uint64_t _data ) {      return __builtin_bswap64(_data);  }
     typedef unsigned char u_char;
     typedef unsigned short u_short;
     typedef unsigned int u_int;
     typedef unsigned long u_long;
     typedef unsigned short ushort;
     typedef unsigned int uint;
     typedef u_int64_t u_quad_t;
     typedef int64_t quad_t;
     typedef quad_t * qaddr_t;
     typedef char * caddr_t;
     typedef int32_t daddr_t;
     typedef __darwin_dev_t dev_t;
     typedef u_int32_t fixpt_t;
     typedef __darwin_blkcnt_t blkcnt_t;
     typedef __darwin_blksize_t blksize_t;
     typedef __darwin_gid_t gid_t;
     typedef __uint32_t in_addr_t;
     typedef __uint16_t in_port_t;
     typedef __darwin_ino_t ino_t;
     typedef __darwin_ino64_t ino64_t;
     typedef __int32_t key_t;
     typedef __darwin_mode_t mode_t;
     typedef __uint16_t nlink_t;
     typedef __darwin_id_t id_t;
     typedef __darwin_pid_t pid_t;
     typedef __darwin_off_t off_t;
     typedef int32_t segsz_t;
     typedef int32_t swblk_t;
     typedef __darwin_uid_t uid_t;
     typedef __darwin_clock_t clock_t;
     typedef __darwin_size_t size_t;
     typedef __darwin_ssize_t ssize_t;
     typedef __darwin_time_t time_t;
     typedef __darwin_useconds_t useconds_t;
     typedef __darwin_suseconds_t suseconds_t;
     typedef __darwin_size_t rsize_t;
     typedef int errno_t;
     typedef struct fd_set {   __int32_t fds_bits[(((1024) / ((sizeof(__int32_t) * 8))))];  }
     fd_set;
     static __inline int __darwin_fd_isset(int _n, const struct fd_set *_p) {   return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1)<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));  }
     typedef __int32_t fd_mask;
     typedef __darwin_pthread_attr_t pthread_attr_t;
     typedef __darwin_pthread_cond_t pthread_cond_t;
     typedef __darwin_pthread_condattr_t pthread_condattr_t;
     typedef __darwin_pthread_mutex_t pthread_mutex_t;
     typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
     typedef __darwin_pthread_once_t pthread_once_t;
     typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
     typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
     typedef __darwin_pthread_t pthread_t;
     typedef __darwin_pthread_key_t pthread_key_t;
     typedef __darwin_fsblkcnt_t fsblkcnt_t;
     typedef __darwin_fsfilcnt_t fsfilcnt_t;
     typedef __builtin_va_list va_list;
     typedef __builtin_va_list __gnuc_va_list;
     void __assert_rtn(const char *, const char *, int, const char *) __attribute__((noreturn));
     typedef int __darwin_nl_item;
     typedef int __darwin_wctrans_t;
     typedef __uint32_t __darwin_wctype_t;
     typedef __darwin_ct_rune_t ct_rune_t;
     typedef __darwin_rune_t rune_t;
     typedef __darwin_wchar_t wchar_t;
     typedef __darwin_wint_t wint_t;
     extern double nexttoward(double, long double);
     extern float nexttowardf(float, long double);
     extern long double nexttowardl(long double, long double);
     extern float fdimf(float, float);
     extern double fdim(double, double);
     extern long double fdiml(long double, long double);
     extern float fmaxf(float, float);
     extern double fmax(double, double);
     extern long double fmaxl(long double, long double);
     extern float fminf(float, float);
     extern double fmin(double, double);
     extern long double fminl(long double, long double);
     extern float fmaf(float, float, float);
     extern double fma(double, double, double);
     extern long double fmal(long double, long double, long double);
     extern float __inff(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern double __inf(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern long double __infl(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern float __nan(void) __attribute__((availability(macosx,introduced=10.0)));
     extern float __exp10f(float) __attribute__((availability(macosx,introduced=10.9)));
     extern double __exp10(double) __attribute__((availability(macosx,introduced=10.9)));
     inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
     inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
     extern float __cospif(float) __attribute__((availability(macosx,introduced=10.9)));
     extern double __cospi(double) __attribute__((availability(macosx,introduced=10.9)));
     extern float __sinpif(float) __attribute__((availability(macosx,introduced=10.9)));
     extern double __sinpi(double) __attribute__((availability(macosx,introduced=10.9)));
     extern float __tanpif(float) __attribute__((availability(macosx,introduced=10.9)));
     extern double __tanpi(double) __attribute__((availability(macosx,introduced=10.9)));
     inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
     inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);
     struct __float2 {  float __sinval;  float __cosval;  };
     struct __double2 {  double __sinval;  double __cosval;  };
     extern struct __float2 __sincosf_stret(float);
     extern struct __double2 __sincos_stret(double);
     extern struct __float2 __sincospif_stret(float);
     extern struct __double2 __sincospi_stret(double);
     inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {      const struct __float2 __stret = __sincosf_stret(__x);      *__sinp = __stret.__sinval;  *__cosp = __stret.__cosval;  }
     inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {      const struct __double2 __stret = __sincos_stret(__x);      *__sinp = __stret.__sinval;  *__cosp = __stret.__cosval;  }
     inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {      const struct __float2 __stret = __sincospif_stret(__x);      *__sinp = __stret.__sinval;  *__cosp = __stret.__cosval;  }
     inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {      const struct __double2 __stret = __sincospi_stret(__x);      *__sinp = __stret.__sinval;  *__cosp = __stret.__cosval;  }
     extern double j0(double) __attribute__((availability(macosx,introduced=10.0)));
     extern double j1(double) __attribute__((availability(macosx,introduced=10.0)));
     extern double jn(int, double) __attribute__((availability(macosx,introduced=10.0)));
     extern double y0(double) __attribute__((availability(macosx,introduced=10.0)));
     extern double y1(double) __attribute__((availability(macosx,introduced=10.0)));
     extern double yn(int, double) __attribute__((availability(macosx,introduced=10.0)));
     extern double scalb(double, double);
     extern int signgam;
     extern long int rinttol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern long int roundtol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern double drem(double, double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern int finite(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern double gamma(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern double significand(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     struct exception {      int type;      char *name;      double arg1;      double arg2;      double retval;  };
     extern int matherr(struct exception *) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     typedef int jmp_buf[((9 * 2) + 3 + 16)];
     typedef int sigjmp_buf[((9 * 2) + 3 + 16) + 1];
     extern int setjmp(jmp_buf);
     extern void longjmp(jmp_buf, int) __attribute__((noreturn));
     int _setjmp(jmp_buf);
     void _longjmp(jmp_buf, int) __attribute__((noreturn));
     int sigsetjmp(sigjmp_buf, int);
     void siglongjmp(sigjmp_buf, int) __attribute__((noreturn));
     void longjmperror(void);
     typedef int sig_atomic_t;
     struct __darwin_i386_thread_state {      unsigned int __eax;      unsigned int __ebx;      unsigned int __ecx;      unsigned int __edx;      unsigned int __edi;      unsigned int __esi;      unsigned int __ebp;      unsigned int __esp;      unsigned int __ss;      unsigned int __eflags;      unsigned int __eip;      unsigned int __cs;      unsigned int __ds;      unsigned int __es;      unsigned int __fs;      unsigned int __gs;  };
     struct __darwin_fp_control {      unsigned short __invalid :1,         __denorm :1,     __zdiv :1,     __ovrfl :1,     __undfl :1,     __precis :1,       :2,     __pc :2,  __rc :2,  :1,       :3;  };
     typedef struct __darwin_fp_control __darwin_fp_control_t;
     struct __darwin_fp_status {      unsigned short __invalid :1,         __denorm :1,     __zdiv :1,     __ovrfl :1,     __undfl :1,     __precis :1,     __stkflt :1,     __errsumm :1,     __c0 :1,     __c1 :1,     __c2 :1,     __tos :3,     __c3 :1,     __busy :1;  };
     typedef struct __darwin_fp_status __darwin_fp_status_t;
     struct __darwin_mmst_reg {   char __mmst_reg[10];   char __mmst_rsrv[6];  };
     struct __darwin_xmm_reg {   char __xmm_reg[16];  };
     struct __darwin_i386_float_state {   int __fpu_reserved[2];   struct __darwin_fp_control __fpu_fcw;   struct __darwin_fp_status __fpu_fsw;   __uint8_t __fpu_ftw;   __uint8_t __fpu_rsrv1;   __uint16_t __fpu_fop;   __uint32_t __fpu_ip;   __uint16_t __fpu_cs;   __uint16_t __fpu_rsrv2;   __uint32_t __fpu_dp;   __uint16_t __fpu_ds;   __uint16_t __fpu_rsrv3;   __uint32_t __fpu_mxcsr;   __uint32_t __fpu_mxcsrmask;   struct __darwin_mmst_reg __fpu_stmm0;   struct __darwin_mmst_reg __fpu_stmm1;   struct __darwin_mmst_reg __fpu_stmm2;   struct __darwin_mmst_reg __fpu_stmm3;   struct __darwin_mmst_reg __fpu_stmm4;   struct __darwin_mmst_reg __fpu_stmm5;   struct __darwin_mmst_reg __fpu_stmm6;   struct __darwin_mmst_reg __fpu_stmm7;   struct __darwin_xmm_reg __fpu_xmm0;   struct __darwin_xmm_reg __fpu_xmm1;   struct __darwin_xmm_reg __fpu_xmm2;   struct __darwin_xmm_reg __fpu_xmm3;   struct __darwin_xmm_reg __fpu_xmm4;   struct __darwin_xmm_reg __fpu_xmm5;   struct __darwin_xmm_reg __fpu_xmm6;   struct __darwin_xmm_reg __fpu_xmm7;   char __fpu_rsrv4[14*16];   int __fpu_reserved1;  };
     struct __darwin_i386_avx_state {   int __fpu_reserved[2];   struct __darwin_fp_control __fpu_fcw;   struct __darwin_fp_status __fpu_fsw;   __uint8_t __fpu_ftw;   __uint8_t __fpu_rsrv1;   __uint16_t __fpu_fop;   __uint32_t __fpu_ip;   __uint16_t __fpu_cs;   __uint16_t __fpu_rsrv2;   __uint32_t __fpu_dp;   __uint16_t __fpu_ds;   __uint16_t __fpu_rsrv3;   __uint32_t __fpu_mxcsr;   __uint32_t __fpu_mxcsrmask;   struct __darwin_mmst_reg __fpu_stmm0;   struct __darwin_mmst_reg __fpu_stmm1;   struct __darwin_mmst_reg __fpu_stmm2;   struct __darwin_mmst_reg __fpu_stmm3;   struct __darwin_mmst_reg __fpu_stmm4;   struct __darwin_mmst_reg __fpu_stmm5;   struct __darwin_mmst_reg __fpu_stmm6;   struct __darwin_mmst_reg __fpu_stmm7;   struct __darwin_xmm_reg __fpu_xmm0;   struct __darwin_xmm_reg __fpu_xmm1;   struct __darwin_xmm_reg __fpu_xmm2;   struct __darwin_xmm_reg __fpu_xmm3;   struct __darwin_xmm_reg __fpu_xmm4;   struct __darwin_xmm_reg __fpu_xmm5;   struct __darwin_xmm_reg __fpu_xmm6;   struct __darwin_xmm_reg __fpu_xmm7;   char __fpu_rsrv4[14*16];   int __fpu_reserved1;   char __avx_reserved1[64];   struct __darwin_xmm_reg __fpu_ymmh0;   struct __darwin_xmm_reg __fpu_ymmh1;   struct __darwin_xmm_reg __fpu_ymmh2;   struct __darwin_xmm_reg __fpu_ymmh3;   struct __darwin_xmm_reg __fpu_ymmh4;   struct __darwin_xmm_reg __fpu_ymmh5;   struct __darwin_xmm_reg __fpu_ymmh6;   struct __darwin_xmm_reg __fpu_ymmh7;  };
     struct __darwin_i386_exception_state {   __uint16_t __trapno;   __uint16_t __cpu;   __uint32_t __err;   __uint32_t __faultvaddr;  };
     struct __darwin_x86_debug_state32 {   unsigned int __dr0;   unsigned int __dr1;   unsigned int __dr2;   unsigned int __dr3;   unsigned int __dr4;   unsigned int __dr5;   unsigned int __dr6;   unsigned int __dr7;  };
     struct __darwin_x86_thread_state64 {   __uint64_t __rax;   __uint64_t __rbx;   __uint64_t __rcx;   __uint64_t __rdx;   __uint64_t __rdi;   __uint64_t __rsi;   __uint64_t __rbp;   __uint64_t __rsp;   __uint64_t __r8;   __uint64_t __r9;   __uint64_t __r10;   __uint64_t __r11;   __uint64_t __r12;   __uint64_t __r13;   __uint64_t __r14;   __uint64_t __r15;   __uint64_t __rip;   __uint64_t __rflags;   __uint64_t __cs;   __uint64_t __fs;   __uint64_t __gs;  };
     struct __darwin_x86_float_state64 {   int __fpu_reserved[2];   struct __darwin_fp_control __fpu_fcw;   struct __darwin_fp_status __fpu_fsw;   __uint8_t __fpu_ftw;   __uint8_t __fpu_rsrv1;   __uint16_t __fpu_fop;   __uint32_t __fpu_ip;   __uint16_t __fpu_cs;   __uint16_t __fpu_rsrv2;   __uint32_t __fpu_dp;   __uint16_t __fpu_ds;   __uint16_t __fpu_rsrv3;   __uint32_t __fpu_mxcsr;   __uint32_t __fpu_mxcsrmask;   struct __darwin_mmst_reg __fpu_stmm0;   struct __darwin_mmst_reg __fpu_stmm1;   struct __darwin_mmst_reg __fpu_stmm2;   struct __darwin_mmst_reg __fpu_stmm3;   struct __darwin_mmst_reg __fpu_stmm4;   struct __darwin_mmst_reg __fpu_stmm5;   struct __darwin_mmst_reg __fpu_stmm6;   struct __darwin_mmst_reg __fpu_stmm7;   struct __darwin_xmm_reg __fpu_xmm0;   struct __darwin_xmm_reg __fpu_xmm1;   struct __darwin_xmm_reg __fpu_xmm2;   struct __darwin_xmm_reg __fpu_xmm3;   struct __darwin_xmm_reg __fpu_xmm4;   struct __darwin_xmm_reg __fpu_xmm5;   struct __darwin_xmm_reg __fpu_xmm6;   struct __darwin_xmm_reg __fpu_xmm7;   struct __darwin_xmm_reg __fpu_xmm8;   struct __darwin_xmm_reg __fpu_xmm9;   struct __darwin_xmm_reg __fpu_xmm10;   struct __darwin_xmm_reg __fpu_xmm11;   struct __darwin_xmm_reg __fpu_xmm12;   struct __darwin_xmm_reg __fpu_xmm13;   struct __darwin_xmm_reg __fpu_xmm14;   struct __darwin_xmm_reg __fpu_xmm15;   char __fpu_rsrv4[6*16];   int __fpu_reserved1;  };
     struct __darwin_x86_avx_state64 {   int __fpu_reserved[2];   struct __darwin_fp_control __fpu_fcw;   struct __darwin_fp_status __fpu_fsw;   __uint8_t __fpu_ftw;   __uint8_t __fpu_rsrv1;   __uint16_t __fpu_fop;   __uint32_t __fpu_ip;   __uint16_t __fpu_cs;   __uint16_t __fpu_rsrv2;   __uint32_t __fpu_dp;   __uint16_t __fpu_ds;   __uint16_t __fpu_rsrv3;   __uint32_t __fpu_mxcsr;   __uint32_t __fpu_mxcsrmask;   struct __darwin_mmst_reg __fpu_stmm0;   struct __darwin_mmst_reg __fpu_stmm1;   struct __darwin_mmst_reg __fpu_stmm2;   struct __darwin_mmst_reg __fpu_stmm3;   struct __darwin_mmst_reg __fpu_stmm4;   struct __darwin_mmst_reg __fpu_stmm5;   struct __darwin_mmst_reg __fpu_stmm6;   struct __darwin_mmst_reg __fpu_stmm7;   struct __darwin_xmm_reg __fpu_xmm0;   struct __darwin_xmm_reg __fpu_xmm1;   struct __darwin_xmm_reg __fpu_xmm2;   struct __darwin_xmm_reg __fpu_xmm3;   struct __darwin_xmm_reg __fpu_xmm4;   struct __darwin_xmm_reg __fpu_xmm5;   struct __darwin_xmm_reg __fpu_xmm6;   struct __darwin_xmm_reg __fpu_xmm7;   struct __darwin_xmm_reg __fpu_xmm8;   struct __darwin_xmm_reg __fpu_xmm9;   struct __darwin_xmm_reg __fpu_xmm10;   struct __darwin_xmm_reg __fpu_xmm11;   struct __darwin_xmm_reg __fpu_xmm12;   struct __darwin_xmm_reg __fpu_xmm13;   struct __darwin_xmm_reg __fpu_xmm14;   struct __darwin_xmm_reg __fpu_xmm15;   char __fpu_rsrv4[6*16];   int __fpu_reserved1;   char __avx_reserved1[64];   struct __darwin_xmm_reg __fpu_ymmh0;   struct __darwin_xmm_reg __fpu_ymmh1;   struct __darwin_xmm_reg __fpu_ymmh2;   struct __darwin_xmm_reg __fpu_ymmh3;   struct __darwin_xmm_reg __fpu_ymmh4;   struct __darwin_xmm_reg __fpu_ymmh5;   struct __darwin_xmm_reg __fpu_ymmh6;   struct __darwin_xmm_reg __fpu_ymmh7;   struct __darwin_xmm_reg __fpu_ymmh8;   struct __darwin_xmm_reg __fpu_ymmh9;   struct __darwin_xmm_reg __fpu_ymmh10;   struct __darwin_xmm_reg __fpu_ymmh11;   struct __darwin_xmm_reg __fpu_ymmh12;   struct __darwin_xmm_reg __fpu_ymmh13;   struct __darwin_xmm_reg __fpu_ymmh14;   struct __darwin_xmm_reg __fpu_ymmh15;  };
     struct __darwin_x86_exception_state64 {      __uint16_t __trapno;      __uint16_t __cpu;      __uint32_t __err;      __uint64_t __faultvaddr;  };
     struct __darwin_x86_debug_state64 {   __uint64_t __dr0;   __uint64_t __dr1;   __uint64_t __dr2;   __uint64_t __dr3;   __uint64_t __dr4;   __uint64_t __dr5;   __uint64_t __dr6;   __uint64_t __dr7;  };
     struct __darwin_mcontext32 {   struct __darwin_i386_exception_state __es;   struct __darwin_i386_thread_state __ss;   struct __darwin_i386_float_state __fs;  };
     struct __darwin_mcontext_avx32 {   struct __darwin_i386_exception_state __es;   struct __darwin_i386_thread_state __ss;   struct __darwin_i386_avx_state __fs;  };
     struct __darwin_mcontext64 {   struct __darwin_x86_exception_state64 __es;   struct __darwin_x86_thread_state64 __ss;   struct __darwin_x86_float_state64 __fs;  };
     struct __darwin_mcontext_avx64 {   struct __darwin_x86_exception_state64 __es;   struct __darwin_x86_thread_state64 __ss;   struct __darwin_x86_avx_state64 __fs;  };
     typedef struct __darwin_mcontext64 *mcontext_t;
     struct __darwin_sigaltstack {   void *ss_sp;   __darwin_size_t ss_size;   int ss_flags;  };
     typedef struct __darwin_sigaltstack stack_t;
     struct __darwin_ucontext {   int uc_onstack;   __darwin_sigset_t uc_sigmask;   struct __darwin_sigaltstack uc_stack;   struct __darwin_ucontext *uc_link;   __darwin_size_t uc_mcsize;   struct __darwin_mcontext64 *uc_mcontext;  };
     typedef struct __darwin_ucontext ucontext_t;
     typedef __darwin_sigset_t sigset_t;
     union sigval {   int sival_int;   void *sival_ptr;  };
     struct sigevent {   int sigev_notify;   int sigev_signo;   union sigval sigev_value;   void (*sigev_notify_function)(union sigval);   pthread_attr_t *sigev_notify_attributes;  };
     typedef struct __siginfo {   int si_signo;   int si_errno;   int si_code;   pid_t si_pid;   uid_t si_uid;   int si_status;   void *si_addr;   union sigval si_value;   long si_band;   unsigned long __pad[7];  }
     siginfo_t;
     union __sigaction_u {   void (*__sa_handler)(int);   void (*__sa_sigaction)(int, struct __siginfo *,          void *);  };
     struct __sigaction {   union __sigaction_u __sigaction_u;   void (*sa_tramp)(void *, int, int, siginfo_t *, void *);   sigset_t sa_mask;   int sa_flags;  };
     struct sigaction {   union __sigaction_u __sigaction_u;   sigset_t sa_mask;   int sa_flags;  };
     typedef void (*sig_t)(int);
     struct sigvec {   void (*sv_handler)(int);   int sv_mask;   int sv_flags;  };
     struct sigstack {   char *ss_sp;   int ss_onstack;  };
     void (*signal(int, void (*)(int)))(int);
     extern const char *const sys_signame[32];
     extern const char *const sys_siglist[32];
     int raise(int);
     void (* _Nullable bsd_signal(int, void (* _Nullable)(int)))(int);
     int kill(pid_t, int) __asm("" "kill" );
     int killpg(pid_t, int) __asm("_" "killpg" );
     int pthread_kill(pthread_t, int);
     int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
     int sigaction(int, const struct sigaction * restrict,      struct sigaction * restrict);
     int sigaddset(sigset_t *, int);
     int sigaltstack(const stack_t * restrict, stack_t * restrict) __asm("_" "sigaltstack" ) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int sigdelset(sigset_t *, int);
     int sigemptyset(sigset_t *);
     int sigfillset(sigset_t *);
     int sighold(int);
     int sigignore(int);
     int siginterrupt(int, int);
     int sigismember(const sigset_t *, int);
     int sigpause(int) __asm("_" "sigpause" );
     int sigpending(sigset_t *);
     int sigprocmask(int, const sigset_t * restrict, sigset_t * restrict);
     int sigrelse(int);
     void (* _Nullable sigset(int, void (* _Nullable)(int)))(int);
     int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
     int sigwait(const sigset_t * restrict, int * restrict) __asm("_" "sigwait" );
     void psignal(unsigned int, const char *);
     int sigblock(int);
     int sigsetmask(int);
     int sigvec(int, struct sigvec *, struct sigvec *);
     inline __attribute__ ((__always_inline__)) int __sigbits(int __signo) {      return __signo > 32 ? 0 : (1 << (__signo - 1));  }
     typedef long int ptrdiff_t;
     typedef long double max_align_t;
     typedef __darwin_va_list va_list;
     int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));
     int renamex_np(const char *, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     int renameatx_np(int, const char *, int, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     typedef __darwin_off_t fpos_t;
     struct __sbuf {   unsigned char *_base;   int _size;  };
     struct __sFILEX;
     typedef struct __sFILE {   unsigned char *_p;   int _r;   int _w;   short _flags;   short _file;   struct __sbuf _bf;   int _lbfsize;   void *_cookie;   int (* _Nullable _close)(void *);   int (* _Nullable _read) (void *, char *, int);   fpos_t (* _Nullable _seek) (void *, fpos_t, int);   int (* _Nullable _write)(void *, const char *, int);   struct __sbuf _ub;   struct __sFILEX *_extra;   int _ur;   unsigned char _ubuf[3];   unsigned char _nbuf[1];   struct __sbuf _lb;   int _blksize;   fpos_t _offset;  }
     FILE;
     extern FILE *__stdinp;
     extern FILE *__stdoutp;
     extern FILE *__stderrp;
     void clearerr(FILE *);
     int fclose(FILE *);
     int feof(FILE *);
     int ferror(FILE *);
     int fflush(FILE *);
     int fgetc(FILE *);
     int fgetpos(FILE * restrict, fpos_t *);
     char *fgets(char * restrict, int, FILE *);
     FILE *fopen(const char * restrict __filename, const char * restrict __mode) __asm("_" "fopen" );
     int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
     int fputc(int, FILE *);
     int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
     size_t fread(void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream);
     FILE *freopen(const char * restrict, const char * restrict,                  FILE * restrict) __asm("_" "freopen" );
     int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
     int fseek(FILE *, long, int);
     int fsetpos(FILE *, const fpos_t *);
     long ftell(FILE *);
     size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
     int getc(FILE *);
     void setbuffer(FILE *, char *, int);
     int setlinebuf(FILE *);
     int vasprintf(char ** restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
     FILE *zopen(const char *, const char *, int);
     FILE *funopen(const void *,                  int (* _Nullable)(void *, char *, int),                  int (* _Nullable)(void *, const char *, int),                  fpos_t (* _Nullable)(void *, fpos_t, int),                  int (* _Nullable)(void *));
     extern int __sprintf_chk (char * restrict, int, size_t,      const char * restrict, ...);
     extern int __snprintf_chk (char * restrict, size_t, int, size_t,       const char * restrict, ...);
     extern int __vsprintf_chk (char * restrict, int, size_t,       const char * restrict, va_list);
     extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,        const char * restrict, va_list);
     typedef enum {   P_ALL,  P_PID,  P_PGID }
     idtype_t;
     typedef unsigned char uint8_t;
     typedef unsigned short uint16_t;
     typedef unsigned int uint32_t;
     typedef unsigned long long uint64_t;
     typedef int8_t int_least8_t;
     typedef int16_t int_least16_t;
     typedef int32_t int_least32_t;
     typedef int64_t int_least64_t;
     typedef uint8_t uint_least8_t;
     typedef uint16_t uint_least16_t;
     typedef uint32_t uint_least32_t;
     typedef uint64_t uint_least64_t;
     typedef int8_t int_fast8_t;
     typedef int16_t int_fast16_t;
     typedef int32_t int_fast32_t;
     typedef int64_t int_fast64_t;
     typedef uint8_t uint_fast8_t;
     typedef uint16_t uint_fast16_t;
     typedef uint32_t uint_fast32_t;
     typedef uint64_t uint_fast64_t;
     typedef long int intmax_t;
     typedef long unsigned int uintmax_t;
     struct timeval {   __darwin_time_t tv_sec;   __darwin_suseconds_t tv_usec;  };
     typedef __uint64_t rlim_t;
     struct rusage {   struct timeval ru_utime;   struct timeval ru_stime;   long ru_maxrss;   long ru_ixrss;   long ru_idrss;   long ru_isrss;   long ru_minflt;   long ru_majflt;   long ru_nswap;   long ru_inblock;   long ru_oublock;   long ru_msgsnd;   long ru_msgrcv;   long ru_nsignals;   long ru_nvcsw;   long ru_nivcsw;  };
     typedef void *rusage_info_t;
     struct rusage_info_v0 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;  };
     struct rusage_info_v1 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;  };
     struct rusage_info_v2 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;   uint64_t ri_diskio_bytesread;   uint64_t ri_diskio_byteswritten;  };
     struct rusage_info_v3 {   uint8_t ri_uuid[16];   uint64_t ri_user_time;   uint64_t ri_system_time;   uint64_t ri_pkg_idle_wkups;   uint64_t ri_interrupt_wkups;   uint64_t ri_pageins;   uint64_t ri_wired_size;   uint64_t ri_resident_size;   uint64_t ri_phys_footprint;   uint64_t ri_proc_start_abstime;   uint64_t ri_proc_exit_abstime;   uint64_t ri_child_user_time;   uint64_t ri_child_system_time;   uint64_t ri_child_pkg_idle_wkups;   uint64_t ri_child_interrupt_wkups;   uint64_t ri_child_pageins;   uint64_t ri_child_elapsed_abstime;   uint64_t ri_diskio_bytesread;   uint64_t ri_diskio_byteswritten;   uint64_t ri_cpu_time_qos_default;   uint64_t ri_cpu_time_qos_maintenance;   uint64_t ri_cpu_time_qos_background;   uint64_t ri_cpu_time_qos_utility;   uint64_t ri_cpu_time_qos_legacy;   uint64_t ri_cpu_time_qos_user_initiated;   uint64_t ri_cpu_time_qos_user_interactive;   uint64_t ri_billed_system_time;   uint64_t ri_serviced_system_time;  };
     typedef struct rusage_info_v3 rusage_info_current;
     struct rlimit {   rlim_t rlim_cur;   rlim_t rlim_max;  };
     struct proc_rlimit_control_wakeupmon {   uint32_t wm_flags;   int32_t wm_rate;  };
     int getpriority(int, id_t);
     int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));
     int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
     int getrusage(int, struct rusage *);
     int setpriority(int, id_t, int);
     int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));
     int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
     union wait {   int w_status;   struct {   unsigned int w_Termsig:7,     w_Coredump:1,     w_Retcode:8,     w_Filler:16;  }  w_T;   struct {   unsigned int w_Stopval:8,     w_Stopsig:8,     w_Filler:16;  }  w_S;  };
     pid_t wait(int *) __asm("_" "wait" );
     pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );
     int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );
     pid_t wait3(int *, int, struct rusage *);
     pid_t wait4(pid_t, int *, int, struct rusage *);
     void *alloca(size_t);
     struct timespec {   __darwin_time_t tv_sec;   long tv_nsec;  };
     struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long tm_gmtoff;   char *tm_zone;  };
     extern char *tzname[];
     extern int getdate_err;
     extern long timezone __asm("_" "timezone" );
     extern int daylight;
     char *asctime(const struct tm *);
     clock_t clock(void) __asm("_" "clock" );
     char *ctime(const time_t *);
     double difftime(time_t, time_t);
     struct tm *getdate(const char *);
     struct tm *gmtime(const time_t *);
     struct tm *localtime(const time_t *);
     time_t mktime(struct tm *) __asm("_" "mktime" );
     size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
     char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
     time_t time(time_t *);
     void tzset(void);
     char *asctime_r(const struct tm * restrict, char * restrict);
     char *ctime_r(const time_t *, char *);
     struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
     struct tm *localtime_r(const time_t * restrict, struct tm * restrict);
     time_t posix2time(time_t);
     void tzsetwall(void);
     time_t time2posix(time_t);
     time_t timelocal(struct tm * const);
     time_t timegm(struct tm * const);
     int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
     typedef enum {  _CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0, _CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6, _CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4, _CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5, _CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8, _CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9, _CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12, _CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16 }
     clockid_t;
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) int clock_getres(clockid_t __clock_id, struct timespec *__res);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) int clock_gettime(clockid_t __clock_id, struct timespec *__tp);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __uint64_t clock_gettime_nsec_np(clockid_t __clock_id);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable))) __attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) int clock_settime(clockid_t __clock_id, const struct timespec *__tp);
     __attribute__((availability(macosx,introduced=10.4))) extern intmax_t imaxabs(intmax_t j);
     typedef struct {   intmax_t quot;   intmax_t rem;  }
     imaxdiv_t;
     __attribute__((availability(macosx,introduced=10.4))) extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom);
     __attribute__((availability(macosx,introduced=10.4))) extern intmax_t strtoimax(const char * restrict __nptr,    char ** restrict __endptr,    int __base);
     __attribute__((availability(macosx,introduced=10.4))) extern uintmax_t strtoumax(const char * restrict __nptr,    char ** restrict __endptr,    int __base);
     __attribute__((availability(macosx,introduced=10.4))) extern intmax_t wcstoimax(const wchar_t * restrict __nptr,    wchar_t ** restrict __endptr,    int __base);
     __attribute__((availability(macosx,introduced=10.4))) extern uintmax_t wcstoumax(const wchar_t * restrict __nptr,    wchar_t ** restrict __endptr,    int __base);
     extern void *_Block_copy(const void *aBlock)     __attribute__((availability(macosx,introduced=10.6)));
     extern void _Block_release(const void *aBlock)     __attribute__((availability(macosx,introduced=10.6)));
     extern void _Block_object_assign(void *, const void *, const int)     __attribute__((availability(macosx,introduced=10.6)));
     extern void _Block_object_dispose(const void *, const int)     __attribute__((availability(macosx,introduced=10.6)));
     extern void * _NSConcreteGlobalBlock[32]     __attribute__((availability(macosx,introduced=10.6)));
     extern void * _NSConcreteStackBlock[32]     __attribute__((availability(macosx,introduced=10.6)));
     typedef unsigned char UInt8;
     typedef signed char SInt8;
     typedef unsigned short UInt16;
     typedef signed short SInt16;
     typedef unsigned int UInt32;
     typedef signed int SInt32;
     struct wide {    UInt32 lo;    SInt32 hi;  };
     typedef struct wide wide;
     struct UnsignedWide {    UInt32 lo;    UInt32 hi;  };
     typedef struct UnsignedWide UnsignedWide;
           typedef signed long long SInt64;
             typedef unsigned long long UInt64;
     typedef SInt32 Fixed;
     typedef Fixed * FixedPtr;
     typedef SInt32 Fract;
     typedef Fract * FractPtr;
     typedef UInt32 UnsignedFixed;
     typedef UnsignedFixed * UnsignedFixedPtr;
     typedef short ShortFixed;
     typedef ShortFixed * ShortFixedPtr;
     typedef float Float32;
     typedef double Float64;
     struct Float80 {      SInt16 exp;      UInt16 man[4];  };
     typedef struct Float80 Float80;
     struct Float96 {      SInt16 exp[2];      UInt16 man[4];  };
     typedef struct Float96 Float96;
     struct Float32Point {      Float32 x;      Float32 y;  };
     typedef struct Float32Point Float32Point;
     typedef char * Ptr;
     typedef Ptr * Handle;
     typedef long Size;
     typedef SInt16 OSErr;
     typedef SInt32 OSStatus;
     typedef void * LogicalAddress;
     typedef const void * ConstLogicalAddress;
     typedef void * PhysicalAddress;
     typedef UInt8 * BytePtr;
     typedef unsigned long ByteCount;
     typedef unsigned long ByteOffset;
     typedef SInt32 Duration;
     typedef UnsignedWide AbsoluteTime;
     typedef UInt32 OptionBits;
     typedef unsigned long ItemCount;
     typedef UInt32 PBVersion;
     typedef SInt16 ScriptCode;
     typedef SInt16 LangCode;
     typedef SInt16 RegionCode;
     typedef UInt32 FourCharCode;
     typedef FourCharCode OSType;
     typedef FourCharCode ResType;
     typedef OSType * OSTypePtr;
     typedef ResType * ResTypePtr;
     typedef unsigned char Boolean;
     typedef long ( * ProcPtr)();
     typedef void ( * Register68kProcPtr)();
     typedef ProcPtr UniversalProcPtr;
     typedef ProcPtr * ProcHandle;
     typedef UniversalProcPtr * UniversalProcHandle;
     typedef void * PRefCon;
     typedef void * URefCon;
     typedef void * SRefCon;
     enum {    noErr = 0 };
     enum {    kNilOptions = 0 };
     enum {    kVariableLengthArray   __attribute__((deprecated))   = 1 };
     enum {    kUnknownType = 0x3F3F3F3F };
     typedef UInt32 UnicodeScalarValue;
     typedef UInt32 UTF32Char;
     typedef UInt16 UniChar;
     typedef UInt16 UTF16Char;
     typedef UInt8 UTF8Char;
     typedef UniChar * UniCharPtr;
     typedef unsigned long UniCharCount;
     typedef UniCharCount * UniCharCountPtr;
     typedef unsigned char Str255[256];
     typedef unsigned char Str63[64];
     typedef unsigned char Str32[33];
     typedef unsigned char Str31[32];
     typedef unsigned char Str27[28];
     typedef unsigned char Str15[16];
     typedef unsigned char Str32Field[34];
     typedef Str63 StrFileName;
     typedef unsigned char * StringPtr;
     typedef StringPtr * StringHandle;
     typedef const unsigned char * ConstStringPtr;
     typedef const unsigned char * ConstStr255Param;
     typedef const unsigned char * ConstStr63Param;
     typedef const unsigned char * ConstStr32Param;
     typedef const unsigned char * ConstStr31Param;
     typedef const unsigned char * ConstStr27Param;
     typedef const unsigned char * ConstStr15Param;
     typedef ConstStr63Param ConstStrFileNameParam;
     struct ProcessSerialNumber {    UInt32 highLongOfPSN;    UInt32 lowLongOfPSN;  };
     typedef struct ProcessSerialNumber ProcessSerialNumber;
     typedef ProcessSerialNumber * ProcessSerialNumberPtr;
     struct Point {    short v;    short h;  };
     typedef struct Point Point;
     typedef Point * PointPtr;
     struct Rect {    short top;    short left;    short bottom;    short right;  };
     typedef struct Rect Rect;
     typedef Rect * RectPtr;
     struct FixedPoint {    Fixed x;    Fixed y;  };
     typedef struct FixedPoint FixedPoint;
     struct FixedRect {    Fixed left;    Fixed top;    Fixed right;    Fixed bottom;  };
     typedef struct FixedRect FixedRect;
     typedef short CharParameter;
     enum {    normal = 0,   bold = 1,   italic = 2,   underline = 4,   outline = 8,   shadow = 0x10,   condense = 0x20,   extend = 0x40 };
     typedef unsigned char Style;
     typedef short StyleParameter;
     typedef Style StyleField;
     typedef SInt32 TimeValue;
     typedef SInt32 TimeScale;
     typedef wide CompTimeValue;
     typedef SInt64 TimeValue64;
     typedef struct TimeBaseRecord* TimeBase;
     struct TimeRecord {    CompTimeValue value;    TimeScale scale;    TimeBase base;  };
     typedef struct TimeRecord TimeRecord;
     struct NumVersion {    UInt8 nonRelRev;    UInt8 stage;    UInt8 minorAndBugRev;    UInt8 majorRev;  };
     typedef struct NumVersion NumVersion;
     enum {    developStage = 0x20,   alphaStage = 0x40,   betaStage = 0x60,   finalStage = 0x80 };
     union NumVersionVariant {    NumVersion parts;    UInt32 whole;  };
     typedef union NumVersionVariant NumVersionVariant;
     typedef NumVersionVariant * NumVersionVariantPtr;
     typedef NumVersionVariantPtr * NumVersionVariantHandle;
     struct VersRec {    NumVersion numericVersion;    short countryCode;    Str255 shortVersion;    Str255 reserved;  };
     typedef struct VersRec VersRec;
     typedef VersRec * VersRecPtr;
     typedef VersRecPtr * VersRecHndl;
     typedef UInt8 Byte;
     typedef SInt8 SignedByte;
     typedef wide * WidePtr;
     typedef UnsignedWide * UnsignedWidePtr;
     typedef Float80 extended80;
     typedef Float96 extended96;
     typedef SInt8 VHSelect;
     extern void Debugger(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void DebugStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void SysBreak(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void SysBreakStr(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void SysBreakFunc(ConstStr255Param debuggerMsg) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern double kCFCoreFoundationVersionNumber;
     typedef unsigned long CFTypeID;
     typedef unsigned long CFOptionFlags;
     typedef unsigned long CFHashCode;
     typedef signed long CFIndex;
     typedef const __attribute__((objc_bridge(id))) void * CFTypeRef;
     typedef const struct __attribute__((objc_bridge(NSString))) __CFString * CFStringRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableString))) __CFString * CFMutableStringRef;
     typedef __attribute__((objc_bridge(id))) CFTypeRef CFPropertyListRef;
     typedef CFIndex CFComparisonResult;
     enum {      kCFCompareLessThan = -1L,     kCFCompareEqualTo = 0,     kCFCompareGreaterThan = 1 };
     typedef CFComparisonResult (*CFComparatorFunction)(const void *val1, const void *val2, void *context);
     static const CFIndex kCFNotFound = -1;
     typedef struct {      CFIndex location;      CFIndex length;  }
     CFRange;
     static __inline__ __attribute__((always_inline)) CFRange CFRangeMake(CFIndex loc, CFIndex len) {      CFRange range;      range.location = loc;      range.length = len;      return range;  }
     extern CFRange __CFRangeMake(CFIndex loc, CFIndex len);
     typedef const struct __attribute__((objc_bridge(NSNull))) __CFNull * CFNullRef;
     extern CFTypeID CFNullGetTypeID(void);
     extern const CFNullRef kCFNull;
     typedef const struct __attribute__((objc_bridge(id))) __CFAllocator * CFAllocatorRef;
     extern const CFAllocatorRef kCFAllocatorDefault;
     extern const CFAllocatorRef kCFAllocatorSystemDefault;
     extern const CFAllocatorRef kCFAllocatorMalloc;
     extern const CFAllocatorRef kCFAllocatorMallocZone;
     extern const CFAllocatorRef kCFAllocatorNull;
     extern const CFAllocatorRef kCFAllocatorUseContext;
     typedef const void * (*CFAllocatorRetainCallBack)(const void *info);
     typedef void (*CFAllocatorReleaseCallBack)(const void *info);
     typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack)(const void *info);
     typedef void * (*CFAllocatorAllocateCallBack)(CFIndex allocSize, CFOptionFlags hint, void *info);
     typedef void * (*CFAllocatorReallocateCallBack)(void *ptr, CFIndex newsize, CFOptionFlags hint, void *info);
     typedef void (*CFAllocatorDeallocateCallBack)(void *ptr, void *info);
     typedef CFIndex (*CFAllocatorPreferredSizeCallBack)(CFIndex size, CFOptionFlags hint, void *info);
     typedef struct {      CFIndex version;      void * info;      CFAllocatorRetainCallBack retain;      CFAllocatorReleaseCallBack release;      CFAllocatorCopyDescriptionCallBack copyDescription;      CFAllocatorAllocateCallBack allocate;      CFAllocatorReallocateCallBack reallocate;      CFAllocatorDeallocateCallBack deallocate;      CFAllocatorPreferredSizeCallBack preferredSize;  }
     CFAllocatorContext;
     extern CFTypeID CFAllocatorGetTypeID(void);
     extern void CFAllocatorSetDefault(CFAllocatorRef allocator);
     extern CFAllocatorRef CFAllocatorGetDefault(void);
     extern CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context);
     extern void *CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
     extern void *CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);
     extern void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr);
     extern CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
     extern void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context);
     extern CFTypeID CFGetTypeID(CFTypeRef cf);
     extern CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);
     extern CFTypeRef CFRetain(CFTypeRef cf);
     extern void CFRelease(CFTypeRef cf);
     extern CFTypeRef CFAutorelease(CFTypeRef __attribute__((cf_consumed)) arg) __attribute__((availability(macosx,introduced=10_9)));
     extern CFIndex CFGetRetainCount(CFTypeRef cf);
     extern Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);
     extern CFHashCode CFHash(CFTypeRef cf);
     extern CFStringRef CFCopyDescription(CFTypeRef cf);
     extern CFAllocatorRef CFGetAllocator(CFTypeRef cf);
     extern CFTypeRef CFMakeCollectable(CFTypeRef cf) ;
     typedef const void * (*CFArrayRetainCallBack)(CFAllocatorRef allocator, const void *value);
     typedef void (*CFArrayReleaseCallBack)(CFAllocatorRef allocator, const void *value);
     typedef CFStringRef (*CFArrayCopyDescriptionCallBack)(const void *value);
     typedef Boolean (*CFArrayEqualCallBack)(const void *value1, const void *value2);
     typedef struct {      CFIndex version;      CFArrayRetainCallBack retain;      CFArrayReleaseCallBack release;      CFArrayCopyDescriptionCallBack copyDescription;      CFArrayEqualCallBack equal;  }
     CFArrayCallBacks;
     extern const CFArrayCallBacks kCFTypeArrayCallBacks;
     typedef void (*CFArrayApplierFunction)(const void *value, void *context);
     typedef const struct __attribute__((objc_bridge(NSArray))) __CFArray * CFArrayRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableArray))) __CFArray * CFMutableArrayRef;
     extern CFTypeID CFArrayGetTypeID(void);
     extern CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks);
     extern CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
     extern CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
     extern CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);
     extern CFIndex CFArrayGetCount(CFArrayRef theArray);
     extern CFIndex CFArrayGetCountOfValue(CFArrayRef theArray, CFRange range, const void *value);
     extern Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value);
     extern const void *CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);
     extern void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values);
     extern void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction __attribute__((noescape)) applier, void *context);
     extern CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
     extern CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
     extern CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context);
     extern void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value);
     extern void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
     extern void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
     extern void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx);
     extern void CFArrayRemoveAllValues(CFMutableArrayRef theArray);
     extern void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount);
     extern void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2);
     extern void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context);
     extern void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);
     typedef const void * (*CFBagRetainCallBack)(CFAllocatorRef allocator, const void *value);
     typedef void (*CFBagReleaseCallBack)(CFAllocatorRef allocator, const void *value);
     typedef CFStringRef (*CFBagCopyDescriptionCallBack)(const void *value);
     typedef Boolean (*CFBagEqualCallBack)(const void *value1, const void *value2);
     typedef CFHashCode (*CFBagHashCallBack)(const void *value);
     typedef struct {      CFIndex version;      CFBagRetainCallBack retain;      CFBagReleaseCallBack release;      CFBagCopyDescriptionCallBack copyDescription;      CFBagEqualCallBack equal;      CFBagHashCallBack hash;  }
     CFBagCallBacks;
     extern const CFBagCallBacks kCFTypeBagCallBacks;
     extern const CFBagCallBacks kCFCopyStringBagCallBacks;
     typedef void (*CFBagApplierFunction)(const void *value, void *context);
     typedef const struct __attribute__((objc_bridge(id))) __CFBag * CFBagRef;
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFBag * CFMutableBagRef;
     extern CFTypeID CFBagGetTypeID(void);
     extern CFBagRef CFBagCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFBagCallBacks *callBacks);
     static inline uint64_t OSReadSwapInt64(     const volatile void * base,     uintptr_t byteOffset ) {      uint64_t result;      result = *(volatile uint64_t *)((uintptr_t)base + byteOffset);      return _OSSwapInt64(result);  }
     static inline void OSWriteSwapInt16(     volatile void * base,     uintptr_t byteOffset,     uint16_t data ) {      *(volatile uint16_t *)((uintptr_t)base + byteOffset) = _OSSwapInt16(data);  }
     static inline void OSWriteSwapInt32(     volatile void * base,     uintptr_t byteOffset,     uint32_t data ) {      *(volatile uint32_t *)((uintptr_t)base + byteOffset) = _OSSwapInt32(data);  }
     static inline void OSWriteSwapInt64(     volatile void * base,     uintptr_t byteOffset,     uint64_t data ) {      *(volatile uint64_t *)((uintptr_t)base + byteOffset) = _OSSwapInt64(data);  }
     enum {      OSUnknownByteOrder,     OSLittleEndian,     OSBigEndian };
     static inline int32_t OSHostByteOrder(void) {      return OSLittleEndian;  }
     static inline uint16_t _OSReadInt16(     const volatile void * base,     uintptr_t byteOffset ) {      return *(volatile uint16_t *)((uintptr_t)base + byteOffset);  }
     static inline uint32_t _OSReadInt32(     const volatile void * base,     uintptr_t byteOffset ) {      return *(volatile uint32_t *)((uintptr_t)base + byteOffset);  }
     static inline uint64_t _OSReadInt64(     const volatile void * base,     uintptr_t byteOffset ) {      return *(volatile uint64_t *)((uintptr_t)base + byteOffset);  }
     static inline void _OSWriteInt16(     volatile void * base,     uintptr_t byteOffset,     uint16_t data ) {      *(volatile uint16_t *)((uintptr_t)base + byteOffset) = data;  }
     static inline void _OSWriteInt32(     volatile void * base,     uintptr_t byteOffset,     uint32_t data ) {      *(volatile uint32_t *)((uintptr_t)base + byteOffset) = data;  }
     static inline void _OSWriteInt64(     volatile void * base,     uintptr_t byteOffset,     uint64_t data ) {      *(volatile uint64_t *)((uintptr_t)base + byteOffset) = data;  }
     enum __CFByteOrder {      CFByteOrderUnknown,     CFByteOrderLittleEndian,     CFByteOrderBigEndian };
     typedef CFIndex CFByteOrder;
     static __inline__ __attribute__((always_inline)) CFByteOrder CFByteOrderGetCurrent(void) {      int32_t byteOrder = OSHostByteOrder();      switch (byteOrder) {     case OSLittleEndian: return CFByteOrderLittleEndian;     case OSBigEndian: return CFByteOrderBigEndian;     default: break;     }      return CFByteOrderUnknown;  }
     static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16(uint16_t arg) {      return ((__uint16_t)(__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg)));  }
     static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32(uint32_t arg) {      return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));  }
     static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64(uint64_t arg) {      return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));  }
     static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16BigToHost(uint16_t arg) {      return ((__uint16_t)(__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg)));  }
     static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32BigToHost(uint32_t arg) {      return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));  }
     static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64BigToHost(uint64_t arg) {      return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));  }
     static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToBig(uint16_t arg) {      return ((__uint16_t)(__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg)));  }
     static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToBig(uint32_t arg) {      return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));  }
     static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToBig(uint64_t arg) {      return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));  }
     static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16LittleToHost(uint16_t arg) {      return ((uint16_t)(arg));  }
     static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32LittleToHost(uint32_t arg) {      return ((uint32_t)(arg));  }
     static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64LittleToHost(uint64_t arg) {      return ((uint64_t)(arg));  }
     static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToLittle(uint16_t arg) {      return ((uint16_t)(arg));  }
     static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToLittle(uint32_t arg) {      return ((uint32_t)(arg));  }
     static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToLittle(uint64_t arg) {      return ((uint64_t)(arg));  }
     typedef struct { uint32_t v; }
     CFSwappedFloat32;
     typedef struct { uint64_t v; }
     CFSwappedFloat64;
     static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloat32HostToSwapped(Float32 arg) {      union CFSwap {  Float32 v;  CFSwappedFloat32 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.sv;  }
     static __inline__ __attribute__((always_inline)) Float32 CFConvertFloat32SwappedToHost(CFSwappedFloat32 arg) {      union CFSwap {  Float32 v;  CFSwappedFloat32 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.v;  }
     static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertFloat64HostToSwapped(Float64 arg) {      union CFSwap {  Float64 v;  CFSwappedFloat64 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.sv;  }
     static __inline__ __attribute__((always_inline)) Float64 CFConvertFloat64SwappedToHost(CFSwappedFloat64 arg) {      union CFSwap {  Float64 v;  CFSwappedFloat64 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.v;  }
     static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloatHostToSwapped(float arg) {      union CFSwap {  float v;  CFSwappedFloat32 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.sv;  }
     static __inline__ __attribute__((always_inline)) float CFConvertFloatSwappedToHost(CFSwappedFloat32 arg) {      union CFSwap {  float v;  CFSwappedFloat32 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt32(result.sv.v);      return result.v;  }
     static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertDoubleHostToSwapped(double arg) {      union CFSwap {  double v;  CFSwappedFloat64 sv;     }  result;      result.v = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.sv;  }
     static __inline__ __attribute__((always_inline)) double CFConvertDoubleSwappedToHost(CFSwappedFloat64 arg) {      union CFSwap {  double v;  CFSwappedFloat64 sv;     }  result;      result.sv = arg;      result.sv.v = CFSwapInt64(result.sv.v);      return result.v;  }
     typedef const void * (*CFDictionaryRetainCallBack)(CFAllocatorRef allocator, const void *value);
     typedef void (*CFDictionaryReleaseCallBack)(CFAllocatorRef allocator, const void *value);
     typedef CFStringRef (*CFDictionaryCopyDescriptionCallBack)(const void *value);
     typedef Boolean (*CFDictionaryEqualCallBack)(const void *value1, const void *value2);
     typedef CFHashCode (*CFDictionaryHashCallBack)(const void *value);
     typedef struct {      CFIndex version;      CFDictionaryRetainCallBack retain;      CFDictionaryReleaseCallBack release;      CFDictionaryCopyDescriptionCallBack copyDescription;      CFDictionaryEqualCallBack equal;      CFDictionaryHashCallBack hash;  }
     CFDictionaryKeyCallBacks;
     extern const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
     extern const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
     typedef struct {      CFIndex version;      CFDictionaryRetainCallBack retain;      CFDictionaryReleaseCallBack release;      CFDictionaryCopyDescriptionCallBack copyDescription;      CFDictionaryEqualCallBack equal;  }
     CFDictionaryValueCallBacks;
     extern const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
     typedef void (*CFDictionaryApplierFunction)(const void *key, const void *value, void *context);
     typedef const struct __attribute__((objc_bridge(NSDictionary))) __CFDictionary * CFDictionaryRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableDictionary))) __CFDictionary * CFMutableDictionaryRef;
     extern CFTypeID CFDictionaryGetTypeID(void);
     extern CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
     extern CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
     extern CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
     extern CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);
     extern CFIndex CFDictionaryGetCount(CFDictionaryRef theDict);
     extern CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key);
     extern CFIndex CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void *value);
     extern Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key);
     extern Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value);
     extern const void *CFDictionaryGetValue(CFDictionaryRef theDict, const void *key);
     extern Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value);
     extern void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values);
     extern void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction __attribute__((noescape)) applier, void *context);
     extern void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
     extern void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
     extern void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
     extern void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key);
     extern void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);
     typedef CFStringRef CFNotificationName __attribute__((swift_wrapper(struct)));
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFNotificationCenter * CFNotificationCenterRef;
     typedef void (*CFNotificationCallback)(CFNotificationCenterRef center, void *observer, CFNotificationName name, const void *object, CFDictionaryRef userInfo);
     typedef CFIndex CFNotificationSuspensionBehavior;
     enum {      CFNotificationSuspensionBehaviorDrop = 1,     CFNotificationSuspensionBehaviorCoalesce = 2,     CFNotificationSuspensionBehaviorHold = 3,     CFNotificationSuspensionBehaviorDeliverImmediately = 4 };
     extern CFTypeID CFNotificationCenterGetTypeID(void);
     extern CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void);
     extern CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void);
     extern CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void);
     extern void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior);
     extern void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object);
     extern void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer);
     extern void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately);
     enum {      kCFNotificationDeliverImmediately = (1UL << 0),     kCFNotificationPostToAllSessions = (1UL << 1) };
     extern void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options);
     typedef CFStringRef CFLocaleIdentifier __attribute__((swift_wrapper(struct)));
     typedef CFStringRef CFLocaleKey __attribute__((swift_wrapper(enum)));
     typedef const struct __attribute__((objc_bridge(NSLocale))) __CFLocale *CFLocaleRef;
     extern CFTypeID CFLocaleGetTypeID(void);
     extern CFLocaleRef CFLocaleGetSystem(void);
     extern CFLocaleRef CFLocaleCopyCurrent(void);
     extern CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers(void);
     extern CFArrayRef CFLocaleCopyISOLanguageCodes(void);
     extern CFArrayRef CFLocaleCopyISOCountryCodes(void);
     extern CFArrayRef CFLocaleCopyISOCurrencyCodes(void);
     extern CFArrayRef CFLocaleCopyCommonISOCurrencyCodes(void) __attribute__((availability(macosx,introduced=10_5)));
     extern CFArrayRef CFLocaleCopyPreferredLanguages(void) __attribute__((availability(macosx,introduced=10_5)));
     extern CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier);
     extern CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier);
     extern CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator, LangCode lcode, RegionCode rcode);
     extern CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef allocator, uint32_t lcid) __attribute__((availability(macosx,introduced=10_6)));
     extern uint32_t CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFLocaleIdentifier localeIdentifier) __attribute__((availability(macosx,introduced=10_6)));
     typedef CFIndex CFLocaleLanguageDirection;
     enum {      kCFLocaleLanguageDirectionUnknown = 0,     kCFLocaleLanguageDirectionLeftToRight = 1,     kCFLocaleLanguageDirectionRightToLeft = 2,     kCFLocaleLanguageDirectionTopToBottom = 3,     kCFLocaleLanguageDirectionBottomToTop = 4 };
     extern CFLocaleLanguageDirection CFLocaleGetLanguageCharacterDirection(CFStringRef isoLangCode) __attribute__((availability(macosx,introduced=10_6)));
     extern CFLocaleLanguageDirection CFLocaleGetLanguageLineDirection(CFStringRef isoLangCode) __attribute__((availability(macosx,introduced=10_6)));
     extern CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID);
     extern CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary);
     extern CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier);
     extern CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale);
     extern CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale);
     extern CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key);
     extern CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFLocaleKey key, CFStringRef value);
     extern const CFNotificationName kCFLocaleCurrentLocaleDidChangeNotification __attribute__((availability(macosx,introduced=10_5)));
     extern const CFLocaleKey kCFLocaleIdentifier;
     extern const CFLocaleKey kCFLocaleLanguageCode;
     extern const CFLocaleKey kCFLocaleCountryCode;
     extern const CFLocaleKey kCFLocaleScriptCode;
     extern const CFLocaleKey kCFLocaleVariantCode;
     extern const CFLocaleKey kCFLocaleExemplarCharacterSet;
     extern const CFLocaleKey kCFLocaleCalendarIdentifier;
     extern const CFLocaleKey kCFLocaleCalendar;
     extern const CFLocaleKey kCFLocaleCollationIdentifier;
     extern const CFLocaleKey kCFLocaleUsesMetricSystem;
     extern const CFLocaleKey kCFLocaleMeasurementSystem;
     extern const CFLocaleKey kCFLocaleDecimalSeparator;
     extern const CFLocaleKey kCFLocaleGroupingSeparator;
     extern const CFLocaleKey kCFLocaleCurrencySymbol;
     extern const CFLocaleKey kCFLocaleCurrencyCode;
     extern const CFLocaleKey kCFLocaleCollatorIdentifier __attribute__((availability(macosx,introduced=10_6)));
     extern const CFLocaleKey kCFLocaleQuotationBeginDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
     extern const CFLocaleKey kCFLocaleQuotationEndDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
     extern const CFLocaleKey kCFLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
     extern const CFLocaleKey kCFLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(macosx,introduced=10_6)));
     typedef CFStringRef CFCalendarIdentifier __attribute__((swift_wrapper(enum)));
     extern const CFCalendarIdentifier kCFGregorianCalendar;
     extern const CFCalendarIdentifier kCFBuddhistCalendar;
     extern const CFCalendarIdentifier kCFChineseCalendar;
     extern const CFCalendarIdentifier kCFHebrewCalendar;
     extern const CFCalendarIdentifier kCFIslamicCalendar;
     extern const CFCalendarIdentifier kCFIslamicCivilCalendar;
     extern const CFCalendarIdentifier kCFJapaneseCalendar;
     extern const CFCalendarIdentifier kCFRepublicOfChinaCalendar __attribute__((availability(macosx,introduced=10_6)));
     extern const CFCalendarIdentifier kCFPersianCalendar __attribute__((availability(macosx,introduced=10_6)));
     extern const CFCalendarIdentifier kCFIndianCalendar __attribute__((availability(macosx,introduced=10_6)));
     extern const CFCalendarIdentifier kCFISO8601Calendar __attribute__((availability(macosx,introduced=10_6)));
     extern const CFCalendarIdentifier kCFIslamicTabularCalendar __attribute__((availability(macosx,introduced=10_10)));
     extern const CFCalendarIdentifier kCFIslamicUmmAlQuraCalendar __attribute__((availability(macosx,introduced=10_10)));
     typedef double CFTimeInterval;
     typedef CFTimeInterval CFAbsoluteTime;
     extern CFAbsoluteTime CFAbsoluteTimeGetCurrent(void);
     extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
     extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;
     typedef const struct __attribute__((objc_bridge(NSDate))) __CFDate * CFDateRef;
     extern CFTypeID CFDateGetTypeID(void);
     extern CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at);
     extern CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate);
     extern CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate);
     extern CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context);
     typedef const struct __attribute__((objc_bridge(NSTimeZone))) __CFTimeZone * CFTimeZoneRef;
     typedef struct {      SInt32 year;      SInt8 month;      SInt8 day;      SInt8 hour;      SInt8 minute;      double second;  }
     CFGregorianDate __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     typedef struct {      SInt32 years;      SInt32 months;      SInt32 days;      SInt32 hours;      SInt32 minutes;      double seconds;  }
     CFGregorianUnits __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     typedef CFOptionFlags CFGregorianUnitFlags;
     enum {      kCFGregorianUnitsYears __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 0),     kCFGregorianUnitsMonths __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 1),     kCFGregorianUnitsDays __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 2),     kCFGregorianUnitsHours __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 3),     kCFGregorianUnitsMinutes __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 4),     kCFGregorianUnitsSeconds __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = (1UL << 5),     kCFGregorianAllUnits __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead"))) = 0x00FFFFFF };
     extern Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits units) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     extern SInt32 CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime at, CFTimeZoneRef tz) __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" "Use CFCalendar or NSCalendar API instead")));
     typedef const struct __attribute__((objc_bridge(NSData))) __CFData * CFDataRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableData))) __CFData * CFMutableDataRef;
     extern CFTypeID CFDataGetTypeID(void);
     extern CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
     extern CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
     extern CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);
     extern CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
     extern CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);
     extern CFIndex CFDataGetLength(CFDataRef theData);
     extern const UInt8 *CFDataGetBytePtr(CFDataRef theData);
     extern UInt8 *CFDataGetMutableBytePtr(CFMutableDataRef theData);
     extern void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer);
     extern void CFDataSetLength(CFMutableDataRef theData, CFIndex length);
     extern void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);
     extern void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
     extern void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength);
     extern void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);
     typedef CFOptionFlags CFDataSearchFlags;
     enum {      kCFDataSearchBackwards = 1UL << 0,     kCFDataSearchAnchored = 1UL << 1 }
     __attribute__((availability(macosx,introduced=10_6)));
     extern CFRange CFDataFind(CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions) __attribute__((availability(macosx,introduced=10_6)));
     typedef const struct __attribute__((objc_bridge(NSCharacterSet))) __CFCharacterSet * CFCharacterSetRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableCharacterSet))) __CFCharacterSet * CFMutableCharacterSetRef;
     typedef CFIndex CFCharacterSetPredefinedSet;
     enum {      kCFCharacterSetControl = 1,     kCFCharacterSetWhitespace,     kCFCharacterSetWhitespaceAndNewline,     kCFCharacterSetDecimalDigit,     kCFCharacterSetLetter,     kCFCharacterSetLowercaseLetter,     kCFCharacterSetUppercaseLetter,     kCFCharacterSetNonBase,     kCFCharacterSetDecomposable,     kCFCharacterSetAlphaNumeric,     kCFCharacterSetPunctuation,     kCFCharacterSetCapitalizedLetter = 13,     kCFCharacterSetSymbol = 14,     kCFCharacterSetNewline __attribute__((availability(macosx,introduced=10_5))) = 15,     kCFCharacterSetIllegal = 12 };
     extern CFTypeID CFCharacterSetGetTypeID(void);
     extern CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier);
     extern CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange);
     extern CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString);
     extern CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData);
     extern CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet);
     extern Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset);
     extern Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane);
     extern CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc);
     extern CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
     extern CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
     extern Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar);
     extern Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar);
     extern CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet);
     extern void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
     extern void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
     extern void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
     extern void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
     extern void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
     extern void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
     extern void CFCharacterSetInvert(CFMutableCharacterSetRef theSet);
     typedef UInt32 CFStringEncoding;
     typedef CFStringEncoding CFStringBuiltInEncodings;
     enum {      kCFStringEncodingMacRoman = 0,     kCFStringEncodingWindowsLatin1 = 0x0500,     kCFStringEncodingISOLatin1 = 0x0201,     kCFStringEncodingNextStepLatin = 0x0B01,     kCFStringEncodingASCII = 0x0600,     kCFStringEncodingUnicode = 0x0100,     kCFStringEncodingUTF8 = 0x08000100,     kCFStringEncodingNonLossyASCII = 0x0BFF,     kCFStringEncodingUTF16 = 0x0100,     kCFStringEncodingUTF16BE = 0x10000100,     kCFStringEncodingUTF16LE = 0x14000100,     kCFStringEncodingUTF32 = 0x0c000100,     kCFStringEncodingUTF32BE = 0x18000100,     kCFStringEncodingUTF32LE = 0x1c000100 };
     extern CFTypeID CFStringGetTypeID(void);
     extern CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);
     extern CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
     extern void CFTimeZoneSetDefault(CFTimeZoneRef tz);
     extern CFArrayRef CFTimeZoneCopyKnownNames(void);
     extern CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary(void);
     extern void CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef dict);
     extern CFTimeZoneRef CFTimeZoneCreate(CFAllocatorRef allocator, CFStringRef name, CFDataRef data);
     extern CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti);
     extern CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev);
     extern CFStringRef CFTimeZoneGetName(CFTimeZoneRef tz);
     extern CFDataRef CFTimeZoneGetData(CFTimeZoneRef tz);
     extern CFTimeInterval CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz, CFAbsoluteTime at);
     extern CFStringRef CFTimeZoneCopyAbbreviation(CFTimeZoneRef tz, CFAbsoluteTime at);
     extern Boolean CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef tz, CFAbsoluteTime at);
     extern CFTimeInterval CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((availability(macosx,introduced=10_5)));
     extern CFAbsoluteTime CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef tz, CFAbsoluteTime at) __attribute__((availability(macosx,introduced=10_5)));
     typedef CFIndex CFTimeZoneNameStyle;
     enum {   kCFTimeZoneNameStyleStandard,  kCFTimeZoneNameStyleShortStandard,  kCFTimeZoneNameStyleDaylightSaving,  kCFTimeZoneNameStyleShortDaylightSaving,  kCFTimeZoneNameStyleGeneric,  kCFTimeZoneNameStyleShortGeneric }
     __attribute__((availability(macosx,introduced=10_5)));
     extern CFStringRef CFTimeZoneCopyLocalizedName(CFTimeZoneRef tz, CFTimeZoneNameStyle style, CFLocaleRef locale) __attribute__((availability(macosx,introduced=10_5)));
     extern const CFNotificationName kCFTimeZoneSystemTimeZoneDidChangeNotification __attribute__((availability(macosx,introduced=10_5)));
     typedef struct __attribute__((objc_bridge_mutable(NSCalendar))) __CFCalendar * CFCalendarRef;
     extern CFTypeID CFCalendarGetTypeID(void);
     extern CFCalendarRef CFCalendarCopyCurrent(void);
     extern CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier);
     extern CFCalendarIdentifier CFCalendarGetIdentifier(CFCalendarRef calendar);
     extern CFLocaleRef CFCalendarCopyLocale(CFCalendarRef calendar);
     extern void CFCalendarSetLocale(CFCalendarRef calendar, CFLocaleRef locale);
     extern CFTimeZoneRef CFCalendarCopyTimeZone(CFCalendarRef calendar);
     extern void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz);
     extern CFIndex CFCalendarGetFirstWeekday(CFCalendarRef calendar);
     extern void CFCalendarSetFirstWeekday(CFCalendarRef calendar, CFIndex wkdy);
     extern CFIndex CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef calendar);
     extern void CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef calendar, CFIndex mwd);
     typedef CFOptionFlags CFCalendarUnit;
     enum {   kCFCalendarUnitEra = (1UL << 1),  kCFCalendarUnitYear = (1UL << 2),  kCFCalendarUnitMonth = (1UL << 3),  kCFCalendarUnitDay = (1UL << 4),  kCFCalendarUnitHour = (1UL << 5),  kCFCalendarUnitMinute = (1UL << 6),  kCFCalendarUnitSecond = (1UL << 7),  kCFCalendarUnitWeek __attribute__((availability(macosx,introduced=10_4,deprecated=10_10,message="" ))) = (1UL << 8),  kCFCalendarUnitWeekday = (1UL << 9),  kCFCalendarUnitWeekdayOrdinal = (1UL << 10),  kCFCalendarUnitQuarter __attribute__((availability(macosx,introduced=10_6))) = (1UL << 11),  kCFCalendarUnitWeekOfMonth __attribute__((availability(macosx,introduced=10_7))) = (1UL << 12),  kCFCalendarUnitWeekOfYear __attribute__((availability(macosx,introduced=10_7))) = (1UL << 13),  kCFCalendarUnitYearForWeekOfYear __attribute__((availability(macosx,introduced=10_7))) = (1UL << 14), };
     extern CFRange CFCalendarGetMinimumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit);
     extern CFRange CFCalendarGetMaximumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit);
     extern CFRange CFCalendarGetRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at);
     extern CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at);
     extern Boolean CFCalendarGetTimeRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit, CFAbsoluteTime at, CFAbsoluteTime *startp, CFTimeInterval *tip) __attribute__((availability(macosx,introduced=10_5)));
     extern Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...);
     extern Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...);
     enum {      kCFCalendarComponentsWrap = (1UL << 0) };
     extern Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...);
     extern Boolean CFCalendarGetComponentDifference(CFCalendarRef calendar, CFAbsoluteTime startingAT, CFAbsoluteTime resultAT, CFOptionFlags options, const char *componentDesc, ...);
     typedef CFStringRef CFDateFormatterKey __attribute__((swift_wrapper(enum)));
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFDateFormatter *CFDateFormatterRef;
     extern CFStringRef CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale) __attribute__((availability(macosx,introduced=10_6)));
     extern CFTypeID CFDateFormatterGetTypeID(void);
     typedef CFIndex CFDateFormatterStyle;
     enum {      kCFDateFormatterNoStyle = 0,     kCFDateFormatterShortStyle = 1,     kCFDateFormatterMediumStyle = 2,     kCFDateFormatterLongStyle = 3,     kCFDateFormatterFullStyle = 4 };
     typedef CFOptionFlags CFISO8601DateFormatOptions;
     enum {      kCFISO8601DateFormatWithYear __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 0),     kCFISO8601DateFormatWithMonth __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 1),     kCFISO8601DateFormatWithWeekOfYear __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 2),     kCFISO8601DateFormatWithDay __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 4),     kCFISO8601DateFormatWithTime __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 5),     kCFISO8601DateFormatWithTimeZone __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 6),     kCFISO8601DateFormatWithSpaceBetweenDateAndTime __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 7),     kCFISO8601DateFormatWithDashSeparatorInDate __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 8),     kCFISO8601DateFormatWithColonSeparatorInTime __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 9),     kCFISO8601DateFormatWithColonSeparatorInTimeZone __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = (1UL << 10),     kCFISO8601DateFormatWithFullDate __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = kCFISO8601DateFormatWithYear | kCFISO8601DateFormatWithMonth | kCFISO8601DateFormatWithDay | kCFISO8601DateFormatWithDashSeparatorInDate,     kCFISO8601DateFormatWithFullTime __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = kCFISO8601DateFormatWithTime | kCFISO8601DateFormatWithColonSeparatorInTime | kCFISO8601DateFormatWithTimeZone | kCFISO8601DateFormatWithColonSeparatorInTimeZone,     kCFISO8601DateFormatWithInternetDateTime __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0))) = kCFISO8601DateFormatWithFullDate | kCFISO8601DateFormatWithFullTime, };
     extern CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
     extern CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter);
     extern CFDateFormatterStyle CFDateFormatterGetDateStyle(CFDateFormatterRef formatter);
     extern CFDateFormatterStyle CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter);
     extern CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter);
     extern void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString);
     extern CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date);
     extern CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at);
     extern CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
     extern Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp);
     extern void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value);
     extern CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key);
     extern const CFDateFormatterKey kCFDateFormatterIsLenient;
     extern const CFDateFormatterKey kCFDateFormatterTimeZone;
     extern const CFDateFormatterKey kCFDateFormatterCalendarName;
     extern const CFDateFormatterKey kCFDateFormatterDefaultFormat;
     extern const CFDateFormatterKey kCFDateFormatterTwoDigitStartDate;
     extern const CFDateFormatterKey kCFDateFormatterDefaultDate;
     extern const CFDateFormatterKey kCFDateFormatterCalendar;
     extern const CFDateFormatterKey kCFDateFormatterEraSymbols;
     extern const CFDateFormatterKey kCFDateFormatterMonthSymbols;
     extern const CFDateFormatterKey kCFDateFormatterShortMonthSymbols;
     extern const CFDateFormatterKey kCFDateFormatterWeekdaySymbols;
     extern const CFDateFormatterKey kCFDateFormatterShortWeekdaySymbols;
     extern const CFDateFormatterKey kCFDateFormatterAMSymbol;
     extern const CFDateFormatterKey kCFDateFormatterPMSymbol;
     extern const CFDateFormatterKey kCFDateFormatterLongEraSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterVeryShortMonthSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterStandaloneMonthSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterShortStandaloneMonthSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneMonthSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterVeryShortWeekdaySymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterStandaloneWeekdaySymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterShortStandaloneWeekdaySymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneWeekdaySymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterQuarterSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterShortQuarterSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterStandaloneQuarterSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterShortStandaloneQuarterSymbols __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterGregorianStartDate __attribute__((availability(macosx,introduced=10_5)));
     extern const CFDateFormatterKey kCFDateFormatterDoesRelativeDateFormattingKey __attribute__((availability(macosx,introduced=10_6)));
     typedef CFStringRef CFErrorDomain __attribute__((swift_wrapper(struct)));
     typedef struct __attribute__((objc_bridge(NSError))) __CFError * CFErrorRef;
     extern CFTypeID CFErrorGetTypeID(void) __attribute__((availability(macosx,introduced=10_5)));
     extern const CFErrorDomain kCFErrorDomainPOSIX __attribute__((availability(macosx,introduced=10_5)));
     extern const CFErrorDomain kCFErrorDomainOSStatus __attribute__((availability(macosx,introduced=10_5)));
     extern const CFErrorDomain kCFErrorDomainMach __attribute__((availability(macosx,introduced=10_5)));
     extern const CFErrorDomain kCFErrorDomainCocoa __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorLocalizedDescriptionKey __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorLocalizedFailureReasonKey __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorLocalizedRecoverySuggestionKey __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorDescriptionKey __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorUnderlyingErrorKey __attribute__((availability(macosx,introduced=10_5)));
     extern const CFStringRef kCFErrorURLKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFErrorFilePathKey __attribute__((availability(macosx,introduced=10_7)));
     extern CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo) __attribute__((availability(macosx,introduced=10_5)));
     extern CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues) __attribute__((availability(macosx,introduced=10_5)));
     extern CFErrorDomain CFErrorGetDomain(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     extern CFIndex CFErrorGetCode(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     extern CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     extern CFStringRef CFErrorCopyDescription(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     extern CFStringRef CFErrorCopyFailureReason(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     extern CFStringRef CFErrorCopyRecoverySuggestion(CFErrorRef err) __attribute__((availability(macosx,introduced=10_5)));
     typedef const struct __attribute__((objc_bridge(NSNumber))) __CFBoolean * CFBooleanRef;
     extern const CFBooleanRef kCFBooleanTrue;
     extern const CFBooleanRef kCFBooleanFalse;
     extern CFTypeID CFBooleanGetTypeID(void);
     extern Boolean CFBooleanGetValue(CFBooleanRef boolean);
     typedef CFIndex CFNumberType;
     enum {      kCFNumberSInt8Type = 1,     kCFNumberSInt16Type = 2,     kCFNumberSInt32Type = 3,     kCFNumberSInt64Type = 4,     kCFNumberFloat32Type = 5,     kCFNumberFloat64Type = 6,     kCFNumberCharType = 7,     kCFNumberShortType = 8,     kCFNumberIntType = 9,     kCFNumberLongType = 10,     kCFNumberLongLongType = 11,     kCFNumberFloatType = 12,     kCFNumberDoubleType = 13,     kCFNumberCFIndexType = 14,     kCFNumberNSIntegerType __attribute__((availability(macosx,introduced=10_5))) = 15,     kCFNumberCGFloatType __attribute__((availability(macosx,introduced=10_5))) = 16,     kCFNumberMaxType = 16 };
     typedef const struct __attribute__((objc_bridge(NSNumber))) __CFNumber * CFNumberRef;
     extern const CFNumberRef kCFNumberPositiveInfinity;
     extern const CFNumberRef kCFNumberNegativeInfinity;
     extern const CFNumberRef kCFNumberNaN;
     extern CFTypeID CFNumberGetTypeID(void);
     extern CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
     extern CFNumberType CFNumberGetType(CFNumberRef number);
     extern CFIndex CFNumberGetByteSize(CFNumberRef number);
     extern Boolean CFNumberIsFloatType(CFNumberRef number);
     extern Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr);
     extern CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context);
     typedef CFStringRef CFNumberFormatterKey __attribute__((swift_wrapper(enum)));
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFNumberFormatter *CFNumberFormatterRef;
     extern CFTypeID CFNumberFormatterGetTypeID(void);
     typedef CFIndex CFNumberFormatterStyle;
     enum {   kCFNumberFormatterNoStyle = 0,  kCFNumberFormatterDecimalStyle = 1,  kCFNumberFormatterCurrencyStyle = 2,  kCFNumberFormatterPercentStyle = 3,  kCFNumberFormatterScientificStyle = 4,  kCFNumberFormatterSpellOutStyle = 5,  kCFNumberFormatterOrdinalStyle __attribute__((availability(macosx,introduced=10_11))) = 6,  kCFNumberFormatterCurrencyISOCodeStyle __attribute__((availability(macosx,introduced=10_11))) = 8,  kCFNumberFormatterCurrencyPluralStyle __attribute__((availability(macosx,introduced=10_11))) = 9,  kCFNumberFormatterCurrencyAccountingStyle __attribute__((availability(macosx,introduced=10_11))) = 10, };
     extern CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style);
     extern CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter);
     extern CFNumberFormatterStyle CFNumberFormatterGetStyle(CFNumberFormatterRef formatter);
     extern CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter);
     extern void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString);
     extern CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number);
     extern CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr);
     typedef CFOptionFlags CFNumberFormatterOptionFlags;
     enum {      kCFNumberFormatterParseIntegersOnly = 1 };
     extern CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options);
     extern Boolean CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr);
     extern void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key, CFTypeRef value);
     extern CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key);
     extern const CFNumberFormatterKey kCFNumberFormatterCurrencyCode;
     extern const CFNumberFormatterKey kCFNumberFormatterDecimalSeparator;
     extern const CFNumberFormatterKey kCFNumberFormatterCurrencyDecimalSeparator;
     extern const CFNumberFormatterKey kCFNumberFormatterAlwaysShowDecimalSeparator;
     extern const CFNumberFormatterKey kCFNumberFormatterGroupingSeparator;
     extern const CFNumberFormatterKey kCFNumberFormatterUseGroupingSeparator;
     extern const CFNumberFormatterKey kCFNumberFormatterPercentSymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterZeroSymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterNaNSymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterInfinitySymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterMinusSign;
     extern const CFNumberFormatterKey kCFNumberFormatterPlusSign;
     extern const CFNumberFormatterKey kCFNumberFormatterCurrencySymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterExponentSymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterMinIntegerDigits;
     extern const CFNumberFormatterKey kCFNumberFormatterMaxIntegerDigits;
     extern const CFNumberFormatterKey kCFNumberFormatterMinFractionDigits;
     extern const CFNumberFormatterKey kCFNumberFormatterMaxFractionDigits;
     extern const CFNumberFormatterKey kCFNumberFormatterGroupingSize;
     extern const CFNumberFormatterKey kCFNumberFormatterSecondaryGroupingSize;
     extern const CFNumberFormatterKey kCFNumberFormatterRoundingMode;
     extern const CFNumberFormatterKey kCFNumberFormatterRoundingIncrement;
     extern const CFNumberFormatterKey kCFNumberFormatterFormatWidth;
     extern const CFNumberFormatterKey kCFNumberFormatterPaddingPosition;
     extern const CFNumberFormatterKey kCFNumberFormatterPaddingCharacter;
     extern const CFNumberFormatterKey kCFNumberFormatterDefaultFormat;
     extern const CFNumberFormatterKey kCFNumberFormatterMultiplier;
     extern const CFNumberFormatterKey kCFNumberFormatterPositivePrefix;
     extern const CFNumberFormatterKey kCFNumberFormatterPositiveSuffix;
     extern const CFNumberFormatterKey kCFNumberFormatterNegativePrefix;
     extern const CFNumberFormatterKey kCFNumberFormatterNegativeSuffix;
     extern const CFNumberFormatterKey kCFNumberFormatterPerMillSymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterInternationalCurrencySymbol;
     extern const CFNumberFormatterKey kCFNumberFormatterCurrencyGroupingSeparator __attribute__((availability(macosx,introduced=10_5)));
     extern const CFNumberFormatterKey kCFNumberFormatterIsLenient __attribute__((availability(macosx,introduced=10_5)));
     extern const CFNumberFormatterKey kCFNumberFormatterUseSignificantDigits __attribute__((availability(macosx,introduced=10_5)));
     extern const CFNumberFormatterKey kCFNumberFormatterMinSignificantDigits __attribute__((availability(macosx,introduced=10_5)));
     extern const CFNumberFormatterKey kCFNumberFormatterMaxSignificantDigits __attribute__((availability(macosx,introduced=10_5)));
     typedef CFIndex CFNumberFormatterRoundingMode;
     enum {      kCFNumberFormatterRoundCeiling = 0,     kCFNumberFormatterRoundFloor = 1,     kCFNumberFormatterRoundDown = 2,     kCFNumberFormatterRoundUp = 3,     kCFNumberFormatterRoundHalfEven = 4,     kCFNumberFormatterRoundHalfDown = 5,     kCFNumberFormatterRoundHalfUp = 6 };
     typedef CFIndex CFNumberFormatterPadPosition;
     enum {      kCFNumberFormatterPadBeforePrefix = 0,     kCFNumberFormatterPadAfterPrefix = 1,     kCFNumberFormatterPadBeforeSuffix = 2,     kCFNumberFormatterPadAfterSuffix = 3 };
     extern Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement);
     extern const CFStringRef kCFPreferencesAnyApplication;
     extern const CFStringRef kCFPreferencesCurrentApplication;
     extern const CFStringRef kCFPreferencesAnyHost;
     extern const CFStringRef kCFPreferencesCurrentHost;
     extern const CFStringRef kCFPreferencesAnyUser;
     extern const CFStringRef kCFPreferencesCurrentUser;
     extern _Nullable CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID);
     extern Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean * _Nullable keyExistsAndHasValidFormat);
     extern CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean * _Nullable keyExistsAndHasValidFormat);
     extern void CFPreferencesSetAppValue(CFStringRef key, _Nullable CFPropertyListRef value, CFStringRef applicationID);
     extern void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID);
     extern void CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID, CFStringRef suiteID);
     extern Boolean CFPreferencesAppSynchronize(CFStringRef applicationID);
     extern _Nullable CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern CFDictionaryRef CFPreferencesCopyMultiple(_Nullable CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern void CFPreferencesSetValue(CFStringRef key, _Nullable CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern void CFPreferencesSetMultiple(_Nullable CFDictionaryRef keysToSet, _Nullable CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern _Nullable CFArrayRef CFPreferencesCopyApplicationList(CFStringRef userName, CFStringRef hostName) __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" )));
     extern _Nullable CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
     extern Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);
     typedef CFIndex CFURLPathStyle;
     enum {      kCFURLPOSIXPathStyle = 0,     kCFURLHFSPathStyle __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" ))),     kCFURLWindowsPathStyle };
     typedef const struct __attribute__((objc_bridge(NSURL))) __CFURL * CFURLRef;
     extern CFTypeID CFURLGetTypeID(void);
     extern CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL);
     extern CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace);
     extern CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL);
     extern CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode);
     extern CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory);
     extern CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);
     extern CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
     extern CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL);
     extern Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen);
     extern CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL);
     extern CFStringRef CFURLGetString(CFURLRef anURL);
     extern CFURLRef CFURLGetBaseURL(CFURLRef anURL);
     extern Boolean CFURLCanBeDecomposed(CFURLRef anURL);
     extern CFStringRef CFURLCopyScheme(CFURLRef anURL);
     extern CFStringRef CFURLCopyNetLocation(CFURLRef anURL);
     extern CFStringRef CFURLCopyPath(CFURLRef anURL);
     extern CFStringRef CFURLCopyStrictPath(CFURLRef anURL, Boolean *isAbsolute);
     extern CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle);
     extern Boolean CFURLHasDirectoryPath(CFURLRef anURL);
     extern CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL);
     extern CFStringRef CFURLCopyHostName(CFURLRef anURL);
     extern SInt32 CFURLGetPortNumber(CFURLRef anURL);
     extern CFStringRef CFURLCopyUserName(CFURLRef anURL);
     extern CFStringRef CFURLCopyPassword(CFURLRef anURL);
     extern CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
     extern CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
     extern CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
     extern CFStringRef CFURLCopyLastPathComponent(CFURLRef url);
     extern CFStringRef CFURLCopyPathExtension(CFURLRef url);
     extern CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
     extern const CFStringRef kCFURLVolumeLocalizedNameKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLVolumeIsEncryptedKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLVolumeIsRootFileSystemKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLVolumeSupportsCompressionKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLVolumeSupportsFileCloningKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLVolumeSupportsSwapRenamingKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLVolumeSupportsExclusiveRenamingKey __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) __attribute__((availability(tvos,introduced=10.0)));
     extern const CFStringRef kCFURLIsUbiquitousItemKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLUbiquitousItemIsDownloadedKey __attribute__((availability(macosx,introduced=10_7,deprecated=10_9,message="" "Use kCFURLUbiquitousItemDownloadingStatusKey instead")));
     extern const CFStringRef kCFURLUbiquitousItemIsDownloadingKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLUbiquitousItemIsUploadedKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLUbiquitousItemIsUploadingKey __attribute__((availability(macosx,introduced=10_7)));
     extern const CFStringRef kCFURLUbiquitousItemPercentDownloadedKey __attribute__((availability(macosx,introduced=10_7,deprecated=10_8,message="" "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")));
     extern const CFStringRef kCFURLUbiquitousItemPercentUploadedKey __attribute__((availability(macosx,introduced=10_7,deprecated=10_8,message="" "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")));
     extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusKey __attribute__((availability(macosx,introduced=10_9)));
     extern const CFStringRef kCFURLUbiquitousItemDownloadingErrorKey __attribute__((availability(macosx,introduced=10_9)));
     extern const CFStringRef kCFURLUbiquitousItemUploadingErrorKey __attribute__((availability(macosx,introduced=10_9)));
     extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(macosx,introduced=10_9)));
     extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(macosx,introduced=10_9)));
     extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusCurrent __attribute__((availability(macosx,introduced=10_9)));
     typedef CFOptionFlags CFURLBookmarkCreationOptions;
     enum {      kCFURLBookmarkCreationMinimalBookmarkMask = ( 1UL << 9 ),     kCFURLBookmarkCreationSuitableForBookmarkFile = ( 1UL << 10 ),     kCFURLBookmarkCreationWithSecurityScope __attribute__((availability(macosx,introduced=10_7))) = ( 1UL << 11 ),     kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess __attribute__((availability(macosx,introduced=10_7))) = ( 1UL << 12 ),     kCFURLBookmarkCreationPreferFileIDResolutionMask __attribute__((availability(macosx,introduced=10_6,deprecated=10_9,message="" "kCFURLBookmarkCreationPreferFileIDResolutionMask does nothing and has no effect on bookmark resolution"))) = ( 1UL << 8 ), }
     __attribute__((availability(macosx,introduced=10_6)));
     typedef CFOptionFlags CFURLBookmarkResolutionOptions;
     enum {      kCFURLBookmarkResolutionWithoutUIMask = ( 1UL << 8 ),     kCFURLBookmarkResolutionWithoutMountingMask = ( 1UL << 9 ),     kCFURLBookmarkResolutionWithSecurityScope __attribute__((availability(macosx,introduced=10_7))) = ( 1UL << 10 ),     kCFBookmarkResolutionWithoutUIMask = kCFURLBookmarkResolutionWithoutUIMask,     kCFBookmarkResolutionWithoutMountingMask = kCFURLBookmarkResolutionWithoutMountingMask, }
     __attribute__((availability(macosx,introduced=10_6)));
     typedef CFOptionFlags CFURLBookmarkFileCreationOptions;
     extern CFDataRef CFURLCreateBookmarkData ( CFAllocatorRef allocator, CFURLRef url, CFURLBookmarkCreationOptions options, CFArrayRef resourcePropertiesToInclude, CFURLRef relativeToURL, CFErrorRef* error ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFURLRef CFURLCreateByResolvingBookmarkData ( CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean* isStale, CFErrorRef* error ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData ( CFAllocatorRef allocator, CFArrayRef resourcePropertiesToReturn, CFDataRef bookmark ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData( CFAllocatorRef allocator, CFStringRef resourcePropertyKey, CFDataRef bookmark ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFDataRef CFURLCreateBookmarkDataFromFile(CFAllocatorRef allocator, CFURLRef fileURL, CFErrorRef *errorRef ) __attribute__((availability(macosx,introduced=10_6)));
     extern Boolean CFURLWriteBookmarkDataToFile( CFDataRef bookmarkRef, CFURLRef fileURL, CFURLBookmarkFileCreationOptions options, CFErrorRef *errorRef ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFDataRef CFURLCreateBookmarkDataFromAliasRecord ( CFAllocatorRef allocatorRef, CFDataRef aliasRecordDataRef ) __attribute__((availability(macosx,introduced=10_6)));
     extern Boolean CFURLStartAccessingSecurityScopedResource(CFURLRef url) __attribute__((availability(macosx,introduced=10_7)));
     extern void CFURLStopAccessingSecurityScopedResource(CFURLRef url) __attribute__((availability(macosx,introduced=10_7)));
     typedef unsigned int boolean_t;
     typedef __darwin_natural_t natural_t;
     typedef int integer_t;
     typedef uintptr_t vm_offset_t;
     typedef uintptr_t vm_size_t;
     typedef uint64_t mach_vm_address_t;
     typedef uint64_t mach_vm_offset_t;
     typedef uint64_t mach_vm_size_t;
     typedef uint64_t vm_map_offset_t;
     typedef uint64_t vm_map_address_t;
     typedef uint64_t vm_map_size_t;
     typedef mach_vm_address_t mach_port_context_t;
     typedef natural_t mach_port_name_t;
     typedef mach_port_name_t *mach_port_name_array_t;
     typedef __darwin_mach_port_t mach_port_t;
     typedef mach_port_t *mach_port_array_t;
     typedef natural_t mach_port_right_t;
     typedef natural_t mach_port_type_t;
     typedef mach_port_type_t *mach_port_type_array_t;
     typedef natural_t mach_port_urefs_t;
     typedef integer_t mach_port_delta_t;
     typedef natural_t mach_port_seqno_t;
     typedef natural_t mach_port_mscount_t;
     typedef natural_t mach_port_msgcount_t;
     typedef natural_t mach_port_rights_t;
     typedef unsigned int mach_port_srights_t;
     typedef struct mach_port_status {   mach_port_rights_t mps_pset;   mach_port_seqno_t mps_seqno;   mach_port_mscount_t mps_mscount;   mach_port_msgcount_t mps_qlimit;   mach_port_msgcount_t mps_msgcount;   mach_port_rights_t mps_sorights;   boolean_t mps_srights;   boolean_t mps_pdrequest;   boolean_t mps_nsrequest;   natural_t mps_flags;  }
     mach_port_status_t;
     typedef struct mach_port_limits {   mach_port_msgcount_t mpl_qlimit;  }
     mach_port_limits_t;
     typedef struct mach_port_info_ext {   mach_port_status_t mpie_status;   mach_port_msgcount_t mpie_boost_cnt;   uint32_t reserved[6];  }
     mach_port_info_ext_t;
     typedef integer_t *mach_port_info_t;
     typedef int mach_port_flavor_t;
     typedef struct mach_port_qos {   unsigned int name:1;   unsigned int prealloc:1;   boolean_t pad1:30;   natural_t len;  }
     mach_port_qos_t;
     typedef struct mach_port_options {   uint32_t flags;   mach_port_limits_t mpl;   uint64_t reserved[2];  }
    mach_port_options_t;
     typedef mach_port_options_t *mach_port_options_ptr_t;
     enum mach_port_guard_exception_codes {   kGUARD_EXC_DESTROY = 1u << 0,  kGUARD_EXC_MOD_REFS = 1u << 1,  kGUARD_EXC_SET_CONTEXT = 1u << 2,  kGUARD_EXC_UNGUARDED = 1u << 3,  kGUARD_EXC_INCORRECT_GUARD = 1u << 4 };
     typedef CFStringRef CFRunLoopMode __attribute__((swift_wrapper(struct)));
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFRunLoop * CFRunLoopRef;
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFRunLoopSource * CFRunLoopSourceRef;
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFRunLoopObserver * CFRunLoopObserverRef;
     typedef struct __attribute__((objc_bridge_mutable(NSTimer))) __CFRunLoopTimer * CFRunLoopTimerRef;
     typedef SInt32 CFRunLoopRunResult;
     enum {      kCFRunLoopRunFinished = 1,     kCFRunLoopRunStopped = 2,     kCFRunLoopRunTimedOut = 3,     kCFRunLoopRunHandledSource = 4 };
     typedef CFOptionFlags CFRunLoopActivity;
     enum {      kCFRunLoopEntry = (1UL << 0),     kCFRunLoopBeforeTimers = (1UL << 1),     kCFRunLoopBeforeSources = (1UL << 2),     kCFRunLoopBeforeWaiting = (1UL << 5),     kCFRunLoopAfterWaiting = (1UL << 6),     kCFRunLoopExit = (1UL << 7),     kCFRunLoopAllActivities = 0x0FFFFFFFU };
     extern const CFRunLoopMode kCFRunLoopDefaultMode;
     extern const CFRunLoopMode kCFRunLoopCommonModes;
     extern CFTypeID CFRunLoopGetTypeID(void);
     extern CFRunLoopRef CFRunLoopGetCurrent(void);
     extern CFRunLoopRef CFRunLoopGetMain(void);
     extern CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl);
     extern CFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl);
     extern void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFRunLoopMode mode);
     extern CFAbsoluteTime CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl, CFRunLoopMode mode);
     extern void CFRunLoopRun(void);
     extern CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);
     extern Boolean CFRunLoopIsWaiting(CFRunLoopRef rl);
     extern void CFRunLoopWakeUp(CFRunLoopRef rl);
     extern void CFRunLoopStop(CFRunLoopRef rl);
     extern void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void (^block)(void)) __attribute__((availability(macosx,introduced=10_6)));
     extern Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode);
     extern void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode);
     extern void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode);
     extern Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode);
     extern void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode);
     extern void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode);
     extern Boolean CFRunLoopContainsTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode);
     extern void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode);
     extern void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode);
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);      Boolean (*equal)(const void *info1, const void *info2);      CFHashCode (*hash)(const void *info);      void (*schedule)(void *info, CFRunLoopRef rl, CFRunLoopMode mode);      void (*cancel)(void *info, CFRunLoopRef rl, CFRunLoopMode mode);      void (*perform)(void *info);  }
     CFRunLoopSourceContext;
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);      Boolean (*equal)(const void *info1, const void *info2);      CFHashCode (*hash)(const void *info);      mach_port_t (*getPort)(void *info);      void * (*perform)(void *msg, CFIndex size, CFAllocatorRef allocator, void *info);  }
     CFRunLoopSourceContext1;
     extern CFTypeID CFRunLoopSourceGetTypeID(void);
     extern CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context);
     extern CFIndex CFRunLoopSourceGetOrder(CFRunLoopSourceRef source);
     extern void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source);
     extern Boolean CFRunLoopSourceIsValid(CFRunLoopSourceRef source);
     extern void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context);
     extern void CFRunLoopSourceSignal(CFRunLoopSourceRef source);
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);  }
     CFRunLoopObserverContext;
     typedef void (*CFRunLoopObserverCallBack)(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info);
     extern CFTypeID CFRunLoopObserverGetTypeID(void);
     extern CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context);
     extern CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void (^block) (CFRunLoopObserverRef observer, CFRunLoopActivity activity)) __attribute__((availability(macosx,introduced=10_7)));
     extern CFOptionFlags CFRunLoopObserverGetActivities(CFRunLoopObserverRef observer);
     extern Boolean CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef observer);
     extern CFIndex CFRunLoopObserverGetOrder(CFRunLoopObserverRef observer);
     extern void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer);
     extern Boolean CFRunLoopObserverIsValid(CFRunLoopObserverRef observer);
     extern void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context);
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);  }
     CFRunLoopTimerContext;
     typedef void (*CFRunLoopTimerCallBack)(CFRunLoopTimerRef timer, void *info);
     extern CFTypeID CFRunLoopTimerGetTypeID(void);
     extern CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context);
     extern CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void (^block) (CFRunLoopTimerRef timer)) __attribute__((availability(macosx,introduced=10_7)));
     extern CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer);
     extern void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate);
     extern CFTimeInterval CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer);
     extern Boolean CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef timer);
     extern CFIndex CFRunLoopTimerGetOrder(CFRunLoopTimerRef timer);
     extern void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer);
     extern Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer);
     extern void CFRunLoopTimerGetContext(CFRunLoopTimerRef timer, CFRunLoopTimerContext *context);
     extern CFTimeInterval CFRunLoopTimerGetTolerance(CFRunLoopTimerRef timer) __attribute__((availability(macosx,introduced=10_9)));
     extern void CFRunLoopTimerSetTolerance(CFRunLoopTimerRef timer, CFTimeInterval tolerance) __attribute__((availability(macosx,introduced=10_9)));
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFSocket * CFSocketRef;
     typedef CFIndex CFSocketError;
     enum {      kCFSocketSuccess = 0,     kCFSocketError = -1L,     kCFSocketTimeout = -2L };
     typedef struct {      SInt32 protocolFamily;      SInt32 socketType;      SInt32 protocol;      CFDataRef address;  }
     CFSocketSignature;
     typedef CFOptionFlags CFSocketCallBackType;
     enum {      kCFSocketNoCallBack = 0,     kCFSocketReadCallBack = 1,     kCFSocketAcceptCallBack = 2,     kCFSocketDataCallBack = 3,     kCFSocketConnectCallBack = 4,     kCFSocketWriteCallBack = 8 };
     enum {      kCFSocketAutomaticallyReenableReadCallBack = 1,     kCFSocketAutomaticallyReenableAcceptCallBack = 2,     kCFSocketAutomaticallyReenableDataCallBack = 3,     kCFSocketAutomaticallyReenableWriteCallBack = 8,     kCFSocketLeaveErrors __attribute__((availability(macosx,introduced=10_5))) = 64,     kCFSocketCloseOnInvalidate = 128 };
     typedef void (*CFSocketCallBack)(CFSocketRef s, CFSocketCallBackType type, CFDataRef address, const void *data, void *info);
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);  }
     CFSocketContext;
     typedef int CFSocketNativeHandle;
     extern CFTypeID CFSocketGetTypeID(void);
     extern CFSocketRef CFSocketCreate(CFAllocatorRef allocator, SInt32 protocolFamily, SInt32 socketType, SInt32 protocol, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
     extern CFSocketRef CFSocketCreateWithNative(CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
     extern CFSocketRef CFSocketCreateWithSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
     extern CFSocketRef CFSocketCreateConnectedToSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context, CFTimeInterval timeout);
     extern CFSocketError CFSocketSetAddress(CFSocketRef s, CFDataRef address);
     extern CFSocketError CFSocketConnectToAddress(CFSocketRef s, CFDataRef address, CFTimeInterval timeout);
     extern void CFSocketInvalidate(CFSocketRef s);
     extern Boolean CFSocketIsValid(CFSocketRef s);
     extern CFDataRef CFSocketCopyAddress(CFSocketRef s);
     extern CFDataRef CFSocketCopyPeerAddress(CFSocketRef s);
     extern void CFSocketGetContext(CFSocketRef s, CFSocketContext *context);
     extern CFSocketNativeHandle CFSocketGetNative(CFSocketRef s);
     extern CFRunLoopSourceRef CFSocketCreateRunLoopSource(CFAllocatorRef allocator, CFSocketRef s, CFIndex order);
     extern CFOptionFlags CFSocketGetSocketFlags(CFSocketRef s);
     extern void CFSocketSetSocketFlags(CFSocketRef s, CFOptionFlags flags);
     extern void CFSocketDisableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);
     extern void CFSocketEnableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);
     extern CFSocketError CFSocketSendData(CFSocketRef s, CFDataRef address, CFDataRef data, CFTimeInterval timeout);
     extern CFSocketError CFSocketRegisterValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef value);
     extern CFSocketError CFSocketCopyRegisteredValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef *value, CFDataRef *nameServerAddress);
     extern CFSocketError CFSocketRegisterSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, const CFSocketSignature *signature);
     extern CFSocketError CFSocketCopyRegisteredSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFSocketSignature *signature, CFDataRef *nameServerAddress);
     extern CFSocketError CFSocketUnregister(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name);
     extern void CFSocketSetDefaultNameRegistryPortNumber(UInt16 port);
     extern UInt16 CFSocketGetDefaultNameRegistryPortNumber(void);
     extern const CFStringRef kCFSocketCommandKey;
     extern const CFStringRef kCFSocketNameKey;
     extern const CFStringRef kCFSocketValueKey;
     extern const CFStringRef kCFSocketResultKey;
     extern const CFStringRef kCFSocketErrorKey;
     extern const CFStringRef kCFSocketRegisterCommand;
     extern const CFStringRef kCFSocketRetrieveCommand;
     struct accessx_descriptor {   unsigned int ad_name_offset;   int ad_flags;   int ad_pad[2];  };
     int getattrlistbulk(int, void *, void *, size_t, uint64_t) __attribute__((availability(macosx,introduced=10.10)));
     int faccessat(int, const char *, int, int) __attribute__((availability(macosx,introduced=10.10)));
     int fchownat(int, const char *, uid_t, gid_t, int) __attribute__((availability(macosx,introduced=10.10)));
     int linkat(int, const char *, int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
     ssize_t readlinkat(int, const char *, char *, size_t) __attribute__((availability(macosx,introduced=10.10)));
     int symlinkat(const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));
     int unlinkat(int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
     int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(macosx,introduced=10.10)));
     void _exit(int) __attribute__((noreturn));
     int access(const char *, int);
     unsigned int   alarm(unsigned int);
     int chdir(const char *);
     int chown(const char *, uid_t, gid_t);
     int close(int) __asm("_" "close" );
     int dup(int);
     int dup2(int, int);
     int execl(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int execle(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int execlp(const char * __file, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int setregid(gid_t, gid_t) __asm("_" "setregid" );
     int setreuid(uid_t, uid_t) __asm("_" "setreuid" );
     void swab(const void * restrict, void * restrict, ssize_t);
     void sync(void);
     int truncate(const char *, off_t);
     useconds_t ualarm(useconds_t, useconds_t);
     int usleep(useconds_t) __asm("_" "usleep" );
     pid_t vfork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int fsync(int) __asm("_" "fsync" );
     int ftruncate(int, off_t);
     int getlogin_r(char *, size_t);
     int fchown(int, uid_t, gid_t);
     int gethostname(char *, size_t);
     ssize_t readlink(const char * restrict, char * restrict, size_t);
     int setegid(gid_t);
     int seteuid(uid_t);
     int symlink(const char *, const char *);
     int pselect(int, fd_set * restrict, fd_set * restrict,   fd_set * restrict, const struct timespec * restrict,   const sigset_t * restrict)   __asm("_" "pselect" "$1050")   ;
     int select(int, fd_set * restrict, fd_set * restrict,   fd_set * restrict, struct timeval * restrict)   __asm("_" "select" "$1050")   ;
     typedef __darwin_uuid_t uuid_t;
     void _Exit(int) __attribute__((noreturn));
     int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
     int acct(const char *);
     int add_profil(char *, size_t, unsigned long, unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     void endusershell(void);
     int execvP(const char * __file, const char * __searchpath, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     char *fflagstostr(unsigned long);
     int getdomainname(char *, int);
     int getgrouplist(const char *, int, int *, int *);
     int gethostuuid(uuid_t, const struct timespec *) __attribute__((availability(macosx,introduced=10.5)));
     mode_t getmode(const void *, mode_t);
     int getpeereid(int, uid_t *, gid_t *);
     int getsgroups_np(int *, uuid_t);
     char *getusershell(void);
     int getwgroups_np(int *, uuid_t);
     int initgroups(const char *, int);
     int issetugid(void);
     char *mkdtemp(char *);
     int mknod(const char *, mode_t, dev_t);
     int mkpath_np(const char *path, mode_t omode) __attribute__((availability(macosx,introduced=10.8)));
     int mkpathat_np(int dfd, const char *path, mode_t omode)   __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))   __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     int mkstemp(char *);
     int mkstemps(char *, int);
     char *mktemp(char *);
     int mkostemp(char *path, int oflags)   __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))   __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     int mkostemps(char *path, int slen, int oflags)   __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))   __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)   __attribute__((availability(macosx,unavailable))) __attribute__((availability(ios,introduced=10.0)))   __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
     int nfssvc(int, void *);
     int profil(char *, size_t, unsigned long, unsigned int);
     int pthread_setugid_np(uid_t, gid_t);
     int pthread_getugid_np( uid_t *, gid_t *);
     int reboot(int);
     int revoke(const char *);
     __attribute__((deprecated)) int rcmd(char **, int, const char *, const char *, const char *, int *);
     __attribute__((deprecated)) int rcmd_af(char **, int, const char *, const char *, const char *, int *,   int);
     __attribute__((deprecated)) int rresvport(int *);
     __attribute__((deprecated)) int rresvport_af(int *, int);
     __attribute__((deprecated)) int iruserok(unsigned long, int, const char *, const char *);
     __attribute__((deprecated)) int iruserok_sa(const void *, int, int, const char *, const char *);
     __attribute__((deprecated)) int ruserok(const char *, int, const char *, const char *);
     int setdomainname(const char *, int);
     int setgroups(int, const gid_t *);
     void sethostid(long);
     int sethostname(const char *, int);
     void setkey(const char *) __asm("_" "setkey" );
     int setlogin(const char *);
     void *setmode(const char *) __asm("_" "setmode" );
     int setrgid(gid_t);
     int setruid(uid_t);
     int setsgroups_np(int, const uuid_t);
     void setusershell(void);
     int setwgroups_np(int, const uuid_t);
     int strtofflags(char **, unsigned long *, unsigned long *);
     int swapon(const char *);
     int ttyslot(void);
     int undelete(const char *);
     int unwhiteout(const char *);
     void *valloc(size_t);
     __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable))) __attribute__((availability(ios,deprecated=10.0,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."))) __attribute__((availability(macosx,deprecated=10.12,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."))) int syscall(int, ...);
     extern char *suboptarg;
     int getsubopt(char **, char * const *, char **);
     int fgetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
     int fsetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
     int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
     int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
     int exchangedata(const char*,const char*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     struct fssearchblock;
     struct searchstate;
     int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
     int fsctl(const char *,unsigned long,void*,unsigned int);
     int ffsctl(int,unsigned long,void*,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
     int fsync_volume_np(int, int) __attribute__((availability(macosx,introduced=10.8)));
     int sync_volume_np(const char *, int) __attribute__((availability(macosx,introduced=10.8)));
     extern int optreset;
     struct flock {   off_t l_start;   off_t l_len;   pid_t l_pid;   short l_type;   short l_whence;  };
     struct flocktimeout {   struct flock fl;   struct timespec timeout;  };
     struct radvisory {         off_t ra_offset;         int ra_count;  };
     typedef struct fcodeblobs {   void *f_cd_hash;   size_t f_hash_size;   void *f_cd_buffer;   size_t f_cd_size;   unsigned int *f_out_size;   int f_arch;   int __padding;  }
     fcodeblobs_t;
     typedef struct fsignatures {   off_t fs_file_start;   void *fs_blob_start;   size_t fs_blob_size;  }
     fsignatures_t;
     typedef struct fchecklv {   off_t lv_file_start;   size_t lv_error_message_size;   void *lv_error_message;  }
     fchecklv_t;
     typedef struct fstore {   unsigned int fst_flags;   int fst_posmode;   off_t fst_offset;   off_t fst_length;   off_t fst_bytesalloc;  }
     fstore_t;
     typedef struct fpunchhole {   unsigned int fp_flags;   unsigned int reserved;   off_t fp_offset;   off_t fp_length;  }
     fpunchhole_t;
     typedef struct ftrimactivefile {   off_t fta_offset;   off_t fta_length;  }
     ftrimactivefile_t;
     typedef struct fbootstraptransfer {    off_t fbt_offset;    size_t fbt_length;    void *fbt_buffer;  }
     fbootstraptransfer_t;
     struct log2phys {   unsigned int l2p_flags;   off_t l2p_contigbytes;   off_t l2p_devoffset;  };
     struct _filesec;
     typedef struct _filesec *filesec_t;
     typedef enum {   FILESEC_OWNER = 1,  FILESEC_GROUP = 2,  FILESEC_UUID = 3,  FILESEC_MODE = 4,  FILESEC_ACL = 5,  FILESEC_GRPUUID = 6,  FILESEC_ACL_RAW = 100,  FILESEC_ACL_ALLOCSIZE = 101 }
     filesec_property_t;
     int open(const char *, int, ...) __asm("_" "open" );
     int openat(int, const char *, int, ...) __asm("_" "openat" ) __attribute__((availability(macosx,introduced=10.10)));
     int creat(const char *, mode_t) __asm("_" "creat" );
     int fcntl(int, int, ...) __asm("_" "fcntl" );
     int openx_np(const char *, int, filesec_t);
     int open_dprotected_np ( const char *, int, int, int, ...);
     int flock(int, int);
     filesec_t filesec_init(void);
     filesec_t filesec_dup(filesec_t);
     void filesec_free(filesec_t);
     int filesec_get_property(filesec_t, filesec_property_t, void *);
     int filesec_query_property(filesec_t, filesec_property_t, int *);
     int filesec_set_property(filesec_t, filesec_property_t, const void *);
     int filesec_unset_property(filesec_t, filesec_property_t) __attribute__((availability(macosx,introduced=10.6)));
     typedef void (*os_function_t)(void *_Nullable);
     typedef void (^os_block_t)(void);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((__visibility__("default"))) __attribute__((__availability__(swift, unavailable, message="Can't be used with ARC"))) void* os_retain(void *object);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((__visibility__("default"))) void __attribute__((__availability__(swift, unavailable, message="Can't be used with ARC"))) os_release(void *object);
     typedef void (*dispatch_function_t)(void *_Nullable);
     struct time_value {   integer_t seconds;   integer_t microseconds;  };
     typedef struct time_value time_value_t;
     typedef int alarm_type_t;
     typedef int sleep_type_t;
     typedef int clock_id_t;
     typedef int clock_flavor_t;
     typedef int *clock_attr_t;
     typedef int clock_res_t;
     struct mach_timespec {   unsigned int tv_sec;   clock_res_t tv_nsec;  };
     typedef struct mach_timespec mach_timespec_t;
     struct timespec;
     typedef uint64_t dispatch_time_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_time_t dispatch_walltime(const struct timespec *_Nullable when, int64_t delta);
     typedef union {   struct _os_object_s *_os_obj;   struct dispatch_object_s *_do;   struct dispatch_continuation_s *_dc;   struct dispatch_queue_s *_dq;   struct dispatch_queue_attr_s *_dqa;   struct dispatch_group_s *_dg;   struct dispatch_source_s *_ds;   struct dispatch_mach_s *_dm;   struct dispatch_mach_msg_s *_dmsg;   struct dispatch_timer_aggregate_s *_dta;   struct dispatch_source_attr_s *_dsa;   struct dispatch_semaphore_s *_dsema;   struct dispatch_data_s *_ddata;   struct dispatch_io_s *_dchannel;   struct dispatch_operation_s *_doperation;   struct dispatch_disk_s *_ddisk;  }
     dispatch_object_t __attribute__((__transparent_union__));
     typedef void (^dispatch_block_t)(void);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) __attribute__((__availability__(swift, unavailable, message="Can't be used with ARC"))) void dispatch_retain(dispatch_object_t object);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) __attribute__((__availability__(swift, unavailable, message="Can't be used with ARC"))) void dispatch_release(dispatch_object_t object);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__pure__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) void *_Nullable dispatch_get_context(dispatch_object_t object);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nothrow__)) void dispatch_set_context(dispatch_object_t object, void *_Nullable context);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nothrow__)) void dispatch_set_finalizer_f(dispatch_object_t object,   dispatch_function_t _Nullable finalizer);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_activate(dispatch_object_t object);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_suspend(dispatch_object_t object);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_resume(dispatch_object_t object);
     __attribute__((__unavailable__)) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) long dispatch_wait(void *object, dispatch_time_t timeout);
     __attribute__((__unavailable__)) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_notify(void *object, dispatch_object_t queue,   dispatch_block_t notification_block);
     __attribute__((__unavailable__)) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_cancel(void *object);
     __attribute__((__unavailable__)) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) long dispatch_testcancel(void *object);
     __attribute__((availability(macosx,introduced=10.6,deprecated=10.9))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nothrow__)) __attribute__((__format__(printf,2,3))) void dispatch_debug(dispatch_object_t object, const char *message, ...);
     __attribute__((availability(macosx,introduced=10.6,deprecated=10.9))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nothrow__)) __attribute__((__format__(printf,2,0))) void dispatch_debugv(dispatch_object_t object, const char *message, va_list ap);
     enum {  QOS_CLASS_USER_INTERACTIVE __attribute__((availability(macosx,introduced=10.10))) = 0x21, QOS_CLASS_USER_INITIATED __attribute__((availability(macosx,introduced=10.10))) = 0x19, QOS_CLASS_DEFAULT __attribute__((availability(macosx,introduced=10.10))) = 0x15, QOS_CLASS_UTILITY __attribute__((availability(macosx,introduced=10.10))) = 0x11, QOS_CLASS_BACKGROUND __attribute__((availability(macosx,introduced=10.10))) = 0x09, QOS_CLASS_UNSPECIFIED __attribute__((availability(macosx,introduced=10.10))) = 0x00, };
     typedef unsigned int qos_class_t;
     __attribute__((availability(macosx,introduced=10.10))) qos_class_t qos_class_self(void);
     __attribute__((availability(macosx,introduced=10.10))) qos_class_t qos_class_main(void);
     typedef struct dispatch_queue_s *dispatch_queue_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_async_f(dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_sync(dispatch_queue_t queue, __attribute__((__noescape__)) dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_sync_f(dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_apply(size_t iterations, dispatch_queue_t queue,   __attribute__((__noescape__)) void (^block)(size_t));
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_apply_f(size_t iterations, dispatch_queue_t queue,  void *_Nullable context,  void (*work)(void *_Nullable, size_t));
     __attribute__((availability(macosx,introduced=10.6,deprecated=10.9))) extern __attribute__((visibility("default"))) __attribute__((__pure__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_queue_t dispatch_get_current_queue(void);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) struct dispatch_queue_s _dispatch_main_q;
     static __inline__ __attribute__((__always_inline__)) __attribute__((__const__)) __attribute__((__nothrow__)) dispatch_queue_t dispatch_get_main_queue(void) {   return (&(_dispatch_main_q));  }
     typedef long dispatch_queue_priority_t;
     typedef qos_class_t dispatch_qos_class_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__const__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_queue_t dispatch_get_global_queue(long identifier, unsigned long flags);
     typedef struct dispatch_queue_attr_s *dispatch_queue_attr_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent;
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(   dispatch_queue_attr_t _Nullable attr);
     enum {  DISPATCH_AUTORELEASE_FREQUENCY_INHERIT __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 1, DISPATCH_AUTORELEASE_FREQUENCY_NEVER __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 2, };
     typedef unsigned long dispatch_autorelease_frequency_t;
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(   dispatch_queue_attr_t _Nullable attr,   dispatch_autorelease_frequency_t frequency);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t _Nullable attr,   dispatch_qos_class_t qos_class, int relative_priority);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_queue_t dispatch_queue_create_with_target(const char *_Nullable label,  dispatch_queue_attr_t _Nullable attr, dispatch_queue_t _Nullable target)  __asm__("_" "dispatch_queue_create_with_target" "$V2");
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_queue_t dispatch_queue_create(const char *_Nullable label,   dispatch_queue_attr_t _Nullable attr);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__pure__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) const char * dispatch_queue_get_label(dispatch_queue_t _Nullable queue);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue,   int *_Nullable relative_priority_ptr);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nothrow__)) void dispatch_set_target_queue(dispatch_object_t object,   dispatch_queue_t _Nullable queue);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void dispatch_main(void);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_after(dispatch_time_t when,  dispatch_queue_t queue,  dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_after_f(dispatch_time_t when,  dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_barrier_async_f(dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_barrier_sync(dispatch_queue_t queue,   __attribute__((__noescape__)) dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_barrier_sync_f(dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key,  void *_Nullable context, dispatch_function_t _Nullable destructor);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__pure__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) void *_Nullable dispatch_queue_get_specific(dispatch_queue_t queue, const void *key);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__pure__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) void *_Nullable dispatch_get_specific(const void *key);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) void dispatch_assert_queue(dispatch_queue_t queue)  __asm__("_" "dispatch_assert_queue" "$V2");
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) void dispatch_assert_queue_barrier(dispatch_queue_t queue);
     __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) void dispatch_assert_queue_not(dispatch_queue_t queue)  __asm__("_" "dispatch_assert_queue_not" "$V2");
     enum {  DISPATCH_BLOCK_BARRIER __attribute__((availability(macosx,introduced=10.10))) = 0x1, DISPATCH_BLOCK_DETACHED __attribute__((availability(macosx,introduced=10.10))) = 0x2, DISPATCH_BLOCK_ASSIGN_CURRENT __attribute__((availability(macosx,introduced=10.10))) = 0x4, DISPATCH_BLOCK_NO_QOS_CLASS __attribute__((availability(macosx,introduced=10.10))) = 0x8, DISPATCH_BLOCK_INHERIT_QOS_CLASS __attribute__((availability(macosx,introduced=10.10))) = 0x10, DISPATCH_BLOCK_ENFORCE_QOS_CLASS __attribute__((availability(macosx,introduced=10.10))) = 0x20, };
     typedef unsigned long dispatch_block_flags_t;
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__ns_returns_retained__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(4))) __attribute__((__ns_returns_retained__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags,   dispatch_qos_class_t qos_class, int relative_priority,   dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nothrow__)) void dispatch_block_perform(dispatch_block_flags_t flags,   __attribute__((__noescape__)) dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) long dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_block_notify(dispatch_block_t block, dispatch_queue_t queue,   dispatch_block_t notification_block);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_block_cancel(dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.10))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) long dispatch_block_testcancel(dispatch_block_t block);
     typedef int kern_return_t;
     typedef natural_t mach_msg_timeout_t;
     typedef unsigned int mach_msg_bits_t;
     typedef natural_t mach_msg_size_t;
     typedef integer_t mach_msg_id_t;
     typedef unsigned int mach_msg_priority_t;
     typedef unsigned int mach_msg_type_name_t;
     typedef unsigned int mach_msg_copy_options_t;
     typedef unsigned int mach_msg_descriptor_type_t;
     typedef struct {    natural_t pad1;    mach_msg_size_t pad2;    unsigned int pad3 : 24;    mach_msg_descriptor_type_t type : 8;  }
     mach_msg_type_descriptor_t;
     typedef struct {    mach_port_t name;    mach_msg_size_t pad1;    unsigned int pad2 : 16;    mach_msg_type_name_t disposition : 8;    mach_msg_descriptor_type_t type : 8;  }
     mach_msg_port_descriptor_t;
     typedef struct {    uint32_t address;    mach_msg_size_t size;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    unsigned int pad1: 8;    mach_msg_descriptor_type_t type: 8;  }
     mach_msg_ool_descriptor32_t;
     typedef struct {    uint64_t address;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    unsigned int pad1: 8;    mach_msg_descriptor_type_t type: 8;    mach_msg_size_t size;  }
     mach_msg_ool_descriptor64_t;
     typedef struct {    void* address;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    unsigned int pad1: 8;    mach_msg_descriptor_type_t type: 8;    mach_msg_size_t size;  }
     mach_msg_ool_descriptor_t;
     typedef struct {    uint32_t address;    mach_msg_size_t count;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    mach_msg_type_name_t disposition : 8;    mach_msg_descriptor_type_t type : 8;  }
     mach_msg_ool_ports_descriptor32_t;
     typedef struct {    uint64_t address;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    mach_msg_type_name_t disposition : 8;    mach_msg_descriptor_type_t type : 8;    mach_msg_size_t count;  }
     mach_msg_ool_ports_descriptor64_t;
     typedef struct {    void* address;    boolean_t deallocate: 8;    mach_msg_copy_options_t copy: 8;    mach_msg_type_name_t disposition : 8;    mach_msg_descriptor_type_t type : 8;    mach_msg_size_t count;  }
     mach_msg_ool_ports_descriptor_t;
     typedef union {    mach_msg_port_descriptor_t port;    mach_msg_ool_descriptor_t out_of_line;    mach_msg_ool_ports_descriptor_t ool_ports;    mach_msg_type_descriptor_t type;  }
     mach_msg_descriptor_t;
     typedef struct {          mach_msg_size_t msgh_descriptor_count;  }
     mach_msg_body_t;
     typedef struct {    mach_msg_bits_t msgh_bits;    mach_msg_size_t msgh_size;    mach_port_t msgh_remote_port;    mach_port_t msgh_local_port;    mach_port_name_t msgh_voucher_port;    mach_msg_id_t msgh_id;  }
     mach_msg_header_t;
     typedef struct {          mach_msg_header_t header;          mach_msg_body_t body;  }
     mach_msg_base_t;
     typedef unsigned int mach_msg_trailer_type_t;
     typedef unsigned int mach_msg_trailer_size_t;
     typedef char *mach_msg_trailer_info_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;  }
     mach_msg_trailer_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;    mach_port_seqno_t msgh_seqno;  }
     mach_msg_seqno_trailer_t;
     typedef struct {    unsigned int val[2];  }
     security_token_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;    mach_port_seqno_t msgh_seqno;    security_token_t msgh_sender;  }
     mach_msg_security_trailer_t;
     typedef struct {    unsigned int val[8];  }
     audit_token_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;    mach_port_seqno_t msgh_seqno;    security_token_t msgh_sender;    audit_token_t msgh_audit;  }
     mach_msg_audit_trailer_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;    mach_port_seqno_t msgh_seqno;    security_token_t msgh_sender;    audit_token_t msgh_audit;    mach_port_context_t msgh_context;  }
     mach_msg_context_trailer_t;
     typedef struct {    mach_port_name_t sender;  }
     msg_labels_t;
     typedef struct {    mach_msg_trailer_type_t msgh_trailer_type;    mach_msg_trailer_size_t msgh_trailer_size;    mach_port_seqno_t msgh_seqno;    security_token_t msgh_sender;    audit_token_t msgh_audit;    mach_port_context_t msgh_context;    int msgh_ad;    msg_labels_t msgh_labels;  }
     mach_msg_mac_trailer_t;
     typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
     typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;
     extern security_token_t KERNEL_SECURITY_TOKEN;
     extern audit_token_t KERNEL_AUDIT_TOKEN;
     typedef integer_t mach_msg_options_t;
     typedef struct {    mach_msg_header_t header;  }
     mach_msg_empty_send_t;
     typedef struct {    mach_msg_header_t header;    mach_msg_trailer_t trailer;  }
     mach_msg_empty_rcv_t;
     typedef union {    mach_msg_empty_send_t send;    mach_msg_empty_rcv_t rcv;  }
     mach_msg_empty_t;
     typedef natural_t mach_msg_type_size_t;
     typedef natural_t mach_msg_type_number_t;
     typedef integer_t mach_msg_option_t;
     typedef kern_return_t mach_msg_return_t;
     __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable))) extern mach_msg_return_t mach_msg_overwrite(      mach_msg_header_t *msg,      mach_msg_option_t option,      mach_msg_size_t send_size,      mach_msg_size_t rcv_size,      mach_port_name_t rcv_name,      mach_msg_timeout_t timeout,      mach_port_name_t notify,      mach_msg_header_t *rcv_msg,      mach_msg_size_t rcv_limit);
     __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable))) extern mach_msg_return_t mach_msg(      mach_msg_header_t *msg,      mach_msg_option_t option,      mach_msg_size_t send_size,      mach_msg_size_t rcv_size,      mach_port_name_t rcv_name,      mach_msg_timeout_t timeout,      mach_port_name_t notify);
     __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable))) extern kern_return_t mach_voucher_deallocate(      mach_port_name_t voucher);
     typedef struct dispatch_source_s *dispatch_source_t;
    ;
     typedef const struct dispatch_source_type_s *dispatch_source_type_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_data_add;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_data_or;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_mach_send;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_mach_recv;
     __attribute__((availability(macosx,introduced=10.9))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_memorypressure;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_proc;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_read;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_signal;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_timer;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_vnode;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) const struct dispatch_source_type_s _dispatch_source_type_write;
     typedef unsigned long dispatch_source_mach_send_flags_t;
     typedef unsigned long dispatch_source_memorypressure_flags_t;
     typedef unsigned long dispatch_source_proc_flags_t;
     typedef unsigned long dispatch_source_vnode_flags_t;
     typedef unsigned long dispatch_source_timer_flags_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_source_t dispatch_source_create(dispatch_source_type_t type,  uintptr_t handle,  unsigned long mask,  dispatch_queue_t _Nullable queue);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_event_handler(dispatch_source_t source,  dispatch_block_t _Nullable handler);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_event_handler_f(dispatch_source_t source,  dispatch_function_t _Nullable handler);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_cancel_handler(dispatch_source_t source,  dispatch_block_t _Nullable handler);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_cancel_handler_f(dispatch_source_t source,  dispatch_function_t _Nullable handler);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_source_cancel(dispatch_source_t source);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) long dispatch_source_testcancel(dispatch_source_t source);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) uintptr_t dispatch_source_get_handle(dispatch_source_t source);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) unsigned long dispatch_source_get_mask(dispatch_source_t source);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__pure__)) __attribute__((__nothrow__)) unsigned long dispatch_source_get_data(dispatch_source_t source);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_source_merge_data(dispatch_source_t source, unsigned long value);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_source_set_timer(dispatch_source_t source,  dispatch_time_t start,  uint64_t interval,  uint64_t leeway);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_registration_handler(dispatch_source_t source,  dispatch_block_t _Nullable handler);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_source_set_registration_handler_f(dispatch_source_t source,  dispatch_function_t _Nullable handler);
     typedef struct dispatch_group_s *dispatch_group_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_group_t dispatch_group_create(void);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_group_async(dispatch_group_t group,  dispatch_queue_t queue,  dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(2))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_group_async_f(dispatch_group_t group,  dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) long dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_group_notify(dispatch_group_t group,  dispatch_queue_t queue,  dispatch_block_t block);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(2))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_group_notify_f(dispatch_group_t group,  dispatch_queue_t queue,  void *_Nullable context,  dispatch_function_t work);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_group_enter(dispatch_group_t group);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_group_leave(dispatch_group_t group);
     typedef struct dispatch_semaphore_s *dispatch_semaphore_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_semaphore_t dispatch_semaphore_create(long value);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout);
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) long dispatch_semaphore_signal(dispatch_semaphore_t dsema);
     typedef long dispatch_once_t;
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_once(dispatch_once_t *predicate,   __attribute__((__noescape__)) dispatch_block_t block);
     static __inline__ __attribute__((__always_inline__)) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void _dispatch_once(dispatch_once_t *predicate,   __attribute__((__noescape__)) dispatch_block_t block) {   if (__builtin_expect((*predicate), (~0l)) != ~0l) {   dispatch_once(predicate, block);  }  else {   __asm__ __volatile__("" ::: "memory");  }   __builtin_assume(*predicate == ~0l);  }
     __attribute__((availability(macosx,introduced=10.6))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void dispatch_once_f(dispatch_once_t *predicate, void *_Nullable context,   dispatch_function_t function);
     static __inline__ __attribute__((__always_inline__)) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nothrow__)) void _dispatch_once_f(dispatch_once_t *predicate, void *_Nullable context,   dispatch_function_t function) {   if (__builtin_expect((*predicate), (~0l)) != ~0l) {   dispatch_once_f(predicate, context, function);  }  else {   __asm__ __volatile__("" ::: "memory");  }   __builtin_assume(*predicate == ~0l);  }
     typedef struct dispatch_data_s *dispatch_data_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) struct dispatch_data_s _dispatch_data_empty;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) const dispatch_block_t _dispatch_data_destructor_free;
     __attribute__((availability(macosx,introduced=10.9))) extern __attribute__((visibility("default"))) const dispatch_block_t _dispatch_data_destructor_munmap;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_data_t dispatch_data_create(const void *buffer,  size_t size,  dispatch_queue_t _Nullable queue,  dispatch_block_t _Nullable destructor);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__pure__)) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) size_t dispatch_data_get_size(dispatch_data_t data);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_data_t dispatch_data_create_map(dispatch_data_t data,  const void *_Nullable *_Nullable buffer_ptr,  size_t *_Nullable size_ptr);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data,  size_t offset,  size_t length);
     typedef _Bool (^dispatch_data_applier_t)(dispatch_data_t region,  size_t offset,  const void *buffer,  size_t size);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) _Bool dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_data_t dispatch_data_copy_region(dispatch_data_t data,  size_t location,  size_t *offset_ptr);
     typedef int dispatch_fd_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(3))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_read(dispatch_fd_t fd,  size_t length,  dispatch_queue_t queue,  void (^handler)(dispatch_data_t data, int error));
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__nonnull__(3))) __attribute__((__nonnull__(4))) __attribute__((__nothrow__)) void dispatch_write(dispatch_fd_t fd,  dispatch_data_t data,  dispatch_queue_t queue,  void (^handler)(dispatch_data_t _Nullable data, int error));
     typedef struct dispatch_io_s *dispatch_io_t;
     typedef unsigned long dispatch_io_type_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_io_t dispatch_io_create(dispatch_io_type_t type,  dispatch_fd_t fd,  dispatch_queue_t queue,  void (^cleanup_handler)(int error));
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_io_t dispatch_io_create_with_path(dispatch_io_type_t type,  const char *path, int oflag, mode_t mode,  dispatch_queue_t queue,  void (^cleanup_handler)(int error));
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(2))) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_io_t dispatch_io_create_with_io(dispatch_io_type_t type,  dispatch_io_t io,  dispatch_queue_t queue,  void (^cleanup_handler)(int error));
     typedef void (^dispatch_io_handler_t)(_Bool done, dispatch_data_t _Nullable data,   int error);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(4))) __attribute__((__nonnull__(5))) __attribute__((__nothrow__)) void dispatch_io_read(dispatch_io_t channel,  off_t offset,  size_t length,  dispatch_queue_t queue,  dispatch_io_handler_t io_handler);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nonnull__(3))) __attribute__((__nonnull__(4))) __attribute__((__nonnull__(5))) __attribute__((__nothrow__)) void dispatch_io_write(dispatch_io_t channel,  off_t offset,  dispatch_data_t data,  dispatch_queue_t queue,  dispatch_io_handler_t io_handler);
     typedef unsigned long dispatch_io_close_flags_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__nothrow__)) void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__)) __attribute__((__warn_unused_result__)) __attribute__((__nothrow__)) dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_io_set_high_water(dispatch_io_t channel, size_t high_water);
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water);
     typedef unsigned long dispatch_io_interval_flags_t;
     __attribute__((availability(macosx,introduced=10.7))) extern __attribute__((visibility("default"))) __attribute__((__nonnull__(1))) __attribute__((__nothrow__)) void dispatch_io_set_interval(dispatch_io_t channel,  uint64_t interval,  dispatch_io_interval_flags_t flags);
     typedef CFStringRef CFStreamPropertyKey __attribute__((swift_wrapper(struct)));
     typedef CFIndex CFStreamStatus;
     enum {      kCFStreamStatusNotOpen = 0,     kCFStreamStatusOpening,     kCFStreamStatusOpen,     kCFStreamStatusReading,     kCFStreamStatusWriting,     kCFStreamStatusAtEnd,     kCFStreamStatusClosed,     kCFStreamStatusError };
     typedef CFOptionFlags CFStreamEventType;
     enum {      kCFStreamEventNone = 0,     kCFStreamEventOpenCompleted = 1,     kCFStreamEventHasBytesAvailable = 2,     kCFStreamEventCanAcceptBytes = 4,     kCFStreamEventErrorOccurred = 8,     kCFStreamEventEndEncountered = 16 };
     typedef struct {      CFIndex version;      void *info;      void *(*retain)(void *info);      void (*release)(void *info);      CFStringRef (*copyDescription)(void *info);  }
     CFStreamClientContext;
     typedef struct __attribute__((objc_bridge_mutable(NSInputStream))) __CFReadStream * CFReadStreamRef;
     typedef struct __attribute__((objc_bridge_mutable(NSOutputStream))) __CFWriteStream * CFWriteStreamRef;
     typedef void (*CFReadStreamClientCallBack)(CFReadStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);
     typedef void (*CFWriteStreamClientCallBack)(CFWriteStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);
     extern CFTypeID CFReadStreamGetTypeID(void);
     extern CFTypeID CFWriteStreamGetTypeID(void);
     extern const CFStreamPropertyKey kCFStreamPropertyDataWritten;
     extern CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
     extern CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8 *buffer, CFIndex bufferCapacity);
     extern CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator);
     extern CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
     extern CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
     extern void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize);
     extern const CFStreamPropertyKey kCFStreamPropertyAppendToFile;
     extern const CFStreamPropertyKey kCFStreamPropertyFileCurrentOffset;
     extern const CFStreamPropertyKey kCFStreamPropertySocketNativeHandle;
     extern const CFStreamPropertyKey kCFStreamPropertySocketRemoteHostName;
     extern const CFStreamPropertyKey kCFStreamPropertySocketRemotePortNumber;
     extern void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);
     extern void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);
     extern void CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef alloc, const CFSocketSignature *signature, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);
     extern CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream);
     extern CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream);
     extern CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream) __attribute__((availability(macosx,introduced=10_5)));
     extern CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream) __attribute__((availability(macosx,introduced=10_5)));
     extern Boolean CFReadStreamOpen(CFReadStreamRef stream);
     extern Boolean CFWriteStreamOpen(CFWriteStreamRef stream);
     extern void CFReadStreamClose(CFReadStreamRef stream);
     extern void CFWriteStreamClose(CFWriteStreamRef stream);
     extern Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream);
     extern CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
     extern const UInt8 *CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead);
     extern Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream);
     extern CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength);
     extern CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName);
     extern CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName);
     extern Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue);
     extern Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue);
     extern Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext);
     extern Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext);
     extern void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
     extern void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
     extern void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
     extern void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
     extern void CFReadStreamSetDispatchQueue(CFReadStreamRef stream, dispatch_queue_t q) __attribute__((availability(macosx,introduced=10_9)));
     extern void CFWriteStreamSetDispatchQueue(CFWriteStreamRef stream, dispatch_queue_t q) __attribute__((availability(macosx,introduced=10_9)));
     extern dispatch_queue_t CFReadStreamCopyDispatchQueue(CFReadStreamRef stream) __attribute__((availability(macosx,introduced=10_9)));
     extern dispatch_queue_t CFWriteStreamCopyDispatchQueue(CFWriteStreamRef stream) __attribute__((availability(macosx,introduced=10_9)));
     typedef CFIndex CFStreamErrorDomain;
     enum {      kCFStreamErrorDomainCustom = -1L,     kCFStreamErrorDomainPOSIX = 1,     kCFStreamErrorDomainMacOSStatus };
     typedef struct {      CFIndex domain;      SInt32 error;  }
     CFStreamError;
     extern CFStreamError CFReadStreamGetError(CFReadStreamRef stream);
     extern CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream);
     typedef CFOptionFlags CFPropertyListMutabilityOptions;
     enum {      kCFPropertyListImmutable = 0,     kCFPropertyListMutableContainers,     kCFPropertyListMutableContainersAndLeaves };
     extern CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString) __attribute__((availability(macosx,introduced=10_0,deprecated=10_10,message="" "Use CFPropertyListCreateWithData instead.")));
     extern CFDataRef CFPropertyListCreateXMLData(CFAllocatorRef allocator, CFPropertyListRef propertyList) __attribute__((availability(macosx,introduced=10_0,deprecated=10_10,message="" "Use CFPropertyListCreateData instead.")));
     extern CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption);
     typedef CFIndex CFPropertyListFormat;
     enum {      kCFPropertyListOpenStepFormat = 1,     kCFPropertyListXMLFormat_v1_0 = 100,     kCFPropertyListBinaryFormat_v1_0 = 200 };
     extern Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format);
     extern CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString) __attribute__((availability(macosx,introduced=10_2,deprecated=10_10,message="" "Use CFPropertyListWrite instead.")));
     extern CFPropertyListRef CFPropertyListCreateFromStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags mutabilityOption, CFPropertyListFormat *format, CFStringRef *errorString) __attribute__((availability(macosx,introduced=10_2,deprecated=10_10,message="" "Use CFPropertyListCreateWithStream instead.")));
     enum {      kCFPropertyListReadCorruptError = 3840,     kCFPropertyListReadUnknownVersionError = 3841,     kCFPropertyListReadStreamError = 3842,     kCFPropertyListWriteStreamError = 3851, }
     __attribute__((availability(macosx,introduced=10_6)));
     extern CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error) __attribute__((availability(macosx,introduced=10_6)));
     extern CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error) __attribute__((availability(macosx,introduced=10_6)));
     extern CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error) __attribute__((availability(macosx,introduced=10_6)));
     extern CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error) __attribute__((availability(macosx,introduced=10_6)));
     typedef const void * (*CFSetRetainCallBack)(CFAllocatorRef allocator, const void *value);
     typedef void (*CFSetReleaseCallBack)(CFAllocatorRef allocator, const void *value);
     typedef CFStringRef (*CFSetCopyDescriptionCallBack)(const void *value);
     typedef Boolean (*CFSetEqualCallBack)(const void *value1, const void *value2);
     typedef CFHashCode (*CFSetHashCallBack)(const void *value);
     typedef struct {      CFIndex version;      CFSetRetainCallBack retain;      CFSetReleaseCallBack release;      CFSetCopyDescriptionCallBack copyDescription;      CFSetEqualCallBack equal;      CFSetHashCallBack hash;  }
     CFSetCallBacks;
     extern const CFSetCallBacks kCFTypeSetCallBacks;
     extern const CFSetCallBacks kCFCopyStringSetCallBacks;
     typedef void (*CFSetApplierFunction)(const void *value, void *context);
     typedef const struct __attribute__((objc_bridge(NSSet))) __CFSet * CFSetRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableSet))) __CFSet * CFMutableSetRef;
     extern CFTypeID CFSetGetTypeID(void);
     extern CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks);
     extern CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet);
     extern CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks);
     extern CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet);
     extern CFIndex CFSetGetCount(CFSetRef theSet);
     extern CFIndex CFSetGetCountOfValue(CFSetRef theSet, const void *value);
     extern Boolean CFSetContainsValue(CFSetRef theSet, const void *value);
     extern const void *CFSetGetValue(CFSetRef theSet, const void *value);
     extern Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value);
     extern void CFSetGetValues(CFSetRef theSet, const void **values);
     extern void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction __attribute__((noescape)) applier, void *context);
     extern void CFSetAddValue(CFMutableSetRef theSet, const void *value);
     extern void CFSetReplaceValue(CFMutableSetRef theSet, const void *value);
     extern void CFSetSetValue(CFMutableSetRef theSet, const void *value);
     extern void CFSetRemoveValue(CFMutableSetRef theSet, const void *value);
     extern void CFSetRemoveAllValues(CFMutableSetRef theSet);
     typedef CFIndex CFStringEncodings;
     enum {      kCFStringEncodingMacJapanese = 1,     kCFStringEncodingMacChineseTrad = 2,     kCFStringEncodingMacKorean = 3,     kCFStringEncodingMacArabic = 4,     kCFStringEncodingMacHebrew = 5,     kCFStringEncodingMacGreek = 6,     kCFStringEncodingMacCyrillic = 7,     kCFStringEncodingMacDevanagari = 9,     kCFStringEncodingMacGurmukhi = 10,     kCFStringEncodingMacGujarati = 11,     kCFStringEncodingMacOriya = 12,     kCFStringEncodingMacBengali = 13,     kCFStringEncodingMacTamil = 14,     kCFStringEncodingMacTelugu = 15,     kCFStringEncodingMacKannada = 16,     kCFStringEncodingMacMalayalam = 17,     kCFStringEncodingMacSinhalese = 18,     kCFStringEncodingMacBurmese = 19,     kCFStringEncodingMacKhmer = 20,     kCFStringEncodingMacThai = 21,     kCFStringEncodingMacLaotian = 22,     kCFStringEncodingMacGeorgian = 23,     kCFStringEncodingMacArmenian = 24,     kCFStringEncodingMacChineseSimp = 25,     kCFStringEncodingMacTibetan = 26,     kCFStringEncodingMacMongolian = 27,     kCFStringEncodingMacEthiopic = 28,     kCFStringEncodingMacCentralEurRoman = 29,     kCFStringEncodingMacVietnamese = 30,     kCFStringEncodingMacExtArabic = 31,     kCFStringEncodingMacSymbol = 33,     kCFStringEncodingMacDingbats = 34,     kCFStringEncodingMacTurkish = 35,     kCFStringEncodingMacCroatian = 36,     kCFStringEncodingMacIcelandic = 37,     kCFStringEncodingMacRomanian = 38,     kCFStringEncodingMacCeltic = 39,     kCFStringEncodingMacGaelic = 40,     kCFStringEncodingMacFarsi = 0x8C,     kCFStringEncodingMacUkrainian = 0x98,     kCFStringEncodingMacInuit = 0xEC,     kCFStringEncodingMacVT100 = 0xFC,     kCFStringEncodingMacHFS = 0xFF,     kCFStringEncodingISOLatin2 = 0x0202,     kCFStringEncodingISOLatin3 = 0x0203,     kCFStringEncodingISOLatin4 = 0x0204,     kCFStringEncodingISOLatinCyrillic = 0x0205,     kCFStringEncodingISOLatinArabic = 0x0206,     kCFStringEncodingISOLatinGreek = 0x0207,     kCFStringEncodingISOLatinHebrew = 0x0208,     kCFStringEncodingISOLatin5 = 0x0209,     kCFStringEncodingISOLatin6 = 0x020A,     kCFStringEncodingISOLatinThai = 0x020B,     kCFStringEncodingISOLatin7 = 0x020D,     kCFStringEncodingISOLatin8 = 0x020E,     kCFStringEncodingISOLatin9 = 0x020F,     kCFStringEncodingISOLatin10 = 0x0210,     kCFStringEncodingDOSLatinUS = 0x0400,     kCFStringEncodingDOSGreek = 0x0405,     kCFStringEncodingDOSBalticRim = 0x0406,     kCFStringEncodingDOSLatin1 = 0x0410,     kCFStringEncodingDOSGreek1 = 0x0411,     kCFStringEncodingDOSLatin2 = 0x0412,     kCFStringEncodingDOSCyrillic = 0x0413,     kCFStringEncodingDOSTurkish = 0x0414,     kCFStringEncodingDOSPortuguese = 0x0415,     kCFStringEncodingDOSIcelandic = 0x0416,     kCFStringEncodingDOSHebrew = 0x0417,     kCFStringEncodingDOSCanadianFrench = 0x0418,     kCFStringEncodingDOSArabic = 0x0419,     kCFStringEncodingDOSNordic = 0x041A,     kCFStringEncodingDOSRussian = 0x041B,     kCFStringEncodingDOSGreek2 = 0x041C,     kCFStringEncodingDOSThai = 0x041D,     kCFStringEncodingDOSJapanese = 0x0420,     kCFStringEncodingDOSChineseSimplif = 0x0421,     kCFStringEncodingDOSKorean = 0x0422,     kCFStringEncodingDOSChineseTrad = 0x0423,     kCFStringEncodingWindowsLatin2 = 0x0501,     kCFStringEncodingWindowsCyrillic = 0x0502,     kCFStringEncodingWindowsGreek = 0x0503,     kCFStringEncodingWindowsLatin5 = 0x0504,     kCFStringEncodingWindowsHebrew = 0x0505,     kCFStringEncodingWindowsArabic = 0x0506,     kCFStringEncodingWindowsBalticRim = 0x0507,     kCFStringEncodingWindowsVietnamese = 0x0508,     kCFStringEncodingWindowsKoreanJohab = 0x0510,     kCFStringEncodingANSEL = 0x0601,     kCFStringEncodingJIS_X0201_76 = 0x0620,     kCFStringEncodingJIS_X0208_83 = 0x0621,     kCFStringEncodingJIS_X0208_90 = 0x0622,     kCFStringEncodingJIS_X0212_90 = 0x0623,     kCFStringEncodingJIS_C6226_78 = 0x0624,     kCFStringEncodingShiftJIS_X0213 __attribute__((availability(macosx,introduced=10_5))) = 0x0628,     kCFStringEncodingShiftJIS_X0213_MenKuTen = 0x0629,     kCFStringEncodingGB_2312_80 = 0x0630,     kCFStringEncodingGBK_95 = 0x0631,     kCFStringEncodingGB_18030_2000 = 0x0632,     kCFStringEncodingKSC_5601_87 = 0x0640,     kCFStringEncodingKSC_5601_92_Johab = 0x0641,     kCFStringEncodingCNS_11643_92_P1 = 0x0651,     kCFStringEncodingCNS_11643_92_P2 = 0x0652,     kCFStringEncodingCNS_11643_92_P3 = 0x0653,     kCFStringEncodingISO_2022_JP = 0x0820,     kCFStringEncodingISO_2022_JP_2 = 0x0821,     kCFStringEncodingISO_2022_JP_1 = 0x0822,     kCFStringEncodingISO_2022_JP_3 = 0x0823,     kCFStringEncodingISO_2022_CN = 0x0830,     kCFStringEncodingISO_2022_CN_EXT = 0x0831,     kCFStringEncodingISO_2022_KR = 0x0840,     kCFStringEncodingEUC_JP = 0x0920,     kCFStringEncodingEUC_CN = 0x0930,     kCFStringEncodingEUC_TW = 0x0931,     kCFStringEncodingEUC_KR = 0x0940,     kCFStringEncodingShiftJIS = 0x0A01,     kCFStringEncodingKOI8_R = 0x0A02,     kCFStringEncodingBig5 = 0x0A03,     kCFStringEncodingMacRomanLatin1 = 0x0A04,     kCFStringEncodingHZ_GB_2312 = 0x0A05,     kCFStringEncodingBig5_HKSCS_1999 = 0x0A06,     kCFStringEncodingVISCII = 0x0A07,     kCFStringEncodingKOI8_U = 0x0A08,     kCFStringEncodingBig5_E = 0x0A09,     kCFStringEncodingNextStepJapanese = 0x0B02,     kCFStringEncodingEBCDIC_US = 0x0C01,     kCFStringEncodingEBCDIC_CP037 = 0x0C02,     kCFStringEncodingUTF7 __attribute__((availability(macosx,introduced=10_6))) = 0x04000100,     kCFStringEncodingUTF7_IMAP __attribute__((availability(macosx,introduced=10_6))) = 0x0A10,     kCFStringEncodingShiftJIS_X0213_00 = 0x0628 };
     typedef const void * (*CFTreeRetainCallBack)(const void *info);
     typedef void (*CFTreeReleaseCallBack)(const void *info);
     typedef CFStringRef (*CFTreeCopyDescriptionCallBack)(const void *info);
     typedef struct {      CFIndex version;      void * info;      CFTreeRetainCallBack retain;      CFTreeReleaseCallBack release;      CFTreeCopyDescriptionCallBack copyDescription;  }
     CFTreeContext;
     typedef void (*CFTreeApplierFunction)(const void *value, void *context);
     typedef struct __attribute__((objc_bridge_mutable(id))) __CFTree * CFTreeRef;
     extern CFTypeID CFTreeGetTypeID(void);
     extern CFTreeRef CFTreeCreate(CFAllocatorRef allocator, const CFTreeContext *context);
     extern CFTreeRef CFTreeGetParent(CFTreeRef tree);
     extern CFTreeRef CFTreeGetNextSibling(CFTreeRef tree);
     extern CFTreeRef CFTreeGetFirstChild(CFTreeRef tree);
     extern void CFTreeGetContext(CFTreeRef tree, CFTreeContext *context);
     extern CFIndex CFTreeGetChildCount(CFTreeRef tree);
     extern CFTreeRef CFTreeGetChildAtIndex(CFTreeRef tree, CFIndex idx);
     extern void CFTreeGetChildren(CFTreeRef tree, CFTreeRef *children);
     extern void CFTreeApplyFunctionToChildren(CFTreeRef tree, CFTreeApplierFunction __attribute__((noescape)) applier, void *context);
     extern CFTreeRef CFTreeFindRoot(CFTreeRef tree);
     extern void CFTreeSetContext(CFTreeRef tree, const CFTreeContext *context);
     extern void CFTreePrependChild(CFTreeRef tree, CFTreeRef newChild);
     extern void CFTreeAppendChild(CFTreeRef tree, CFTreeRef newChild);
     extern void CFTreeInsertSibling(CFTreeRef tree, CFTreeRef newSibling);
     extern void CFTreeRemove(CFTreeRef tree);
     extern void CFTreeRemoveAllChildren(CFTreeRef tree);
     extern void CFTreeSortChildren(CFTreeRef tree, CFComparatorFunction comparator, void *context);
     extern Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode) __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys.")));
     extern Boolean CFURLWriteDataAndPropertiesToResource(CFURLRef url, CFDataRef dataToWrite, CFDictionaryRef propertiesToWrite, SInt32 *errorCode) __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "For resource data, use the CFWriteStream API. For file resource properties, use CFURLSetResourcePropertiesForKeys.")));
     extern Boolean CFURLDestroyResource(CFURLRef url, SInt32 *errorCode) __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLGetFileSystemRepresentation and removefile(3) instead.")));
     extern CFTypeRef CFURLCreatePropertyFromResource(CFAllocatorRef alloc, CFURLRef url, CFStringRef property, SInt32 *errorCode) __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "For file resource properties, use CFURLCopyResourcePropertyForKey.")));
     typedef CFIndex CFURLError;
     enum {      kCFURLUnknownError = -10L,     kCFURLUnknownSchemeError = -11L,     kCFURLResourceNotFoundError = -12L,     kCFURLResourceAccessViolationError = -13L,     kCFURLRemoteHostUnavailableError = -14L,     kCFURLImproperArgumentsError = -15L,     kCFURLUnknownPropertyKeyError = -16L,     kCFURLPropertyKeyUnavailableError = -17L,     kCFURLTimeoutError = -18L }
     __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" )));
     extern const CFStringRef kCFURLFileExists __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLResourceIsReachable instead.")));
     extern const CFStringRef kCFURLFileDirectoryContents __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use the CFURLEnumerator API instead.")));
     extern const CFStringRef kCFURLFileLength __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")));
     extern const CFStringRef kCFURLFileLastModificationTime __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")));
     extern const CFStringRef kCFURLFilePOSIXMode __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")));
     extern const CFStringRef kCFURLFileOwnerID __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")));
     extern const CFStringRef kCFURLHTTPStatusCode __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use NSHTTPURLResponse methods instead.")));
     extern const CFStringRef kCFURLHTTPStatusLine __attribute__((availability(macosx,introduced=10_0,deprecated=10_9,message="" "Use NSHTTPURLResponse methods instead.")));
     typedef const struct __attribute__((objc_bridge(id))) __CFUUID * CFUUIDRef;
     typedef struct {      UInt8 byte0;      UInt8 byte1;      UInt8 byte2;      UInt8 byte3;      UInt8 byte4;      UInt8 byte5;      UInt8 byte6;      UInt8 byte7;      UInt8 byte8;      UInt8 byte9;      UInt8 byte10;      UInt8 byte11;      UInt8 byte12;      UInt8 byte13;      UInt8 byte14;      UInt8 byte15;  }
     CFUUIDBytes;
     extern CFTypeID CFUUIDGetTypeID(void);
     extern CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc);
     extern CFUUIDRef CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);
     extern CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr);
     extern CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid);
     extern CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);
     extern CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid);
     extern CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);
     extern CFURLRef CFCopyHomeDirectoryURL(void) __attribute__((availability(macosx,unavailable)));
     typedef struct __attribute__((objc_bridge(id))) __CFBundle *CFBundleRef;
     typedef struct __attribute__((objc_bridge(id))) __CFBundle *CFPlugInRef;
     extern const CFStringRef kCFBundleInfoDictionaryVersionKey;
     extern const CFStringRef kCFBundleExecutableKey;
     extern const CFStringRef kCFBundleIdentifierKey;
     extern const CFStringRef kCFBundleVersionKey;
     extern const CFStringRef kCFBundleDevelopmentRegionKey;
     extern const CFStringRef kCFBundleNameKey;
     extern const CFStringRef kCFBundleLocalizationsKey;
     extern CFBundleRef CFBundleGetMainBundle(void);
     extern CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID);
     extern CFArrayRef CFBundleGetAllBundles(void);
     extern CFTypeID CFBundleGetTypeID(void);
     extern CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL);
     extern CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType);
     extern CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle);
     extern CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key);
     extern CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle);
     extern CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle);
     extern void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator);
     extern CFStringRef CFBundleGetIdentifier(CFBundleRef bundle);
     extern UInt32 CFBundleGetVersionNumber(CFBundleRef bundle);
     extern CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle);
     extern CFURLRef CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle);
     extern CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle);
     extern CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle);
     extern CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle);
     extern CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle);
     extern CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle);
     extern CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL);
     extern Boolean CFBundleGetPackageInfoInDirectory(CFURLRef url, UInt32 *packageType, UInt32 *packageCreator);
     extern CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
     extern CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName);
     extern CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName) __attribute__((format_arg(2)));
     extern CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
     extern CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName);
     extern CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle);
     extern CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray);
     extern CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray);
     extern CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
     extern CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
     extern CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url);
     extern CFArrayRef CFBundleCopyLocalizationsForURL(CFURLRef url);
     extern CFArrayRef CFBundleCopyExecutableArchitecturesForURL(CFURLRef url) __attribute__((availability(macosx,introduced=10_5)));
     extern CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle);
     enum {      kCFBundleExecutableArchitectureI386 = 0x00000007,     kCFBundleExecutableArchitecturePPC = 0x00000012,     kCFBundleExecutableArchitectureX86_64 = 0x01000007,     kCFBundleExecutableArchitecturePPC64 = 0x01000012 }
     __attribute__((availability(macosx,introduced=10_5)));
     extern CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle) __attribute__((availability(macosx,introduced=10_5)));
     typedef struct __attribute__((objc_bridge(id))) __CFPlugInInstance *CFPlugInInstanceRef;
     typedef Boolean (*CFPlugInInstanceGetInterfaceFunction)(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
     typedef void (*CFPlugInInstanceDeallocateInstanceDataFunction)(void *instanceData);
     extern Boolean CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
     extern CFStringRef CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef instance) __attribute__((cf_returns_retained));
     extern void *CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef instance);
     extern CFTypeID CFPlugInInstanceGetTypeID(void);
     extern CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef allocator, CFIndex instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction, CFStringRef factoryName, CFPlugInInstanceGetInterfaceFunction getInterfaceFunction);
     typedef struct __attribute__((objc_bridge_mutable(NSMachPort))) __CFMachPort * CFMachPortRef;
     typedef struct {      CFIndex version;      void * info;      const void *(*retain)(const void *info);      void (*release)(const void *info);      CFStringRef (*copyDescription)(const void *info);  }
     CFMachPortContext;
     typedef void (*CFMachPortCallBack)(CFMachPortRef port, void *msg, CFIndex size, void *info);
     typedef void (*CFMachPortInvalidationCallBack)(CFMachPortRef port, void *info);
     extern CFTypeID CFMachPortGetTypeID(void);
     extern CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);
     extern CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);
     extern mach_port_t CFMachPortGetPort(CFMachPortRef port);
     extern void CFMachPortGetContext(CFMachPortRef port, CFMachPortContext *context);
     extern void CFMachPortInvalidate(CFMachPortRef port);
     extern Boolean CFMachPortIsValid(CFMachPortRef port);
     extern CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(CFMachPortRef port);
     extern void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout);
     extern CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order);
     typedef const struct __attribute__((objc_bridge(NSAttributedString))) __CFAttributedString *CFAttributedStringRef;
     typedef struct __attribute__((objc_bridge_mutable(NSMutableAttributedString))) __CFAttributedString *CFMutableAttributedStringRef;
     extern CFTypeID CFAttributedStringGetTypeID(void);
     extern CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes);
     extern CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range);
     extern CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr);
     extern CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr);
     extern CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr);
     extern CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange);
     extern CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange);
     extern CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange);
     extern CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange);
     extern CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr);
     extern CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);
     extern void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement);
     extern CFMutableStringRef CFAttributedStringGetMutableString(CFMutableAttributedStringRef aStr);
     extern void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes);
     extern void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value);
     extern void CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName);
     extern void CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef aStr, CFRange range, CFAttributedStringRef replacement);
     extern void CFAttributedStringBeginEditing(CFMutableAttributedStringRef aStr);
     extern void CFAttributedStringEndEditing(CFMutableAttributedStringRef aStr);
     typedef const struct __attribute__((objc_bridge_mutable(id))) __CFURLEnumerator *CFURLEnumeratorRef;
     extern CFTypeID CFURLEnumeratorGetTypeID( void ) __attribute__((availability(macosx,introduced=10_6)));
     typedef CFOptionFlags CFURLEnumeratorOptions;
     enum {      kCFURLEnumeratorDefaultBehavior = 0,     kCFURLEnumeratorDescendRecursively = 1UL << 0,     kCFURLEnumeratorSkipInvisibles = 1UL << 1,     kCFURLEnumeratorGenerateFileReferenceURLs = 1UL << 2,     kCFURLEnumeratorSkipPackageContents = 1UL << 3,     kCFURLEnumeratorIncludeDirectoriesPreOrder = 1UL << 4,     kCFURLEnumeratorIncludeDirectoriesPostOrder = 1UL << 5, };
     extern CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL( CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes( CFAllocatorRef alloc, CFURLEnumeratorOptions option, CFArrayRef propertyKeys ) __attribute__((availability(macosx,introduced=10_6)));
     typedef CFIndex CFURLEnumeratorResult;
     enum {      kCFURLEnumeratorSuccess = 1,     kCFURLEnumeratorEnd = 2,     kCFURLEnumeratorError = 3,     kCFURLEnumeratorDirectoryPostOrderSuccess = 4, };
     extern CFURLEnumeratorResult CFURLEnumeratorGetNextURL( CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error ) __attribute__((availability(macosx,introduced=10_6)));
     extern void CFURLEnumeratorSkipDescendents( CFURLEnumeratorRef enumerator ) __attribute__((availability(macosx,introduced=10_6)));
     extern CFIndex CFURLEnumeratorGetDescendentLevel( CFURLEnumeratorRef enumerator ) __attribute__((availability(macosx,introduced=10_6)));
     extern Boolean CFURLEnumeratorGetSourceDidChange( CFURLEnumeratorRef enumerator ) __attribute__((availability(macosx,introduced=10_6,deprecated=10_7,message="" )));
     typedef struct {   unsigned char g_guid[16];  }
     guid_t;
     typedef struct {   u_int8_t sid_kind;   u_int8_t sid_authcount;   u_int8_t sid_authority[6];   u_int32_t sid_authorities[16];  }
     ntsid_t;
     struct kauth_identity_extlookup {   u_int32_t el_seqno;   u_int32_t el_result;   u_int32_t el_flags;   __darwin_pid_t el_info_pid;   u_int64_t el_extend;   u_int32_t el_info_reserved_1;   uid_t el_uid;   guid_t el_uguid;   u_int32_t el_uguid_valid;   ntsid_t el_usid;   u_int32_t el_usid_valid;   gid_t el_gid;   guid_t el_gguid;   u_int32_t el_gguid_valid;   ntsid_t el_gsid;   u_int32_t el_gsid_valid;   u_int32_t el_member_valid;    u_int32_t el_sup_grp_cnt;    gid_t el_sup_groups[16];  };
     struct kauth_cache_sizes {   u_int32_t kcs_group_size;   u_int32_t kcs_id_size;  };
     typedef u_int32_t kauth_ace_rights_t;
     struct kauth_ace {   guid_t ace_applicable;   u_int32_t ace_flags;   kauth_ace_rights_t ace_rights;  };
     typedef struct kauth_ace *kauth_ace_t;
     struct kauth_acl {   u_int32_t acl_entrycount;   u_int32_t acl_flags;   struct kauth_ace acl_ace[1];  };
     typedef struct kauth_acl *kauth_acl_t;
     struct kauth_filesec {   u_int32_t fsec_magic;   guid_t fsec_owner;   guid_t fsec_group;   struct kauth_acl fsec_acl;  };
     typedef struct kauth_filesec *kauth_filesec_t;
     typedef enum {   ACL_READ_DATA = (1<<1),  ACL_LIST_DIRECTORY = (1<<1),  ACL_WRITE_DATA = (1<<2),  ACL_ADD_FILE = (1<<2),  ACL_EXECUTE = (1<<3),  ACL_SEARCH = (1<<3),  ACL_DELETE = (1<<4),  ACL_APPEND_DATA = (1<<5),  ACL_ADD_SUBDIRECTORY = (1<<5),  ACL_DELETE_CHILD = (1<<6),  ACL_READ_ATTRIBUTES = (1<<7),  ACL_WRITE_ATTRIBUTES = (1<<8),  ACL_READ_EXTATTRIBUTES = (1<<9),  ACL_WRITE_EXTATTRIBUTES = (1<<10),  ACL_READ_SECURITY = (1<<11),  ACL_WRITE_SECURITY = (1<<12),  ACL_CHANGE_OWNER = (1<<13),  ACL_SYNCHRONIZE = (1<<20), }
     acl_perm_t;
     typedef enum {   ACL_UNDEFINED_TAG = 0,  ACL_EXTENDED_ALLOW = 1,  ACL_EXTENDED_DENY = 2 }
     acl_tag_t;
     typedef enum {   ACL_TYPE_EXTENDED = 0x00000100,  ACL_TYPE_ACCESS = 0x00000000,  ACL_TYPE_DEFAULT = 0x00000001,  ACL_TYPE_AFS = 0x00000002,  ACL_TYPE_CODA = 0x00000003,  ACL_TYPE_NTFS = 0x00000004,  ACL_TYPE_NWFS = 0x00000005 }
     acl_type_t;
     typedef enum {   ACL_FIRST_ENTRY = 0,  ACL_NEXT_ENTRY = -1,  ACL_LAST_ENTRY = -2 }
     acl_entry_id_t;
     typedef enum {   ACL_FLAG_DEFER_INHERIT = (1 << 0),  ACL_FLAG_NO_INHERIT = (1<<17),  ACL_ENTRY_INHERITED = (1<<4),  ACL_ENTRY_FILE_INHERIT = (1<<5),  ACL_ENTRY_DIRECTORY_INHERIT = (1<<6),  ACL_ENTRY_LIMIT_INHERIT = (1<<7),  ACL_ENTRY_ONLY_INHERIT = (1<<8) }
     acl_flag_t;
     struct _acl;
     struct _acl_entry;
     struct _acl_permset;
     struct _acl_flagset;
     typedef struct _acl *acl_t;
     typedef struct _acl_entry *acl_entry_t;
     enum {    dcmParamErr = -7100,   dcmNotDictionaryErr = -7101,   dcmBadDictionaryErr = -7102,   dcmPermissionErr = -7103,   dcmDictionaryNotOpenErr = -7104,   dcmDictionaryBusyErr = -7105,   dcmBlockFullErr = -7107,   dcmNoRecordErr = -7108,   dcmDupRecordErr = -7109,   dcmNecessaryFieldErr = -7110,   dcmBadFieldInfoErr = -7111,   dcmBadFieldTypeErr = -7112,   dcmNoFieldErr = -7113,   dcmBadKeyErr = -7115,   dcmTooManyKeyErr = -7116,   dcmBadDataSizeErr = -7117,   dcmBadFindMethodErr = -7118,   dcmBadPropertyErr = -7119,   dcmProtectedErr = -7121,   dcmNoAccessMethodErr = -7122,   dcmBadFeatureErr = -7124,   dcmIterationCompleteErr = -7126,   dcmBufferOverflowErr = -7127 };
     enum {    kRAInvalidParameter = -7100,   kRAInvalidPort = -7101,   kRAStartupFailed = -7102,   kRAPortSetupFailed = -7103,   kRAOutOfMemory = -7104,   kRANotSupported = -7105,   kRAMissingResources = -7106,   kRAIncompatiblePrefs = -7107,   kRANotConnected = -7108,   kRAConnectionCanceled = -7109,   kRAUnknownUser = -7110,   kRAInvalidPassword = -7111,   kRAInternalError = -7112,   kRAInstallationDamaged = -7113,   kRAPortBusy = -7114,   kRAUnknownPortState = -7115,   kRAInvalidPortState = -7116,   kRAInvalidSerialProtocol = -7117,   kRAUserLoginDisabled = -7118,   kRAUserPwdChangeRequired = -7119,   kRAUserPwdEntryRequired = -7120,   kRAUserInteractionRequired = -7121,   kRAInitOpenTransportFailed = -7122,   kRARemoteAccessNotReady = -7123,   kRATCPIPInactive = -7124,   kRATCPIPNotConfigured = -7125,   kRANotPrimaryInterface = -7126,   kRAConfigurationDBInitErr = -7127,   kRAPPPProtocolRejected = -7128,   kRAPPPAuthenticationFailed = -7129,   kRAPPPNegotiationFailed = -7130,   kRAPPPUserDisconnected = -7131,   kRAPPPPeerDisconnected = -7132,   kRAPeerNotResponding = -7133,   kRAATalkInactive = -7134,   kRAExtAuthenticationFailed = -7135,   kRANCPRejectedbyPeer = -7136,   kRADuplicateIPAddr = -7137,   kRACallBackFailed = -7138,   kRANotEnabled = -7139 };
     enum {    kATSUInvalidTextLayoutErr = -8790,   kATSUInvalidStyleErr = -8791,   kATSUInvalidTextRangeErr = -8792,   kATSUFontsMatched = -8793,   kATSUFontsNotMatched = -8794,   kATSUNoCorrespondingFontErr = -8795,   kATSUInvalidFontErr = -8796,   kATSUInvalidAttributeValueErr = -8797,   kATSUInvalidAttributeSizeErr = -8798,   kATSUInvalidAttributeTagErr = -8799,   kATSUInvalidCacheErr = -8800,   kATSUNotSetErr = -8801,   kATSUNoStyleRunsAssignedErr = -8802,   kATSUQuickDrawTextErr = -8803,   kATSULowLevelErr = -8804,   kATSUNoFontCmapAvailableErr = -8805,   kATSUNoFontScalerAvailableErr = -8806,   kATSUCoordinateOverflowErr = -8807,   kATSULineBreakInWord = -8808,   kATSUBusyObjectErr = -8809 };
     enum {    kTextUnsupportedEncodingErr = -8738,   kTextMalformedInputErr = -8739,   kTextUndefinedElementErr = -8740,   kTECMissingTableErr = -8745,   kTECTableChecksumErr = -8746,   kTECTableFormatErr = -8747,   kTECCorruptConverterErr = -8748,   kTECNoConversionPathErr = -8749,   kTECBufferBelowMinimumSizeErr = -8750,   kTECArrayFullErr = -8751,   kTECBadTextRunErr = -8752,   kTECPartialCharErr = -8753,   kTECUnmappableElementErr = -8754,   kTECIncompleteElementErr = -8755,   kTECDirectionErr = -8756,   kTECGlobalsUnavailableErr = -8770,   kTECItemUnavailableErr = -8771,   kTECUsedFallbacksStatus = -8783,   kTECNeedFlushStatus = -8784,   kTECOutputBufferFullStatus = -8785,   unicodeChecksumErr = -8769,   unicodeNoTableErr = -8768,   unicodeVariantErr = -8767,   unicodeFallbacksErr = -8766,   unicodePartConvertErr = -8765,   unicodeBufErr = -8764,   unicodeCharErr = -8763,   unicodeElementErr = -8762,   unicodeNotFoundErr = -8761,   unicodeTableFormatErr = -8760,   unicodeDirectionErr = -8759,   unicodeContextualErr = -8758,   unicodeTextEncodingDataErr = -8757 };
     enum {    kUTCUnderflowErr = -8850,   kUTCOverflowErr = -8851,   kIllegalClockValueErr = -8852 };
     enum {    kATSUInvalidFontFallbacksErr = -8900,   kATSUUnsupportedStreamFormatErr = -8901,   kATSUBadStreamErr = -8902,   kATSUOutputBufferTooSmallErr = -8903,   kATSUInvalidCallInsideCallbackErr = -8904,   kATSUNoFontNameErr = -8905,   kATSULastErr = -8959 };
     enum {    codecErr = -8960,   noCodecErr = -8961,   codecUnimpErr = -8962,   codecSizeErr = -8963,   codecScreenBufErr = -8964,   codecImageBufErr = -8965,   codecSpoolErr = -8966,   codecAbortErr = -8967,   codecWouldOffscreenErr = -8968,   codecBadDataErr = -8969,   codecDataVersErr = -8970,   codecExtensionNotFoundErr = -8971,   scTypeNotFoundErr = codecExtensionNotFoundErr,   codecConditionErr = -8972,   codecOpenErr = -8973,   codecCantWhenErr = -8974,   codecCantQueueErr = -8975,   codecNothingToBlitErr = -8976,   codecNoMemoryPleaseWaitErr = -8977,   codecDisabledErr = -8978,   codecNeedToFlushChainErr = -8979,   lockPortBitsBadSurfaceErr = -8980,   lockPortBitsWindowMovedErr = -8981,   lockPortBitsWindowResizedErr = -8982,   lockPortBitsWindowClippedErr = -8983,   lockPortBitsBadPortErr = -8984,   lockPortBitsSurfaceLostErr = -8985,   codecParameterDialogConfirm = -8986,   codecNeedAccessKeyErr = -8987,   codecOffscreenFailedErr = -8988,   codecDroppedFrameErr = -8989,   directXObjectAlreadyExists = -8990,   lockPortBitsWrongGDeviceErr = -8991,   codecOffscreenFailedPleaseRetryErr = -8992,   badCodecCharacterizationErr = -8993,   noThumbnailFoundErr = -8994 };
     enum {    kBadAdapterErr = -9050,   kBadAttributeErr = -9051,   kBadBaseErr = -9052,   kBadEDCErr = -9053,   kBadIRQErr = -9054,   kBadOffsetErr = -9055,   kBadPageErr = -9056,   kBadSizeErr = -9057,   kBadSocketErr = -9058,   kBadTypeErr = -9059,   kBadVccErr = -9060,   kBadVppErr = -9061,   kBadWindowErr = -9062,   kBadArgLengthErr = -9063,   kBadArgsErr = -9064,   kBadHandleErr = -9065,   kBadCISErr = -9066,   kBadSpeedErr = -9067,   kReadFailureErr = -9068,   kWriteFailureErr = -9069,   kGeneralFailureErr = -9070,   kNoCardErr = -9071,   kUnsupportedFunctionErr = -9072,   kUnsupportedModeErr = -9073,   kBusyErr = -9074,   kWriteProtectedErr = -9075,   kConfigurationLockedErr = -9076,   kInUseErr = -9077,   kNoMoreItemsErr = -9078,   kOutOfResourceErr = -9079,   kNoCardSevicesSocketsErr = -9080,   kInvalidRegEntryErr = -9081,   kBadLinkErr = -9082,   kBadDeviceErr = -9083,   k16BitCardErr = -9084,   kCardBusCardErr = -9085,   kPassCallToChainErr = -9086,   kCantConfigureCardErr = -9087,   kPostCardEventErr = -9088,   kInvalidDeviceNumber = -9089,   kUnsupportedVsErr = -9090,   kInvalidCSClientErr = -9091,   kBadTupleDataErr = -9092,   kBadCustomIFIDErr = -9093,   kNoIOWindowRequestedErr = -9094,   kNoMoreTimerClientsErr = -9095,   kNoMoreInterruptSlotsErr = -9096,   kNoClientTableErr = -9097,   kUnsupportedCardErr = -9098,   kNoCardEnablersFoundErr = -9099,   kNoEnablerForCardErr = -9100,   kNoCompatibleNameErr = -9101,   kClientRequestDenied = -9102,   kNotReadyErr = -9103,   kTooManyIOWindowsErr = -9104,   kAlreadySavedStateErr = -9105,   kAttemptDupCardEntryErr = -9106,   kCardPowerOffErr = -9107,   kNotZVCapableErr = -9108,   kNoCardBusCISErr = -9109 };
     enum {    noDeviceForChannel = -9400,   grabTimeComplete = -9401,   cantDoThatInCurrentMode = -9402,   notEnoughMemoryToGrab = -9403,   notEnoughDiskSpaceToGrab = -9404,   couldntGetRequiredComponent = -9405,   badSGChannel = -9406,   seqGrabInfoNotAvailable = -9407,   deviceCantMeetRequest = -9408,   badControllerHeight = -9994,   editingNotAllowed = -9995,   controllerBoundsNotExact = -9996,   cannotSetWidthOfAttachedController = -9997,   controllerHasFixedHeight = -9998,   cannotMoveAttachedController = -9999 };
     enum {    errAEBadKeyForm = -10002,   errAECantHandleClass = -10010,   errAECantSupplyType = -10009,   errAECantUndo = -10015,   errAEEventFailed = -10000,   errAEIndexTooLarge = -10007,   errAEInTransaction = -10011,   errAELocalOnly = -10016,   errAENoSuchTransaction = -10012,   errAENotAnElement = -10008,   errAENotASingleObject = -10014,   errAENotModifiable = -10003,   errAENoUserSelection = -10013,   errAEPrivilegeError = -10004,   errAEReadDenied = -10005,   errAETypeError = -10001,   errAEWriteDenied = -10006,   errAENotAnEnumMember = -10023,   errAECantPutThatThere = -10024,   errAEPropertiesClash = -10025 };
     enum {    telGenericError = -1,   telNoErr = 0,   telNoTools = 8,   telBadTermErr = -10001,   telBadDNErr = -10002,   telBadCAErr = -10003,   telBadHandErr = -10004,   telBadProcErr = -10005,   telCAUnavail = -10006,   telNoMemErr = -10007,   telNoOpenErr = -10008,   telBadHTypeErr = -10010,   telHTypeNotSupp = -10011,   telBadLevelErr = -10012,   telBadVTypeErr = -10013,   telVTypeNotSupp = -10014,   telBadAPattErr = -10015,   telAPattNotSupp = -10016,   telBadIndex = -10017,   telIndexNotSupp = -10018,   telBadStateErr = -10019,   telStateNotSupp = -10020,   telBadIntExt = -10021,   telIntExtNotSupp = -10022,   telBadDNDType = -10023,   telDNDTypeNotSupp = -10024,   telFeatNotSub = -10030,   telFeatNotAvail = -10031,   telFeatActive = -10032,   telFeatNotSupp = -10033,   telConfLimitErr = -10040,   telConfNoLimit = -10041,   telConfErr = -10042,   telConfRej = -10043,   telTransferErr = -10044,   telTransferRej = -10045,   telCBErr = -10046,   telConfLimitExceeded = -10047,   telBadDNType = -10050,   telBadPageID = -10051,   telBadIntercomID = -10052,   telBadFeatureID = -10053,   telBadFwdType = -10054,   telBadPickupGroupID = -10055,   telBadParkID = -10056,   telBadSelect = -10057,   telBadBearerType = -10058,   telBadRate = -10059,   telDNTypeNotSupp = -10060,   telFwdTypeNotSupp = -10061,   telBadDisplayMode = -10062,   telDisplayModeNotSupp = -10063,   telNoCallbackRef = -10064,   telAlreadyOpen = -10070,   telStillNeeded = -10071,   telTermNotOpen = -10072,   telCANotAcceptable = -10080,   telCANotRejectable = -10081,   telCANotDeflectable = -10082,   telPBErr = -10090,   telBadFunction = -10091,   telNoSuchTool = -10102,   telUnknownErr = -10103,   telNoCommFolder = -10106,   telInitFailed = -10107,   telBadCodeResource = -10108,   telDeviceNotFound = -10109,   telBadProcID = -10110,   telValidateFailed = -10111,   telAutoAnsNotOn = -10112,   telDetAlreadyOn = -10113,   telBadSWErr = -10114,   telBadSampleRate = -10115,   telNotEnoughdspBW = -10116 };
     enum {    errTaskNotFound = -10780 };
     enum {    pmBusyErr = -13000,   pmReplyTOErr = -13001,   pmSendStartErr = -13002,   pmSendEndErr = -13003,   pmRecvStartErr = -13004,   pmRecvEndErr = -13005 };
     enum {    kPowerHandlerExistsForDeviceErr = -13006,   kPowerHandlerNotFoundForDeviceErr = -13007,   kPowerHandlerNotFoundForProcErr = -13008,   kPowerMgtMessageNotHandled = -13009,   kPowerMgtRequestDenied = -13010,   kCantReportProcessorTemperatureErr = -13013,   kProcessorTempRoutineRequiresMPLib2 = -13014,   kNoSuchPowerSource = -13020,   kBridgeSoftwareRunningCantSleep = -13038 };
     enum {    debuggingExecutionContextErr = -13880,   debuggingDuplicateSignatureErr = -13881,   debuggingDuplicateOptionErr = -13882,   debuggingInvalidSignatureErr = -13883,   debuggingInvalidOptionErr = -13884,   debuggingInvalidNameErr = -13885,   debuggingNoCallbackErr = -13886,   debuggingNoMatchErr = -13887 };
     enum {    kHIDVersionIncompatibleErr = -13909,   kHIDDeviceNotReady = -13910 };
     enum {    kHIDSuccess = 0,   kHIDInvalidRangePageErr = -13923,   kHIDReportIDZeroErr = -13924,   kHIDReportCountZeroErr = -13925,   kHIDReportSizeZeroErr = -13926,   kHIDUnmatchedDesignatorRangeErr = -13927,   kHIDUnmatchedStringRangeErr = -13928,   kHIDInvertedUsageRangeErr = -13929,   kHIDUnmatchedUsageRangeErr = -13930,   kHIDInvertedPhysicalRangeErr = -13931,   kHIDInvertedLogicalRangeErr = -13932,   kHIDBadLogicalMaximumErr = -13933,   kHIDBadLogicalMinimumErr = -13934,   kHIDUsagePageZeroErr = -13935,   kHIDEndOfDescriptorErr = -13936,   kHIDNotEnoughMemoryErr = -13937,   kHIDBadParameterErr = -13938,   kHIDNullPointerErr = -13939,   kHIDInvalidReportLengthErr = -13940,   kHIDInvalidReportTypeErr = -13941,   kHIDBadLogPhysValuesErr = -13942,   kHIDIncompatibleReportErr = -13943,   kHIDInvalidPreparsedDataErr = -13944,   kHIDNotValueArrayErr = -13945,   kHIDUsageNotFoundErr = -13946,   kHIDValueOutOfRangeErr = -13947,   kHIDBufferTooSmallErr = -13948,   kHIDNullStateErr = -13949,   kHIDBaseError = -13950 };
     enum {    kModemOutOfMemory = -14000,   kModemPreferencesMissing = -14001,   kModemScriptMissing = -14002 };
     enum {    kTXNEndIterationErr = -22000,   kTXNCannotAddFrameErr = -22001,   kTXNInvalidFrameIDErr = -22002,   kTXNIllegalToCrossDataBoundariesErr = -22003,   kTXNUserCanceledOperationErr = -22004,   kTXNBadDefaultFileTypeWarning = -22005,   kTXNCannotSetAutoIndentErr = -22006,   kTXNRunIndexOutofBoundsErr = -22007,   kTXNNoMatchErr = -22008,   kTXNAttributeTagInvalidForRunErr = -22009,   kTXNSomeOrAllTagsInvalidForRunErr = -22010,   kTXNInvalidRunIndex = -22011,   kTXNAlreadyInitializedErr = -22012,   kTXNCannotTurnTSMOffWhenUsingUnicodeErr = -22013,   kTXNCopyNotAllowedInEchoModeErr = -22014,   kTXNDataTypeNotAllowedErr = -22015,   kTXNATSUIIsNotInstalledErr = -22016,   kTXNOutsideOfLineErr = -22017,   kTXNOutsideOfFrameErr = -22018 };
     enum {    printerStatusOpCodeNotSupportedErr = -25280 };
     enum {    errKCNotAvailable = -25291,   errKCReadOnly = -25292,   errKCAuthFailed = -25293,   errKCNoSuchKeychain = -25294,   errKCInvalidKeychain = -25295,   errKCDuplicateKeychain = -25296,   errKCDuplicateCallback = -25297,   errKCInvalidCallback = -25298,   errKCDuplicateItem = -25299,   errKCItemNotFound = -25300,   errKCBufferTooSmall = -25301,   errKCDataTooLarge = -25302,   errKCNoSuchAttr = -25303,   errKCInvalidItemRef = -25304,   errKCInvalidSearchRef = -25305,   errKCNoSuchClass = -25306,   errKCNoDefaultKeychain = -25307,   errKCInteractionNotAllowed = -25308,   errKCReadOnlyAttr = -25309,   errKCWrongKCVersion = -25310,   errKCKeySizeNotAllowed = -25311,   errKCNoStorageModule = -25312,   errKCNoCertificateModule = -25313,   errKCNoPolicyModule = -25314,   errKCInteractionRequired = -25315,   errKCDataNotAvailable = -25316,   errKCDataNotModifiable = -25317,   errKCCreateChainFailed = -25318 };
     enum {    kUCOutputBufferTooSmall = -25340,   kUCTextBreakLocatorMissingType = -25341 };
     enum {    kUCTSNoKeysAddedToObjectErr = -25342,   kUCTSSearchListErr = -25343 };
     enum {    kUCTokenizerIterationFinished = -25344,   kUCTokenizerUnknownLang = -25345,   kUCTokenNotFound = -25346 };
     enum {    kMPIterationEndErr = -29275,   kMPPrivilegedErr = -29276,   kMPProcessCreatedErr = -29288,   kMPProcessTerminatedErr = -29289,   kMPTaskCreatedErr = -29290,   kMPTaskBlockedErr = -29291,   kMPTaskStoppedErr = -29292,   kMPBlueBlockingErr = -29293,   kMPDeletedErr = -29295,   kMPTimeoutErr = -29296,   kMPTaskAbortedErr = -29297,   kMPInsufficientResourcesErr = -29298,   kMPInvalidIDErr = -29299 };
     enum {    kMPNanokernelNeedsMemoryErr = -29294 };
     enum {    kCollateAttributesNotFoundErr = -29500,   kCollateInvalidOptions = -29501,   kCollateMissingUnicodeTableErr = -29502,   kCollateUnicodeConvertFailedErr = -29503,   kCollatePatternNotFoundErr = -29504,   kCollateInvalidChar = -29505,   kCollateBufferTooSmall = -29506,   kCollateInvalidCollationRef = -29507 };
     enum {    kFNSInvalidReferenceErr = -29580,   kFNSBadReferenceVersionErr = -29581,   kFNSInvalidProfileErr = -29582,   kFNSBadProfileVersionErr = -29583,   kFNSDuplicateReferenceErr = -29584,   kFNSMismatchErr = -29585,   kFNSInsufficientDataErr = -29586,   kFNSBadFlattenedSizeErr = -29587,   kFNSNameNotFoundErr = -29589 };
     enum {    kLocalesBufferTooSmallErr = -30001,   kLocalesTableFormatErr = -30002,   kLocalesDefaultDisplayStatus = -30029 };
     enum {    kALMInternalErr = -30049,   kALMGroupNotFoundErr = -30048,   kALMNoSuchModuleErr = -30047,   kALMModuleCommunicationErr = -30046,   kALMDuplicateModuleErr = -30045,   kALMInstallationErr = -30044,   kALMDeferSwitchErr = -30043,   kALMRebootFlagsLevelErr = -30042 };
     enum {    kALMLocationNotFoundErr = kALMGroupNotFoundErr };
     enum {    kSSpInternalErr = -30340,   kSSpVersionErr = -30341,   kSSpCantInstallErr = -30342,   kSSpParallelUpVectorErr = -30343,   kSSpScaleToZeroErr = -30344 };
     enum {    kNSpInitializationFailedErr = -30360,   kNSpAlreadyInitializedErr = -30361,   kNSpTopologyNotSupportedErr = -30362,   kNSpPipeFullErr = -30364,   kNSpHostFailedErr = -30365,   kNSpProtocolNotAvailableErr = -30366,   kNSpInvalidGameRefErr = -30367,   kNSpInvalidParameterErr = -30369,   kNSpOTNotPresentErr = -30370,   kNSpOTVersionTooOldErr = -30371,   kNSpMemAllocationErr = -30373,   kNSpAlreadyAdvertisingErr = -30374,   kNSpNotAdvertisingErr = -30376,   kNSpInvalidAddressErr = -30377,   kNSpFreeQExhaustedErr = -30378,   kNSpRemovePlayerFailedErr = -30379,   kNSpAddressInUseErr = -30380,   kNSpFeatureNotImplementedErr = -30381,   kNSpNameRequiredErr = -30382,   kNSpInvalidPlayerIDErr = -30383,   kNSpInvalidGroupIDErr = -30384,   kNSpNoPlayersErr = -30385,   kNSpNoGroupsErr = -30386,   kNSpNoHostVolunteersErr = -30387,   kNSpCreateGroupFailedErr = -30388,   kNSpAddPlayerFailedErr = -30389,   kNSpInvalidDefinitionErr = -30390,   kNSpInvalidProtocolRefErr = -30391,   kNSpInvalidProtocolListErr = -30392,   kNSpTimeoutErr = -30393,   kNSpGameTerminatedErr = -30394,   kNSpConnectFailedErr = -30395,   kNSpSendFailedErr = -30396,   kNSpMessageTooBigErr = -30397,   kNSpCantBlockErr = -30398,   kNSpJoinFailedErr = -30399 };
     enum {    kISpInternalErr = -30420,   kISpSystemListErr = -30421,   kISpBufferToSmallErr = -30422,   kISpElementInListErr = -30423,   kISpElementNotInListErr = -30424,   kISpSystemInactiveErr = -30425,   kISpDeviceInactiveErr = -30426,   kISpSystemActiveErr = -30427,   kISpDeviceActiveErr = -30428,   kISpListBusyErr = -30429 };
     enum {    kDSpNotInitializedErr = -30440L,   kDSpSystemSWTooOldErr = -30441L,   kDSpInvalidContextErr = -30442L,   kDSpInvalidAttributesErr = -30443L,   kDSpContextAlreadyReservedErr = -30444L,   kDSpContextNotReservedErr = -30445L,   kDSpContextNotFoundErr = -30446L,   kDSpFrameRateNotReadyErr = -30447L,   kDSpConfirmSwitchWarning = -30448L,   kDSpInternalErr = -30449L,   kDSpStereoContextErr = -30450L };
     enum {    kFBCvTwinExceptionErr = -30500,   kFBCnoIndexesFound = -30501,   kFBCallocFailed = -30502,   kFBCbadParam = -30503,   kFBCfileNotIndexed = -30504,   kFBCbadIndexFile = -30505,   kFBCcompactionFailed = -30506,   kFBCvalidationFailed = -30507,   kFBCindexingFailed = -30508,   kFBCcommitFailed = -30509,   kFBCdeletionFailed = -30510,   kFBCmoveFailed = -30511,   kFBCtokenizationFailed = -30512,   kFBCmergingFailed = -30513,   kFBCindexCreationFailed = -30514,   kFBCaccessorStoreFailed = -30515,   kFBCaddDocFailed = -30516,   kFBCflushFailed = -30517,   kFBCindexNotFound = -30518,   kFBCnoSearchSession = -30519,   kFBCindexingCanceled = -30520,   kFBCaccessCanceled = -30521,   kFBCindexFileDestroyed = -30522,   kFBCindexNotAvailable = -30523,   kFBCsearchFailed = -30524,   kFBCsomeFilesNotIndexed = -30525,   kFBCillegalSessionChange = -30526,   kFBCanalysisNotAvailable = -30527,   kFBCbadIndexFileVersion = -30528,   kFBCsummarizationCanceled = -30529,   kFBCindexDiskIOFailed = -30530,   kFBCbadSearchSession = -30531,   kFBCnoSuchHit = -30532 };
     enum {    notAQTVRMovieErr = -30540,   constraintReachedErr = -30541,   callNotSupportedByNodeErr = -30542,   selectorNotSupportedByNodeErr = -30543,   invalidNodeIDErr = -30544,   invalidViewStateErr = -30545,   timeNotInViewErr = -30546,   propertyNotSupportedByNodeErr = -30547,   settingNotSupportedByNodeErr = -30548,   limitReachedErr = -30549,   invalidNodeFormatErr = -30550,   invalidHotSpotIDErr = -30551,   noMemoryNodeFailedInitialize = -30552,   streamingNodeNotReadyErr = -30553,   qtvrLibraryLoadErr = -30554,   qtvrUninitialized = -30555 };
     enum {    themeInvalidBrushErr = -30560,   themeProcessRegisteredErr = -30561,   themeProcessNotRegisteredErr = -30562,   themeBadTextColorErr = -30563,   themeHasNoAccentsErr = -30564,   themeBadCursorIndexErr = -30565,   themeScriptFontNotFoundErr = -30566,   themeMonitorDepthNotSupportedErr = -30567,   themeNoAppropriateBrushErr = -30568 };
     enum {    errMessageNotSupported = -30580,   errDataNotSupported = -30581,   errControlDoesntSupportFocus = -30582,   errUnknownControl = -30584,   errCouldntSetFocus = -30585,   errNoRootControl = -30586,   errRootAlreadyExists = -30587,   errInvalidPartCode = -30588,   errControlsAlreadyExist = -30589,   errControlIsNotEmbedder = -30590,   errDataSizeMismatch = -30591,   errControlHiddenOrDisabled = -30592,   errCantEmbedIntoSelf = -30594,   errCantEmbedRoot = -30595,   errItemNotControl = -30596,   controlInvalidDataVersionErr = -30597,   controlPropertyInvalid = -5603,   controlPropertyNotFoundErr = -5604,   controlHandleInvalidErr = -30599 };
     enum {    kURLInvalidURLReferenceError = -30770,   kURLProgressAlreadyDisplayedError = -30771,   kURLDestinationExistsError = -30772,   kURLInvalidURLError = -30773,   kURLUnsupportedSchemeError = -30774,   kURLServerBusyError = -30775,   kURLAuthenticationError = -30776,   kURLPropertyNotYetKnownError = -30777,   kURLUnknownPropertyError = -30778,   kURLPropertyBufferTooSmallError = -30779,   kURLUnsettablePropertyError = -30780,   kURLInvalidCallError = -30781,   kURLFileEmptyError = -30783,   kURLExtensionFailureError = -30785,   kURLInvalidConfigurationError = -30786,   kURLAccessNotAvailableError = -30787,   kURL68kNotSupportedError = -30788 };
     enum {    errCppGeneral = -32000,   errCppbad_alloc = -32001,   errCppbad_cast = -32002,   errCppbad_exception = -32003,   errCppbad_typeid = -32004,   errCpplogic_error = -32005,   errCppdomain_error = -32006,   errCppinvalid_argument = -32007,   errCpplength_error = -32008,   errCppout_of_range = -32009,   errCppruntime_error = -32010,   errCppoverflow_error = -32011,   errCpprange_error = -32012,   errCppunderflow_error = -32013,   errCppios_base_failure = -32014,   errCppLastSystemDefinedError = -32020,   errCppLastUserDefinedError = -32049 };
     enum {    badComponentInstance = (int)0x80008001,   badComponentSelector = (int)0x80008002 };
     enum {    dsBusError = 1,   dsAddressErr = 2,   dsIllInstErr = 3,   dsZeroDivErr = 4,   dsChkErr = 5,   dsOvflowErr = 6,   dsPrivErr = 7,   dsTraceErr = 8,   dsLineAErr = 9,   dsLineFErr = 10,   dsMiscErr = 11,   dsCoreErr = 12,   dsIrqErr = 13,   dsIOCoreErr = 14,   dsLoadErr = 15,   dsFPErr = 16,   dsNoPackErr = 17,   dsNoPk1 = 18,   dsNoPk2 = 19 };
     enum {    dsNoPk3 = 20,   dsNoPk4 = 21,   dsNoPk5 = 22,   dsNoPk6 = 23,   dsNoPk7 = 24,   dsMemFullErr = 25,   dsBadLaunch = 26,   dsFSErr = 27,   dsStknHeap = 28,   negZcbFreeErr = 33,   dsFinderErr = 41,   dsBadSlotInt = 51,   dsBadSANEOpcode = 81,   dsBadPatchHeader = 83,   menuPrgErr = 84,   dsMBarNFnd = 85,   dsHMenuFindErr = 86,   dsWDEFNotFound = 87,   dsCDEFNotFound = 88,   dsMDEFNotFound = 89 };
     enum {    dsNoFPU = 90,   dsNoPatch = 98,   dsBadPatch = 99,   dsParityErr = 101,   dsOldSystem = 102,   ds32BitMode = 103,   dsNeedToWriteBootBlocks = 104,   dsNotEnoughRAMToBoot = 105,   dsBufPtrTooLow = 106,   dsVMDeferredFuncTableFull = 112,   dsVMBadBackingStore = 113,   dsCantHoldSystemHeap = 114,   dsSystemRequiresPowerPC = 116,   dsGibblyMovedToDisabledFolder = 117,   dsUnBootableSystem = 118,   dsMustUseFCBAccessors = 119,   dsMacOSROMVersionTooOld = 120,   dsLostConnectionToNetworkDisk = 121,   dsRAMDiskTooBig = 122,   dsWriteToSupervisorStackGuardPage = 128,   dsReinsert = 30,   shutDownAlert = 42,   dsShutDownOrRestart = 20000,   dsSwitchOffOrRestart = 20001,   dsForcedQuit = 20002,   dsRemoveDisk = 20003,   dsDirtyDisk = 20004,   dsShutDownOrResume = 20109,   dsSCSIWarn = 20010,   dsMBSysError = 29200,   dsMBFlpySysError = 29201,   dsMBATASysError = 29202,   dsMBATAPISysError = 29203,   dsMBExternFlpySysError = 29204,   dsPCCardATASysError = 29205 };
     enum {    dsNoExtsMacsBug = -1,   dsNoExtsDisassembler = -2,   dsMacsBugInstalled = -10,   dsDisassemblerInstalled = -11,   dsExtensionsDisabled = -13,   dsGreeting = 40,   dsSysErr = 32767,   WDEFNFnd = dsWDEFNotFound };
     enum {    CDEFNFnd = dsCDEFNotFound,   dsNotThe1 = 31,   dsBadStartupDisk = 42,   dsSystemFileErr = 43,   dsHD20Installed = -12,   mBarNFnd = -126,   fsDSIntErr = -127,   hMenuFindErr = -127,   userBreak = -490,   strUserBreak = -491,   exUserBreak = -492 };
     enum {    dsBadLibrary = 1010,   dsMixedModeFailure = 1011 };
     enum {    kPOSIXErrorBase = 100000,   kPOSIXErrorEPERM = 100001,   kPOSIXErrorENOENT = 100002,   kPOSIXErrorESRCH = 100003,   kPOSIXErrorEINTR = 100004,   kPOSIXErrorEIO = 100005,   kPOSIXErrorENXIO = 100006,   kPOSIXErrorE2BIG = 100007,   kPOSIXErrorENOEXEC = 100008,   kPOSIXErrorEBADF = 100009,   kPOSIXErrorECHILD = 100010,   kPOSIXErrorEDEADLK = 100011,   kPOSIXErrorENOMEM = 100012,   kPOSIXErrorEACCES = 100013,   kPOSIXErrorEFAULT = 100014,   kPOSIXErrorENOTBLK = 100015,   kPOSIXErrorEBUSY = 100016,   kPOSIXErrorEEXIST = 100017,   kPOSIXErrorEXDEV = 100018,   kPOSIXErrorENODEV = 100019,   kPOSIXErrorENOTDIR = 100020,   kPOSIXErrorEISDIR = 100021,   kPOSIXErrorEINVAL = 100022,   kPOSIXErrorENFILE = 100023,   kPOSIXErrorEMFILE = 100024,   kPOSIXErrorENOTTY = 100025,   kPOSIXErrorETXTBSY = 100026,   kPOSIXErrorEFBIG = 100027,   kPOSIXErrorENOSPC = 100028,   kPOSIXErrorESPIPE = 100029,   kPOSIXErrorEROFS = 100030,   kPOSIXErrorEMLINK = 100031,   kPOSIXErrorEPIPE = 100032,   kPOSIXErrorEDOM = 100033,   kPOSIXErrorERANGE = 100034,   kPOSIXErrorEAGAIN = 100035,   kPOSIXErrorEINPROGRESS = 100036,   kPOSIXErrorEALREADY = 100037,   kPOSIXErrorENOTSOCK = 100038,   kPOSIXErrorEDESTADDRREQ = 100039,   kPOSIXErrorEMSGSIZE = 100040,   kPOSIXErrorEPROTOTYPE = 100041,   kPOSIXErrorENOPROTOOPT = 100042,   kPOSIXErrorEPROTONOSUPPORT = 100043,   kPOSIXErrorESOCKTNOSUPPORT = 100044,   kPOSIXErrorENOTSUP = 100045,   kPOSIXErrorEPFNOSUPPORT = 100046,   kPOSIXErrorEAFNOSUPPORT = 100047,   kPOSIXErrorEADDRINUSE = 100048,   kPOSIXErrorEADDRNOTAVAIL = 100049,   kPOSIXErrorENETDOWN = 100050,   kPOSIXErrorENETUNREACH = 100051,   kPOSIXErrorENETRESET = 100052,   kPOSIXErrorECONNABORTED = 100053,   kPOSIXErrorECONNRESET = 100054,   kPOSIXErrorENOBUFS = 100055,   kPOSIXErrorEISCONN = 100056,   kPOSIXErrorENOTCONN = 100057,   kPOSIXErrorESHUTDOWN = 100058,   kPOSIXErrorETOOMANYREFS = 100059,   kPOSIXErrorETIMEDOUT = 100060,   kPOSIXErrorECONNREFUSED = 100061,   kPOSIXErrorELOOP = 100062,   kPOSIXErrorENAMETOOLONG = 100063,   kPOSIXErrorEHOSTDOWN = 100064,   kPOSIXErrorEHOSTUNREACH = 100065,   kPOSIXErrorENOTEMPTY = 100066,   kPOSIXErrorEPROCLIM = 100067,   kPOSIXErrorEUSERS = 100068,   kPOSIXErrorEDQUOT = 100069,   kPOSIXErrorESTALE = 100070,   kPOSIXErrorEREMOTE = 100071,   kPOSIXErrorEBADRPC = 100072,   kPOSIXErrorERPCMISMATCH = 100073,   kPOSIXErrorEPROGUNAVAIL = 100074,   kPOSIXErrorEPROGMISMATCH = 100075,   kPOSIXErrorEPROCUNAVAIL = 100076,   kPOSIXErrorENOLCK = 100077,   kPOSIXErrorENOSYS = 100078,   kPOSIXErrorEFTYPE = 100079,   kPOSIXErrorEAUTH = 100080,   kPOSIXErrorENEEDAUTH = 100081,   kPOSIXErrorEPWROFF = 100082,   kPOSIXErrorEDEVERR = 100083,   kPOSIXErrorEOVERFLOW = 100084,   kPOSIXErrorEBADEXEC = 100085,   kPOSIXErrorEBADARCH = 100086,   kPOSIXErrorESHLIBVERS = 100087,   kPOSIXErrorEBADMACHO = 100088,   kPOSIXErrorECANCELED = 100089,   kPOSIXErrorEIDRM = 100090,   kPOSIXErrorENOMSG = 100091,   kPOSIXErrorEILSEQ = 100092,   kPOSIXErrorENOATTR = 100093,   kPOSIXErrorEBADMSG = 100094,   kPOSIXErrorEMULTIHOP = 100095,   kPOSIXErrorENODATA = 100096,   kPOSIXErrorENOLINK = 100097,   kPOSIXErrorENOSR = 100098,   kPOSIXErrorENOSTR = 100099,   kPOSIXErrorEPROTO = 100100,   kPOSIXErrorETIME = 100101,   kPOSIXErrorEOPNOTSUPP = 100102 };
     extern void SysError(short errorCode) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     enum {    kUTCDefaultOptions = 0 };
     struct UTCDateTime {    UInt16 highSeconds;    UInt32 lowSeconds;    UInt16 fraction;  };
     typedef struct UTCDateTime UTCDateTime;
     typedef UTCDateTime * UTCDateTimePtr;
     typedef UTCDateTimePtr * UTCDateTimeHandle;
     struct LocalDateTime {    UInt16 highSeconds;    UInt32 lowSeconds;    UInt16 fraction;  };
     typedef struct LocalDateTime LocalDateTime;
     typedef LocalDateTime * LocalDateTimePtr;
     typedef LocalDateTimePtr * LocalDateTimeHandle;
     enum {    kTextFlushDefault = 0,   kTextCenter = 1,   kTextFlushRight = -1,   kTextFlushLeft = -2 };
     typedef UInt32 TextEncodingBase;
     enum {    kTextEncodingMacRoman = 0,   kTextEncodingMacJapanese = 1,   kTextEncodingMacChineseTrad = 2,   kTextEncodingMacKorean = 3,   kTextEncodingMacArabic = 4,   kTextEncodingMacHebrew = 5,   kTextEncodingMacGreek = 6,   kTextEncodingMacCyrillic = 7,   kTextEncodingMacDevanagari = 9,   kTextEncodingMacGurmukhi = 10,   kTextEncodingMacGujarati = 11,   kTextEncodingMacOriya = 12,   kTextEncodingMacBengali = 13,   kTextEncodingMacTamil = 14,   kTextEncodingMacTelugu = 15,   kTextEncodingMacKannada = 16,   kTextEncodingMacMalayalam = 17,   kTextEncodingMacSinhalese = 18,   kTextEncodingMacBurmese = 19,   kTextEncodingMacKhmer = 20,   kTextEncodingMacThai = 21,   kTextEncodingMacLaotian = 22,   kTextEncodingMacGeorgian = 23,   kTextEncodingMacArmenian = 24,   kTextEncodingMacChineseSimp = 25,   kTextEncodingMacTibetan = 26,   kTextEncodingMacMongolian = 27,   kTextEncodingMacEthiopic = 28,   kTextEncodingMacCentralEurRoman = 29,   kTextEncodingMacVietnamese = 30,   kTextEncodingMacExtArabic = 31,   kTextEncodingMacSymbol = 33,   kTextEncodingMacDingbats = 34,   kTextEncodingMacTurkish = 35,   kTextEncodingMacCroatian = 36,   kTextEncodingMacIcelandic = 37,   kTextEncodingMacRomanian = 38,   kTextEncodingMacCeltic = 39,   kTextEncodingMacGaelic = 40,   kTextEncodingMacKeyboardGlyphs = 41 };
     enum {    kTextEncodingMacTradChinese = kTextEncodingMacChineseTrad,   kTextEncodingMacRSymbol = 8,   kTextEncodingMacSimpChinese = kTextEncodingMacChineseSimp,   kTextEncodingMacGeez = kTextEncodingMacEthiopic,   kTextEncodingMacEastEurRoman = kTextEncodingMacCentralEurRoman,   kTextEncodingMacUninterp = 32 };
     enum {    kTextEncodingMacUnicode = 0x7E };
     enum {    kTextEncodingMacFarsi = 0x8C,   kTextEncodingMacUkrainian = 0x98,   kTextEncodingMacInuit = 0xEC,   kTextEncodingMacVT100 = 0xFC };
     enum {    kTextEncodingMacHFS = 0xFF };
     enum {    kTextEncodingUnicodeDefault = 0x0100,   kTextEncodingUnicodeV1_1 = 0x0101,   kTextEncodingISO10646_1993 = 0x0101,   kTextEncodingUnicodeV2_0 = 0x0103,   kTextEncodingUnicodeV2_1 = 0x0103,   kTextEncodingUnicodeV3_0 = 0x0104,   kTextEncodingUnicodeV3_1 = 0x0105,   kTextEncodingUnicodeV3_2 = 0x0106,   kTextEncodingUnicodeV4_0 = 0x0108,   kTextEncodingUnicodeV5_0 = 0x010A,   kTextEncodingUnicodeV5_1 = 0x010B,   kTextEncodingUnicodeV6_0 = 0x010D,   kTextEncodingUnicodeV6_1 = 0x010E,   kTextEncodingUnicodeV6_3 = 0x0110,   kTextEncodingUnicodeV7_0 = 0x0111 };
     enum {    kTextEncodingISOLatin1 = 0x0201,   kTextEncodingISOLatin2 = 0x0202,   kTextEncodingISOLatin3 = 0x0203,   kTextEncodingISOLatin4 = 0x0204,   kTextEncodingISOLatinCyrillic = 0x0205,   kTextEncodingISOLatinArabic = 0x0206,   kTextEncodingISOLatinGreek = 0x0207,   kTextEncodingISOLatinHebrew = 0x0208,   kTextEncodingISOLatin5 = 0x0209,   kTextEncodingISOLatin6 = 0x020A,   kTextEncodingISOLatin7 = 0x020D,   kTextEncodingISOLatin8 = 0x020E,   kTextEncodingISOLatin9 = 0x020F,   kTextEncodingISOLatin10 = 0x0210 };
     enum {    kTextEncodingDOSLatinUS = 0x0400,   kTextEncodingDOSGreek = 0x0405,   kTextEncodingDOSBalticRim = 0x0406,   kTextEncodingDOSLatin1 = 0x0410,   kTextEncodingDOSGreek1 = 0x0411,   kTextEncodingDOSLatin2 = 0x0412,   kTextEncodingDOSCyrillic = 0x0413,   kTextEncodingDOSTurkish = 0x0414,   kTextEncodingDOSPortuguese = 0x0415,   kTextEncodingDOSIcelandic = 0x0416,   kTextEncodingDOSHebrew = 0x0417,   kTextEncodingDOSCanadianFrench = 0x0418,   kTextEncodingDOSArabic = 0x0419,   kTextEncodingDOSNordic = 0x041A,   kTextEncodingDOSRussian = 0x041B,   kTextEncodingDOSGreek2 = 0x041C,   kTextEncodingDOSThai = 0x041D,   kTextEncodingDOSJapanese = 0x0420,   kTextEncodingDOSChineseSimplif = 0x0421,   kTextEncodingDOSKorean = 0x0422,   kTextEncodingDOSChineseTrad = 0x0423,   kTextEncodingWindowsLatin1 = 0x0500,   kTextEncodingWindowsANSI = 0x0500,   kTextEncodingWindowsLatin2 = 0x0501,   kTextEncodingWindowsCyrillic = 0x0502,   kTextEncodingWindowsGreek = 0x0503,   kTextEncodingWindowsLatin5 = 0x0504,   kTextEncodingWindowsHebrew = 0x0505,   kTextEncodingWindowsArabic = 0x0506,   kTextEncodingWindowsBalticRim = 0x0507,   kTextEncodingWindowsVietnamese = 0x0508,   kTextEncodingWindowsKoreanJohab = 0x0510 };
     enum {    kTextEncodingUS_ASCII = 0x0600,   kTextEncodingANSEL = 0x0601,   kTextEncodingJIS_X0201_76 = 0x0620,   kTextEncodingJIS_X0208_83 = 0x0621,   kTextEncodingJIS_X0208_90 = 0x0622,   kTextEncodingJIS_X0212_90 = 0x0623,   kTextEncodingJIS_C6226_78 = 0x0624,   kTextEncodingShiftJIS_X0213 = 0x0628,   kTextEncodingJIS_X0213_MenKuTen = 0x0629,   kTextEncodingGB_2312_80 = 0x0630,   kTextEncodingGBK_95 = 0x0631,   kTextEncodingGB_18030_2000 = 0x0632,   kTextEncodingGB_18030_2005 = 0x0632,   kTextEncodingKSC_5601_87 = 0x0640,   kTextEncodingKSC_5601_92_Johab = 0x0641,   kTextEncodingCNS_11643_92_P1 = 0x0651,   kTextEncodingCNS_11643_92_P2 = 0x0652,   kTextEncodingCNS_11643_92_P3 = 0x0653 };
     enum {    kTextEncodingISO_2022_JP = 0x0820,   kTextEncodingISO_2022_JP_2 = 0x0821,   kTextEncodingISO_2022_JP_1 = 0x0822,   kTextEncodingISO_2022_JP_3 = 0x0823,   kTextEncodingISO_2022_CN = 0x0830,   kTextEncodingISO_2022_CN_EXT = 0x0831,   kTextEncodingISO_2022_KR = 0x0840 };
     enum {    kTextEncodingEUC_JP = 0x0920,   kTextEncodingEUC_CN = 0x0930,   kTextEncodingEUC_TW = 0x0931,   kTextEncodingEUC_KR = 0x0940 };
     enum {    kTextEncodingShiftJIS = 0x0A01,   kTextEncodingKOI8_R = 0x0A02,   kTextEncodingBig5 = 0x0A03,   kTextEncodingMacRomanLatin1 = 0x0A04,   kTextEncodingHZ_GB_2312 = 0x0A05,   kTextEncodingBig5_HKSCS_1999 = 0x0A06,   kTextEncodingVISCII = 0x0A07,   kTextEncodingKOI8_U = 0x0A08,   kTextEncodingBig5_E = 0x0A09 };
     enum {    kTextEncodingNextStepLatin = 0x0B01,   kTextEncodingNextStepJapanese = 0x0B02 };
     enum {    kTextEncodingEBCDIC_LatinCore = 0x0C01,   kTextEncodingEBCDIC_CP037 = 0x0C02 };
     enum {    kTextEncodingMultiRun = 0x0FFF,   kTextEncodingUnknown = 0xFFFF };
     enum {    kTextEncodingEBCDIC_US = 0x0C01 };
     typedef UInt32 TextEncodingVariant;
     enum {    kTextEncodingDefaultVariant = 0 };
     enum {    kMacRomanDefaultVariant = 0,   kMacRomanCurrencySignVariant = 1,   kMacRomanEuroSignVariant = 2 };
     enum {    kMacCyrillicDefaultVariant = 0,   kMacCyrillicCurrSignStdVariant = 1,   kMacCyrillicCurrSignUkrVariant = 2,   kMacCyrillicEuroSignVariant = 3 };
     enum {    kMacIcelandicStdDefaultVariant = 0,   kMacIcelandicTTDefaultVariant = 1,   kMacIcelandicStdCurrSignVariant = 2,   kMacIcelandicTTCurrSignVariant = 3,   kMacIcelandicStdEuroSignVariant = 4,   kMacIcelandicTTEuroSignVariant = 5 };
     enum {    kMacCroatianDefaultVariant = 0,   kMacCroatianCurrencySignVariant = 1,   kMacCroatianEuroSignVariant = 2 };
     enum {    kMacRomanianDefaultVariant = 0,   kMacRomanianCurrencySignVariant = 1,   kMacRomanianEuroSignVariant = 2 };
     enum {    kMacJapaneseStandardVariant = 0,   kMacJapaneseStdNoVerticalsVariant = 1,   kMacJapaneseBasicVariant = 2,   kMacJapanesePostScriptScrnVariant = 3,   kMacJapanesePostScriptPrintVariant = 4,   kMacJapaneseVertAtKuPlusTenVariant = 5 };
     enum {    kMacArabicStandardVariant = 0,   kMacArabicTrueTypeVariant = 1,   kMacArabicThuluthVariant = 2,   kMacArabicAlBayanVariant = 3 };
     enum {    kMacFarsiStandardVariant = 0,   kMacFarsiTrueTypeVariant = 1 };
     enum {    kMacHebrewStandardVariant = 0,   kMacHebrewFigureSpaceVariant = 1 };
     enum {    kMacGreekDefaultVariant = 0,   kMacGreekNoEuroSignVariant = 1,   kMacGreekEuroSignVariant = 2 };
     enum {    kMacVT100DefaultVariant = 0,   kMacVT100CurrencySignVariant = 1,   kMacVT100EuroSignVariant = 2 };
     enum {    kUnicodeNoSubset = 0,   kUnicodeNormalizationFormD = 5,   kUnicodeNormalizationFormC = 3,   kUnicodeHFSPlusDecompVariant = 8,   kUnicodeHFSPlusCompVariant = 9 };
     enum {    kISOLatin1StandardVariant = 0,   kISOLatin1MusicCDVariant = 1 };
     enum {    kISOLatinArabicImplicitOrderVariant = 0,   kISOLatinArabicVisualOrderVariant = 1,   kISOLatinArabicExplicitOrderVariant = 2 };
     enum {    kISOLatinHebrewImplicitOrderVariant = 0,   kISOLatinHebrewVisualOrderVariant = 1,   kISOLatinHebrewExplicitOrderVariant = 2 };
     enum {    kWindowsLatin1StandardVariant = 0,   kWindowsLatin1PalmVariant = 1 };
     enum {    kDOSJapaneseStandardVariant = 0,   kDOSJapanesePalmVariant = 1 };
     enum {    kEUC_CN_BasicVariant = 0,   kEUC_CN_DOSVariant = 1 };
     enum {    kEUC_KR_BasicVariant = 0,   kEUC_KR_DOSVariant = 1 };
     enum {    kShiftJIS_BasicVariant = 0,   kShiftJIS_DOSVariant = 1,   kShiftJIS_MusicCDVariant = 2 };
     enum {    kBig5_BasicVariant = 0,   kBig5_StandardVariant = 1,   kBig5_ETenVariant = 2,   kBig5_DOSVariant = 3 };
     enum {    kMacRomanLatin1DefaultVariant = 0,   kMacRomanLatin1StandardVariant = 2,   kMacRomanLatin1TurkishVariant = 6,   kMacRomanLatin1CroatianVariant = 8,   kMacRomanLatin1IcelandicVariant = 11,   kMacRomanLatin1RomanianVariant = 14 };
     enum {    kUnicodeNoCompatibilityVariant = 1,   kUnicodeNoCorporateVariant = 4 };
     enum {    kMacRomanStandardVariant = 0,   kMacIcelandicStandardVariant = 0,   kMacIcelandicTrueTypeVariant = 1,   kJapaneseStandardVariant = 0,   kJapaneseStdNoVerticalsVariant = 1,   kJapaneseBasicVariant = 2,   kJapanesePostScriptScrnVariant = 3,   kJapanesePostScriptPrintVariant = 4,   kJapaneseVertAtKuPlusTenVariant = 5,   kTextEncodingShiftJIS_X0213_00 = 0x0628,   kHebrewStandardVariant = 0,   kHebrewFigureSpaceVariant = 1,   kUnicodeCanonicalDecompVariant = 2,   kUnicodeMaxDecomposedVariant = 2,   kUnicodeCanonicalCompVariant = 3,   kUnicodeNoComposedVariant = 3 };
     typedef UInt32 TextEncodingFormat;
     enum {    kTextEncodingDefaultFormat = 0,   kUnicodeUTF16Format = 0,   kUnicodeUTF7Format = 1,   kUnicodeUTF8Format = 2,   kUnicodeUTF32Format = 3,   kUnicodeUTF16BEFormat = 4,   kUnicodeUTF16LEFormat = 5,   kUnicodeUTF32BEFormat = 6,   kUnicodeUTF32LEFormat = 7,   kUnicodeSCSUFormat = 8,   kUnicode16BitFormat = 0,   kUnicode32BitFormat = 3 };
     typedef UInt32 TextEncoding;
     typedef UInt32 TextEncodingNameSelector;
     enum {    kTextEncodingFullName = 0,   kTextEncodingBaseName = 1,   kTextEncodingVariantName = 2,   kTextEncodingFormatName = 3 };
     struct TextEncodingRun {    ByteOffset offset;    TextEncoding textEncoding;  };
     typedef struct TextEncodingRun TextEncodingRun;
     typedef TextEncodingRun * TextEncodingRunPtr;
     typedef const TextEncodingRun * ConstTextEncodingRunPtr;
     struct ScriptCodeRun {    ByteOffset offset;    ScriptCode script;  };
     typedef struct ScriptCodeRun ScriptCodeRun;
     typedef ScriptCodeRun * ScriptCodeRunPtr;
     typedef const ScriptCodeRun * ConstScriptCodeRunPtr;
     typedef UInt8 * TextPtr;
     typedef const UInt8 * ConstTextPtr;
     typedef UniChar * UniCharArrayPtr;
     typedef const UniChar * ConstUniCharArrayPtr;
     typedef UniCharArrayPtr * UniCharArrayHandle;
     typedef unsigned long UniCharArrayOffset;
     enum {    kTextScriptDontCare = -128,   kTextLanguageDontCare = -128,   kTextRegionDontCare = -128 };
     struct TECInfo {    UInt16 format;    UInt16 tecVersion;    UInt32 tecTextConverterFeatures;    UInt32 tecUnicodeConverterFeatures;    UInt32 tecTextCommonFeatures;    Str31 tecTextEncodingsFolderName;    Str31 tecExtensionFileName;    UInt16 tecLowestTEFileVersion;    UInt16 tecHighestTEFileVersion;  };
     typedef struct TECInfo TECInfo;
     typedef TECInfo * TECInfoPtr;
     typedef TECInfoPtr * TECInfoHandle;
     enum {    kTECInfoCurrentFormat = 2 };
     enum {    kTECKeepInfoFixBit = 0,   kTECFallbackTextLengthFixBit = 1,   kTECTextRunBitClearFixBit = 2,   kTECTextToUnicodeScanFixBit = 3,   kTECAddForceASCIIChangesBit = 4,   kTECPreferredEncodingFixBit = 5,   kTECAddTextRunHeuristicsBit = 6,   kTECAddFallbackInterruptBit = 7 };
     enum {    kTECKeepInfoFixMask = 1L << kTECKeepInfoFixBit,   kTECFallbackTextLengthFixMask = 1L << kTECFallbackTextLengthFixBit,   kTECTextRunBitClearFixMask = 1L << kTECTextRunBitClearFixBit,   kTECTextToUnicodeScanFixMask = 1L << kTECTextToUnicodeScanFixBit,   kTECAddForceASCIIChangesMask = 1L << kTECAddForceASCIIChangesBit,   kTECPreferredEncodingFixMask = 1L << kTECPreferredEncodingFixBit,   kTECAddTextRunHeuristicsMask = 1L << kTECAddTextRunHeuristicsBit,   kTECAddFallbackInterruptMask = 1L << kTECAddFallbackInterruptBit };
     enum {    kUnicodeByteOrderMark = 0xFEFF,   kUnicodeObjectReplacement = 0xFFFC,   kUnicodeReplacementChar = 0xFFFD,   kUnicodeSwappedByteOrderMark = 0xFFFE,   kUnicodeNotAChar = 0xFFFF };
     typedef SInt32 UCCharPropertyType;
     enum {    kUCCharPropTypeGenlCategory = 1,   kUCCharPropTypeCombiningClass = 2,   kUCCharPropTypeBidiCategory = 3,   kUCCharPropTypeDecimalDigitValue = 4 };
     typedef UInt32 UCCharPropertyValue;
     enum {    kUCGenlCatOtherNotAssigned = 0,   kUCGenlCatOtherControl = 1,   kUCGenlCatOtherFormat = 2,   kUCGenlCatOtherSurrogate = 3,   kUCGenlCatOtherPrivateUse = 4,   kUCGenlCatMarkNonSpacing = 5,   kUCGenlCatMarkSpacingCombining = 6,   kUCGenlCatMarkEnclosing = 7,   kUCGenlCatNumberDecimalDigit = 8,   kUCGenlCatNumberLetter = 9,   kUCGenlCatNumberOther = 10,   kUCGenlCatSeparatorSpace = 11,   kUCGenlCatSeparatorLine = 12,   kUCGenlCatSeparatorParagraph = 13,   kUCGenlCatLetterUppercase = 14,   kUCGenlCatLetterLowercase = 15,   kUCGenlCatLetterTitlecase = 16,   kUCGenlCatLetterModifier = 17,   kUCGenlCatLetterOther = 18,   kUCGenlCatPunctConnector = 20,   kUCGenlCatPunctDash = 21,   kUCGenlCatPunctOpen = 22,   kUCGenlCatPunctClose = 23,   kUCGenlCatPunctInitialQuote = 24,   kUCGenlCatPunctFinalQuote = 25,   kUCGenlCatPunctOther = 26,   kUCGenlCatSymbolMath = 28,   kUCGenlCatSymbolCurrency = 29,   kUCGenlCatSymbolModifier = 30,   kUCGenlCatSymbolOther = 31 };
     enum {    kUCBidiCatNotApplicable = 0,   kUCBidiCatLeftRight = 1,   kUCBidiCatRightLeft = 2,   kUCBidiCatEuroNumber = 3,   kUCBidiCatEuroNumberSeparator = 4,   kUCBidiCatEuroNumberTerminator = 5,   kUCBidiCatArabicNumber = 6,   kUCBidiCatCommonNumberSeparator = 7,   kUCBidiCatBlockSeparator = 8,   kUCBidiCatSegmentSeparator = 9,   kUCBidiCatWhitespace = 10,   kUCBidiCatOtherNeutral = 11,   kUCBidiCatRightLeftArabic = 12,   kUCBidiCatLeftRightEmbedding = 13,   kUCBidiCatRightLeftEmbedding = 14,   kUCBidiCatLeftRightOverride = 15,   kUCBidiCatRightLeftOverride = 16,   kUCBidiCatPopDirectionalFormat = 17,   kUCBidiCatNonSpacingMark = 18,   kUCBidiCatBoundaryNeutral = 19,   kUCBidiCatLeftRightIsolate = 20,   kUCBidiCatRightLeftIsolate = 21,   kUCBidiCatFirstStrongIsolate = 22,   kUCBidiCatPopDirectionalIsolate = 23 };
     extern TextEncoding CreateTextEncoding(   TextEncodingBase encodingBase,   TextEncodingVariant encodingVariant,   TextEncodingFormat encodingFormat) __attribute__((availability(macosx,introduced=10.0)));
     extern TextEncodingBase GetTextEncodingBase(TextEncoding encoding) __attribute__((availability(macosx,introduced=10.0)));
     extern TextEncodingVariant GetTextEncodingVariant(TextEncoding encoding) __attribute__((availability(macosx,introduced=10.0)));
     extern TextEncodingFormat GetTextEncodingFormat(TextEncoding encoding) __attribute__((availability(macosx,introduced=10.0)));
     extern TextEncoding ResolveDefaultTextEncoding(TextEncoding encoding) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus GetTextEncodingName(   TextEncoding iEncoding,   TextEncodingNameSelector iNamePartSelector,   RegionCode iPreferredRegion,   TextEncoding iPreferredEncoding,   ByteCount iOutputBufLen,   ByteCount * oNameLength,   RegionCode * oActualRegion,   TextEncoding * oActualEncoding,   TextPtr oEncodingName) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus TECGetInfo(TECInfoHandle * tecInfo) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus UpgradeScriptInfoToTextEncoding(   ScriptCode iTextScriptID,   LangCode iTextLanguageID,   RegionCode iRegionID,   ConstStr255Param iTextFontname,   TextEncoding * oEncoding) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus RevertTextEncodingToScriptInfo(   TextEncoding iEncoding,   ScriptCode * oTextScriptID,   LangCode * oTextLanguageID,   Str255 oTextFontname) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus GetTextEncodingFromScriptInfo(   ScriptCode iTextScriptID,   LangCode iTextLanguageID,   RegionCode iTextRegionID,   TextEncoding * oEncoding) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus GetScriptInfoFromTextEncoding(   TextEncoding iEncoding,   ScriptCode * oTextScriptID,   LangCode * oTextLanguageID) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus NearestMacTextEncodings(   TextEncoding generalEncoding,   TextEncoding * bestMacEncoding,   TextEncoding * alternateMacEncoding) __attribute__((availability(macosx,introduced=10.0)));
     extern OSStatus UCGetCharProperty(   const UniChar * charPtr,   UniCharCount textLength,   UCCharPropertyType propType,   UCCharPropertyValue * propValue) __attribute__((availability(macosx,introduced=10.0)));
     enum {    kUCHighSurrogateRangeStart = 0xD800,   kUCHighSurrogateRangeEnd = 0xDBFF,   kUCLowSurrogateRangeStart = 0xDC00,   kUCLowSurrogateRangeEnd = 0xDFFF };
     static __inline__ Boolean UCIsSurrogateHighCharacter( UniChar character ) {     return ( ( character & 0xFC00 ) == kUCHighSurrogateRangeStart );  }
     static __inline__ Boolean UCIsSurrogateLowCharacter( UniChar character ) {      return ( ( character & 0xFC00 ) == kUCLowSurrogateRangeStart );  }
     static __inline__ UnicodeScalarValue UCGetUnicodeScalarValueForSurrogatePair( UniChar surrogateHigh, UniChar surrogateLow ) {   return ( (UnicodeScalarValue)( surrogateHigh - kUCHighSurrogateRangeStart ) << 10 ) + ( surrogateLow - kUCLowSurrogateRangeStart ) + 0x0010000;  }
     enum {    kRoutineDescriptorVersion = 7 };
     enum {    _MixedModeMagic = 0xAAFE };
     enum {    kCurrentMixedModeStateRecord = 1 };
     typedef unsigned short CallingConventionType;
     enum {    kPascalStackBased = 0,   kCStackBased = 1,   kRegisterBased = 2,   kD0DispatchedPascalStackBased = 8,   kD1DispatchedPascalStackBased = 12,   kD0DispatchedCStackBased = 9,   kStackDispatchedPascalStackBased = 14,   kThinkCStackBased = 5 };
     typedef SInt8 ISAType;
     enum {    kM68kISA = 0,   kPowerPCISA = 1 };
     enum {    kX86ISA = 2 };
     typedef SInt8 RTAType;
     enum {    kOld68kRTA = 0 << 4,   kPowerPCRTA = 0 << 4,   kCFM68kRTA = 1 << 4 };
     enum {    kX86RTA = 2 << 4 };
     enum {    kRegisterD0 = 0,   kRegisterD1 = 1,   kRegisterD2 = 2,   kRegisterD3 = 3,   kRegisterD4 = 8,   kRegisterD5 = 9,   kRegisterD6 = 10,   kRegisterD7 = 11,   kRegisterA0 = 4,   kRegisterA1 = 5,   kRegisterA2 = 6,   kRegisterA3 = 7,   kRegisterA4 = 12,   kRegisterA5 = 13,   kRegisterA6 = 14,   kCCRegisterCBit = 16,   kCCRegisterVBit = 17,   kCCRegisterZBit = 18,   kCCRegisterNBit = 19,   kCCRegisterXBit = 20 };
     typedef unsigned short registerSelectorType;
     enum {    kNoByteCode = 0,   kOneByteCode = 1,   kTwoByteCode = 2,   kFourByteCode = 3 };
     typedef unsigned long ProcInfoType;
     typedef unsigned short RoutineFlagsType;
     enum {    kProcDescriptorIsAbsolute = 0x00,   kProcDescriptorIsRelative = 0x01 };
     enum {    kFragmentIsPrepared = 0x00,   kFragmentNeedsPreparing = 0x02 };
     enum {    kUseCurrentISA = 0x00,   kUseNativeISA = 0x04 };
     enum {    kPassSelector = 0x00,   kDontPassSelector = 0x08 };
     enum {    kRoutineIsNotDispatchedDefaultRoutine = 0x00,   kRoutineIsDispatchedDefaultRoutine = 0x10 };
     enum {    kProcDescriptorIsProcPtr = 0x00,   kProcDescriptorIsIndex = 0x20 };
     struct RoutineRecord {    ProcInfoType procInfo;    SInt8 reserved1;    ISAType ISA;    RoutineFlagsType routineFlags;    ProcPtr procDescriptor;    UInt32 reserved2;    UInt32 selector;  };
     typedef struct RoutineRecord RoutineRecord;
     typedef RoutineRecord * RoutineRecordPtr;
     typedef RoutineRecordPtr * RoutineRecordHandle;
     typedef UInt8 RDFlagsType;
     enum {    kSelectorsAreNotIndexable = 0x00,   kSelectorsAreIndexable = 0x01 };
     struct RoutineDescriptor {    UInt16 goMixedModeTrap;    SInt8 version;    RDFlagsType routineDescriptorFlags;    UInt32 reserved1;    UInt8 reserved2;    UInt8 selectorInfo;    UInt16 routineCount;    RoutineRecord routineRecords[1];  };
     typedef struct RoutineDescriptor RoutineDescriptor;
     typedef RoutineDescriptor * RoutineDescriptorPtr;
     typedef RoutineDescriptorPtr * RoutineDescriptorHandle;
     struct MixedModeStateRecord {    UInt32 state1;    UInt32 state2;    UInt32 state3;    UInt32 state4;  };
     typedef struct MixedModeStateRecord MixedModeStateRecord;
     enum {    kCallingConventionWidth = 4,   kCallingConventionPhase = 0,   kCallingConventionMask = 0x0F,   kResultSizeWidth = 2,   kResultSizePhase = kCallingConventionWidth,   kResultSizeMask = 0x30,   kStackParameterWidth = 2,   kStackParameterPhase = (kCallingConventionWidth + kResultSizeWidth),   kStackParameterMask = (int)0xFFFFFFC0,   kRegisterResultLocationWidth = 5,   kRegisterResultLocationPhase = (kCallingConventionWidth + kResultSizeWidth),   kRegisterParameterWidth = 5,   kRegisterParameterPhase = (kCallingConventionWidth + kResultSizeWidth + kRegisterResultLocationWidth),   kRegisterParameterMask = 0x7FFFF800,   kRegisterParameterSizePhase = 0,   kRegisterParameterSizeWidth = 2,   kRegisterParameterWhichPhase = kRegisterParameterSizeWidth,   kRegisterParameterWhichWidth = 3,   kDispatchedSelectorSizeWidth = 2,   kDispatchedSelectorSizePhase = (kCallingConventionWidth + kResultSizeWidth),   kDispatchedParameterPhase = (kCallingConventionWidth + kResultSizeWidth + kDispatchedSelectorSizeWidth),   kSpecialCaseSelectorWidth = 6,   kSpecialCaseSelectorPhase = kCallingConventionWidth,   kSpecialCaseSelectorMask = 0x03F0 };
     enum {    kSpecialCase = 0x000F };
     enum {    kSpecialCaseHighHook = 0,   kSpecialCaseCaretHook = 0,   kSpecialCaseEOLHook = 1,   kSpecialCaseWidthHook = 2,   kSpecialCaseTextWidthHook = 2,   kSpecialCaseNWidthHook = 3,   kSpecialCaseDrawHook = 4,   kSpecialCaseHitTestHook = 5,   kSpecialCaseTEFindWord = 6,   kSpecialCaseProtocolHandler = 7,   kSpecialCaseSocketListener = 8,   kSpecialCaseTERecalc = 9,   kSpecialCaseTEDoText = 10,   kSpecialCaseGNEFilterProc = 11,   kSpecialCaseMBarHook = 12 };
     enum {    kCollectionDontWantTag = 0,   kCollectionDontWantId = 0,   kCollectionDontWantSize = 0,   kCollectionDontWantAttributes = 0,   kCollectionDontWantIndex = 0,   kCollectionDontWantData = 0 };
     enum {    kCollectionNoAttributes = 0x00000000,   kCollectionAllAttributes = (int)0xFFFFFFFF,   kCollectionUserAttributes = 0x0000FFFF,   kCollectionDefaultAttributes = 0x40000000 };
     enum {    kCollectionUser0Bit = 0,   kCollectionUser1Bit = 1,   kCollectionUser2Bit = 2,   kCollectionUser3Bit = 3,   kCollectionUser4Bit = 4,   kCollectionUser5Bit = 5,   kCollectionUser6Bit = 6,   kCollectionUser7Bit = 7,   kCollectionUser8Bit = 8,   kCollectionUser9Bit = 9,   kCollectionUser10Bit = 10,   kCollectionUser11Bit = 11,   kCollectionUser12Bit = 12,   kCollectionUser13Bit = 13,   kCollectionUser14Bit = 14,   kCollectionUser15Bit = 15,   kCollectionReserved0Bit = 16,   kCollectionReserved1Bit = 17,   kCollectionReserved2Bit = 18,   kCollectionReserved3Bit = 19,   kCollectionReserved4Bit = 20,   kCollectionReserved5Bit = 21,   kCollectionReserved6Bit = 22,   kCollectionReserved7Bit = 23,   kCollectionReserved8Bit = 24,   kCollectionReserved9Bit = 25,   kCollectionReserved10Bit = 26,   kCollectionReserved11Bit = 27,   kCollectionReserved12Bit = 28,   kCollectionReserved13Bit = 29,   kCollectionPersistenceBit = 30,   kCollectionLockBit = 31 };
     enum {    kCollectionUser0Mask = 1UL << kCollectionUser0Bit,   kCollectionUser1Mask = 1UL << kCollectionUser1Bit,   kCollectionUser2Mask = 1UL << kCollectionUser2Bit,   kCollectionUser3Mask = 1UL << kCollectionUser3Bit,   kCollectionUser4Mask = 1UL << kCollectionUser4Bit,   kCollectionUser5Mask = 1UL << kCollectionUser5Bit,   kCollectionUser6Mask = 1UL << kCollectionUser6Bit,   kCollectionUser7Mask = 1UL << kCollectionUser7Bit,   kCollectionUser8Mask = 1UL << kCollectionUser8Bit,   kCollectionUser9Mask = 1UL << kCollectionUser9Bit,   kCollectionUser10Mask = 1UL << kCollectionUser10Bit,   kCollectionUser11Mask = 1UL << kCollectionUser11Bit,   kCollectionUser12Mask = 1UL << kCollectionUser12Bit,   kCollectionUser13Mask = 1UL << kCollectionUser13Bit,   kCollectionUser14Mask = 1UL << kCollectionUser14Bit,   kCollectionUser15Mask = 1UL << kCollectionUser15Bit,   kCollectionReserved0Mask = 1UL << kCollectionReserved0Bit,   kCollectionReserved1Mask = 1UL << kCollectionReserved1Bit,   kCollectionReserved2Mask = 1UL << kCollectionReserved2Bit,   kCollectionReserved3Mask = 1UL << kCollectionReserved3Bit,   kCollectionReserved4Mask = 1UL << kCollectionReserved4Bit,   kCollectionReserved5Mask = 1UL << kCollectionReserved5Bit,   kCollectionReserved6Mask = 1UL << kCollectionReserved6Bit,   kCollectionReserved7Mask = 1UL << kCollectionReserved7Bit,   kCollectionReserved8Mask = 1UL << kCollectionReserved8Bit,   kCollectionReserved9Mask = 1UL << kCollectionReserved9Bit,   kCollectionReserved10Mask = 1UL << kCollectionReserved10Bit,   kCollectionReserved11Mask = 1UL << kCollectionReserved11Bit,   kCollectionReserved12Mask = 1UL << kCollectionReserved12Bit,   kCollectionReserved13Mask = 1UL << kCollectionReserved13Bit,   kCollectionPersistenceMask = 1UL << kCollectionPersistenceBit,   kCollectionLockMask = 1UL << kCollectionLockBit };
     typedef struct OpaqueCollection* Collection;
     typedef FourCharCode CollectionTag;
     typedef OSErr ( * CollectionFlattenProcPtr)(SInt32 size, void *data, void *refCon);
     typedef OSErr ( * CollectionExceptionProcPtr)(Collection c, OSErr status);
     typedef CollectionFlattenProcPtr CollectionFlattenUPP;
     typedef CollectionExceptionProcPtr CollectionExceptionUPP;
     extern CollectionFlattenUPP NewCollectionFlattenUPP(CollectionFlattenProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern CollectionExceptionUPP NewCollectionExceptionUPP(CollectionExceptionProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void DisposeCollectionFlattenUPP(CollectionFlattenUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void DisposeCollectionExceptionUPP(CollectionExceptionUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr InvokeCollectionFlattenUPP(   SInt32 size,   void * data,   void * refCon,   CollectionFlattenUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr InvokeCollectionExceptionUPP(   Collection c,   OSErr status,   CollectionExceptionUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Collection NewCollection(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void DisposeCollection(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Collection CloneCollection(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 CountCollectionOwners(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSStatus RetainCollection(Collection c) __attribute__((availability(macosx,introduced=10.1,deprecated=10.8)));
     extern OSStatus ReleaseCollection(Collection c) __attribute__((availability(macosx,introduced=10.1,deprecated=10.8)));
     extern ItemCount GetCollectionRetainCount(Collection c) __attribute__((availability(macosx,introduced=10.1,deprecated=10.8)));
     extern Collection CopyCollection(   Collection srcCollection,   Collection dstCollection) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 GetCollectionDefaultAttributes(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void SetCollectionDefaultAttributes(   Collection c,   SInt32 whichAttributes,   SInt32 newAttributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 CountCollectionItems(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr AddCollectionItem(   Collection c,   CollectionTag tag,   SInt32 id,   SInt32 itemSize,   const void * itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetCollectionItem(   Collection c,   CollectionTag tag,   SInt32 id,   SInt32 * itemSize,   void * itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr RemoveCollectionItem(   Collection c,   CollectionTag tag,   SInt32 id) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr SetCollectionItemInfo(   Collection c,   CollectionTag tag,   SInt32 id,   SInt32 whichAttributes,   SInt32 newAttributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetCollectionItemInfo(   Collection c,   CollectionTag tag,   SInt32 id,   SInt32 * itemIndex,   SInt32 * itemSize,   SInt32 * attributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr ReplaceIndexedCollectionItem(   Collection c,   SInt32 itemIndex,   SInt32 itemSize,   const void * itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetIndexedCollectionItem(   Collection c,   SInt32 itemIndex,   SInt32 * itemSize,   void * itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr RemoveIndexedCollectionItem(   Collection c,   SInt32 itemIndex) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr SetIndexedCollectionItemInfo(   Collection c,   SInt32 itemIndex,   SInt32 whichAttributes,   SInt32 newAttributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetIndexedCollectionItemInfo(   Collection c,   SInt32 itemIndex,   CollectionTag * tag,   SInt32 * id,   SInt32 * itemSize,   SInt32 * attributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Boolean CollectionTagExists(   Collection c,   CollectionTag tag) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 CountCollectionTags(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetIndexedCollectionTag(   Collection c,   SInt32 tagIndex,   CollectionTag * tag) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 CountTaggedCollectionItems(   Collection c,   CollectionTag tag) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetTaggedCollectionItem(   Collection c,   CollectionTag tag,   SInt32 whichItem,   SInt32 * itemSize,   void * itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetTaggedCollectionItemInfo(   Collection c,   CollectionTag tag,   SInt32 whichItem,   SInt32 * id,   SInt32 * itemIndex,   SInt32 * itemSize,   SInt32 * attributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void PurgeCollection(   Collection c,   SInt32 whichAttributes,   SInt32 matchingAttributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void PurgeCollectionTag(   Collection c,   CollectionTag tag) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void EmptyCollection(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr FlattenCollection(   Collection c,   CollectionFlattenUPP flattenProc,   void * refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr FlattenPartialCollection(   Collection c,   CollectionFlattenUPP flattenProc,   void * refCon,   SInt32 whichAttributes,   SInt32 matchingAttributes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr UnflattenCollection(   Collection c,   CollectionFlattenUPP flattenProc,   void * refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern CollectionExceptionUPP GetCollectionExceptionProc(Collection c) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void SetCollectionExceptionProc(   Collection c,   CollectionExceptionUPP exceptionProc) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Collection GetNewCollection(SInt16 collectionID) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr AddCollectionItemHdl(   Collection aCollection,   CollectionTag tag,   SInt32 id,   Handle itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetCollectionItemHdl(   Collection aCollection,   CollectionTag tag,   SInt32 id,   Handle itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr ReplaceIndexedCollectionItemHdl(   Collection aCollection,   SInt32 itemIndex,   Handle itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetIndexedCollectionItemHdl(   Collection aCollection,   SInt32 itemIndex,   Handle itemData) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr FlattenCollectionToHdl(   Collection aCollection,   Handle flattened) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr UnflattenCollectionFromHdl(   Collection aCollection,   Handle flattened) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     struct BigEndianUInt32 {    UInt32 bigEndianValue;  };
     typedef struct BigEndianUInt32 BigEndianUInt32;
     struct BigEndianLong {    long bigEndianValue;  };
     typedef struct BigEndianLong BigEndianLong;
     struct BigEndianUnsignedLong {    unsigned long bigEndianValue;  };
     typedef struct BigEndianUnsignedLong BigEndianUnsignedLong;
     struct BigEndianShort {    short bigEndianValue;  };
     typedef struct BigEndianShort BigEndianShort;
     struct BigEndianUnsignedShort {    unsigned short bigEndianValue;  };
     typedef struct BigEndianUnsignedShort BigEndianUnsignedShort;
     struct BigEndianFixed {    Fixed bigEndianValue;  };
     typedef struct BigEndianFixed BigEndianFixed;
     struct BigEndianUnsignedFixed {    UnsignedFixed bigEndianValue;  };
     typedef struct BigEndianUnsignedFixed BigEndianUnsignedFixed;
     enum {    gestaltDisplayMgrVers = 'dplv' };
     enum {    gestaltDisplayMgrAttr = 'dply',   gestaltDisplayMgrPresent = 0,   gestaltDisplayMgrCanSwitchMirrored = 2,   gestaltDisplayMgrSetDepthNotifies = 3,   gestaltDisplayMgrCanConfirm = 4,   gestaltDisplayMgrColorSyncAware = 5,   gestaltDisplayMgrGeneratesProfiles = 6,   gestaltDisplayMgrSleepNotifies = 7 };
     enum {    gestaltDragMgrAttr = 'drag',   gestaltDragMgrPresent = 0,   gestaltDragMgrFloatingWind = 1,   gestaltPPCDragLibPresent = 2,   gestaltDragMgrHasImageSupport = 3,   gestaltCanStartDragInFloatWindow = 4,   gestaltSetDragImageUpdates = 5 };
     enum {    gestaltDrawSprocketVersion = 'dspv' };
     enum {    gestaltDigitalSignatureVersion = 'dsig' };
     enum {    gestaltDTPFeatures = 'dtpf',   kDTPThirdPartySupported = 0x00000004 };
     enum {    gestaltDTPInfo = 'dtpx' };
     enum {    gestaltEasyAccessAttr = 'easy',   gestaltEasyAccessOff = 0,   gestaltEasyAccessOn = 1,   gestaltEasyAccessSticky = 2,   gestaltEasyAccessLocked = 3 };
     enum {    gestaltEditionMgrAttr = 'edtn',   gestaltEditionMgrPresent = 0,   gestaltEditionMgrTranslationAware = 1 };
     enum {    gestaltAppleEventsAttr = 'evnt',   gestaltAppleEventsPresent = 0,   gestaltScriptingSupport = 1,   gestaltOSLInSystem = 2,   gestaltSupportsApplicationURL = 4 };
     enum {    gestaltExtensionTableVersion = 'etbl' };
     enum {    gestaltFBCIndexingState = 'fbci',   gestaltFBCindexingSafe = 0,   gestaltFBCindexingCritical = 1 };
     enum {    gestaltFBCVersion = 'fbcv',   gestaltFBCCurrentVersion = 0x0011,   gestaltOSXFBCCurrentVersion = 0x0100 };
     enum {    gestaltFileMappingAttr = 'flmp',   gestaltFileMappingPresent = 0,   gestaltFileMappingMultipleFilesFix = 1 };
     enum {    gestaltFloppyAttr = 'flpy',   gestaltFloppyIsMFMOnly = 0,   gestaltFloppyIsManualEject = 1,   gestaltFloppyUsesDiskInPlace = 2 };
     enum {    gestaltFinderAttr = 'fndr',   gestaltFinderDropEvent = 0,   gestaltFinderMagicPlacement = 1,   gestaltFinderCallsAEProcess = 2,   gestaltOSLCompliantFinder = 3,   gestaltFinderSupports4GBVolumes = 4,   gestaltFinderHasClippings = 6,   gestaltFinderFullDragManagerSupport = 7,   gestaltFinderFloppyRootComments = 8,   gestaltFinderLargeAndNotSavedFlavorsOK = 9,   gestaltFinderUsesExtensibleFolderManager = 10,   gestaltFinderUnderstandsRedirectedDesktopFolder = 11 };
     enum {    gestaltFindFolderAttr = 'fold',   gestaltFindFolderPresent = 0,   gestaltFolderDescSupport = 1,   gestaltFolderMgrFollowsAliasesWhenResolving = 2,   gestaltFolderMgrSupportsExtendedCalls = 3,   gestaltFolderMgrSupportsDomains = 4,   gestaltFolderMgrSupportsFSCalls = 5 };
     enum {    gestaltFindFolderRedirectionAttr = 'fole' };
     enum {    gestaltFontMgrAttr = 'font',   gestaltOutlineFonts = 0 };
     enum {    gestaltFPUType = 'fpu ',   gestaltNoFPU = 0,   gestalt68881 = 1,   gestalt68882 = 2,   gestalt68040FPU = 3 };
     enum {    gestaltFSAttr = 'fs  ',   gestaltFullExtFSDispatching = 0,   gestaltHasFSSpecCalls = 1,   gestaltHasFileSystemManager = 2,   gestaltFSMDoesDynamicLoad = 3,   gestaltFSSupports4GBVols = 4,   gestaltFSSupports2TBVols = 5,   gestaltHasExtendedDiskInit = 6,   gestaltDTMgrSupportsFSM = 7,   gestaltFSNoMFSVols = 8,   gestaltFSSupportsHFSPlusVols = 9,   gestaltFSIncompatibleDFA82 = 10 };
     enum {    gestaltFSSupportsDirectIO = 11 };
     enum {    gestaltHasHFSPlusAPIs = 12,   gestaltMustUseFCBAccessors = 13,   gestaltFSUsesPOSIXPathsForConversion = 14,   gestaltFSSupportsExclusiveLocks = 15,   gestaltFSSupportsHardLinkDetection = 16,   gestaltFSAllowsConcurrentAsyncIO = 17 };
     enum {    gestaltAdminFeaturesFlagsAttr = 'fred',   gestaltFinderUsesSpecialOpenFoldersFile = 0 };
     enum {    gestaltFSMVersion = 'fsm ' };
     enum {    gestaltFXfrMgrAttr = 'fxfr',   gestaltFXfrMgrPresent = 0,   gestaltFXfrMgrMultiFile = 1,   gestaltFXfrMgrErrorString = 2,   gestaltFXfrMgrAsync = 3 };
     enum {    gestaltGraphicsAttr = 'gfxa',   gestaltGraphicsIsDebugging = 0x00000001,   gestaltGraphicsIsLoaded = 0x00000002,   gestaltGraphicsIsPowerPC = 0x00000004 };
     enum {    gestaltGraphicsVersion = 'grfx',   gestaltCurrentGraphicsVersion = 0x00010200 };
     enum {    gestaltHardwareAttr = 'hdwr',   gestaltHasVIA1 = 0,   gestaltHasVIA2 = 1,   gestaltHasASC = 3,   gestaltHasSCC = 4,   gestaltHasSCSI = 7,   gestaltHasSoftPowerOff = 19,   gestaltHasSCSI961 = 21,   gestaltHasSCSI962 = 22,   gestaltHasUniversalROM = 24,   gestaltHasEnhancedLtalk = 30 };
     enum {    gestaltHelpMgrAttr = 'help',   gestaltHelpMgrPresent = 0,   gestaltHelpMgrExtensions = 1,   gestaltAppleGuideIsDebug = 30,   gestaltAppleGuidePresent = 31 };
     enum {    gestaltHardwareVendorCode = 'hrad',   gestaltHardwareVendorApple = 'Appl' };
     enum {    gestaltCompressionMgr = 'icmp' };
     enum {    gestaltIconUtilitiesAttr = 'icon',   gestaltIconUtilitiesPresent = 0,   gestaltIconUtilitiesHas48PixelIcons = 1,   gestaltIconUtilitiesHas32BitIcons = 2,   gestaltIconUtilitiesHas8BitDeepMasks = 3,   gestaltIconUtilitiesHasIconServices = 4 };
     enum {    gestaltInternalDisplay = 'idsp' };
     enum {    gestaltKeyboardType = 'kbd ',   gestaltMacKbd = 1,   gestaltMacAndPad = 2,   gestaltMacPlusKbd = 3,   gestaltUnknownThirdPartyKbd = 3,   gestaltExtADBKbd = 4,   gestaltStdADBKbd = 5,   gestaltPrtblADBKbd = 6,   gestaltPrtblISOKbd = 7,   gestaltStdISOADBKbd = 8,   gestaltExtISOADBKbd = 9,   gestaltADBKbdII = 10,   gestaltADBISOKbdII = 11,   gestaltPwrBookADBKbd = 12,   gestaltPwrBookISOADBKbd = 13,   gestaltAppleAdjustKeypad = 14,   gestaltAppleAdjustADBKbd = 15,   gestaltAppleAdjustISOKbd = 16,   gestaltJapanAdjustADBKbd = 17,   gestaltPwrBkExtISOKbd = 20,   gestaltPwrBkExtJISKbd = 21,   gestaltPwrBkExtADBKbd = 24,   gestaltPS2Keyboard = 27,   gestaltPwrBkSubDomKbd = 28,   gestaltPwrBkSubISOKbd = 29,   gestaltPwrBkSubJISKbd = 30,   gestaltPortableUSBANSIKbd = 37,   gestaltPortableUSBISOKbd = 38,   gestaltPortableUSBJISKbd = 39,   gestaltThirdPartyANSIKbd = 40,   gestaltThirdPartyISOKbd = 41,   gestaltThirdPartyJISKbd = 42,   gestaltPwrBkEKDomKbd = 195,   gestaltPwrBkEKISOKbd = 196,   gestaltPwrBkEKJISKbd = 197,   gestaltUSBCosmoANSIKbd = 198,   gestaltUSBCosmoISOKbd = 199,   gestaltUSBCosmoJISKbd = 200,   gestaltPwrBk99JISKbd = 201,   gestaltUSBAndyANSIKbd = 204,   gestaltUSBAndyISOKbd = 205,   gestaltUSBAndyJISKbd = 206 };
     enum {    gestaltPortable2001ANSIKbd = 202,   gestaltPortable2001ISOKbd = 203,   gestaltPortable2001JISKbd = 207 };
     enum {    gestaltUSBProF16ANSIKbd = 34,   gestaltUSBProF16ISOKbd = 35,   gestaltUSBProF16JISKbd = 36,   gestaltProF16ANSIKbd = 31,   gestaltProF16ISOKbd = 32,   gestaltProF16JISKbd = 33 };
     enum {    gestaltUDFSupport = 'kudf' };
     enum {    gestaltLowMemorySize = 'lmem' };
     enum {    gestaltLogicalRAMSize = 'lram' };
     enum {    gestaltMachineType = 'mach',   gestaltClassic = 1,   gestaltMacXL = 2,   gestaltMac512KE = 3,   gestaltMacPlus = 4,   gestaltMacSE = 5,   gestaltMacII = 6,   gestaltMacIIx = 7,   gestaltMacIIcx = 8,   gestaltMacSE030 = 9,   gestaltPortable = 10,   gestaltMacIIci = 11,   gestaltPowerMac8100_120 = 12,   gestaltMacIIfx = 13,   gestaltMacClassic = 17,   gestaltMacIIsi = 18,   gestaltMacLC = 19,   gestaltMacQuadra900 = 20,   gestaltPowerBook170 = 21,   gestaltMacQuadra700 = 22,   gestaltClassicII = 23,   gestaltPowerBook100 = 24,   gestaltPowerBook140 = 25,   gestaltMacQuadra950 = 26,   gestaltMacLCIII = 27,   gestaltPerforma450 = gestaltMacLCIII,   gestaltPowerBookDuo210 = 29,   gestaltMacCentris650 = 30,   gestaltPowerBookDuo230 = 32,   gestaltPowerBook180 = 33,   gestaltPowerBook160 = 34,   gestaltMacQuadra800 = 35,   gestaltMacQuadra650 = 36,   gestaltMacLCII = 37,   gestaltPowerBookDuo250 = 38,   gestaltAWS9150_80 = 39,   gestaltPowerMac8100_110 = 40,   gestaltAWS8150_110 = gestaltPowerMac8100_110,   gestaltPowerMac5200 = 41,   gestaltPowerMac5260 = gestaltPowerMac5200,   gestaltPerforma5300 = gestaltPowerMac5200,   gestaltPowerMac6200 = 42,   gestaltPerforma6300 = gestaltPowerMac6200,   gestaltMacIIvi = 44,   gestaltMacIIvm = 45,   gestaltPerforma600 = gestaltMacIIvm,   gestaltPowerMac7100_80 = 47,   gestaltMacIIvx = 48,   gestaltMacColorClassic = 49,   gestaltPerforma250 = gestaltMacColorClassic,   gestaltPowerBook165c = 50,   gestaltMacCentris610 = 52,   gestaltMacQuadra610 = 53,   gestaltPowerBook145 = 54,   gestaltPowerMac8100_100 = 55,   gestaltMacLC520 = 56,   gestaltAWS9150_120 = 57,   gestaltPowerMac6400 = 58,   gestaltPerforma6400 = gestaltPowerMac6400,   gestaltPerforma6360 = gestaltPerforma6400,   gestaltMacCentris660AV = 60,   gestaltMacQuadra660AV = gestaltMacCentris660AV,   gestaltPerforma46x = 62,   gestaltPowerMac8100_80 = 65,   gestaltAWS8150_80 = gestaltPowerMac8100_80,   gestaltPowerMac9500 = 67,   gestaltPowerMac9600 = gestaltPowerMac9500,   gestaltPowerMac7500 = 68,   gestaltPowerMac7600 = gestaltPowerMac7500,   gestaltPowerMac8500 = 69,   gestaltPowerMac8600 = gestaltPowerMac8500,   gestaltAWS8550 = gestaltPowerMac7500,   gestaltPowerBook180c = 71,   gestaltPowerBook520 = 72,   gestaltPowerBook520c = gestaltPowerBook520,   gestaltPowerBook540 = gestaltPowerBook520,   gestaltPowerBook540c = gestaltPowerBook520,   gestaltPowerMac5400 = 74,   gestaltPowerMac6100_60 = 75,   gestaltAWS6150_60 = gestaltPowerMac6100_60,   gestaltPowerBookDuo270c = 77,   gestaltMacQuadra840AV = 78,   gestaltPerforma550 = 80,   gestaltPowerBook165 = 84,   gestaltPowerBook190 = 85,   gestaltMacTV = 88,   gestaltMacLC475 = 89,   gestaltPerforma47x = gestaltMacLC475,   gestaltMacLC575 = 92,   gestaltMacQuadra605 = 94,   gestaltMacQuadra630 = 98,   gestaltMacLC580 = 99,   gestaltPerforma580 = gestaltMacLC580,   gestaltPowerMac6100_66 = 100,   gestaltAWS6150_66 = gestaltPowerMac6100_66,   gestaltPowerBookDuo280 = 102,   gestaltPowerBookDuo280c = 103,   gestaltPowerMacLC475 = 104,   gestaltPowerMacPerforma47x = gestaltPowerMacLC475,   gestaltPowerMacLC575 = 105,   gestaltPowerMacPerforma57x = gestaltPowerMacLC575,   gestaltPowerMacQuadra630 = 106,   gestaltPowerMacLC630 = gestaltPowerMacQuadra630,   gestaltPowerMacPerforma63x = gestaltPowerMacQuadra630,   gestaltPowerMac7200 = 108,   gestaltPowerMac7300 = 109,   gestaltPowerMac7100_66 = 112,   gestaltPowerBook150 = 115,   gestaltPowerMacQuadra700 = 116,   gestaltPowerMacQuadra900 = 117,   gestaltPowerMacQuadra950 = 118,   gestaltPowerMacCentris610 = 119,   gestaltPowerMacCentris650 = 120,   gestaltPowerMacQuadra610 = 121,   gestaltPowerMacQuadra650 = 122,   gestaltPowerMacQuadra800 = 123,   gestaltPowerBookDuo2300 = 124,   gestaltPowerBook500PPCUpgrade = 126,   gestaltPowerBook5300 = 128,   gestaltPowerBook1400 = 310,   gestaltPowerBook3400 = 306,   gestaltPowerBook2400 = 307,   gestaltPowerBookG3Series = 312,   gestaltPowerBookG3 = 313,   gestaltPowerBookG3Series2 = 314,   gestaltPowerMacNewWorld = 406,   gestaltPowerMacG3 = 510,   gestaltPowerMac5500 = 512,   gestalt20thAnniversary = gestaltPowerMac5500,   gestaltPowerMac6500 = 513,   gestaltPowerMac4400_160 = 514,   gestaltPowerMac4400 = 515,   gestaltMacOSCompatibility = 1206 };
     enum {    gestaltQuadra605 = gestaltMacQuadra605,   gestaltQuadra610 = gestaltMacQuadra610,   gestaltQuadra630 = gestaltMacQuadra630,   gestaltQuadra650 = gestaltMacQuadra650,   gestaltQuadra660AV = gestaltMacQuadra660AV,   gestaltQuadra700 = gestaltMacQuadra700,   gestaltQuadra800 = gestaltMacQuadra800,   gestaltQuadra840AV = gestaltMacQuadra840AV,   gestaltQuadra900 = gestaltMacQuadra900,   gestaltQuadra950 = gestaltMacQuadra950 };
     enum {    kMachineNameStrID = -16395 };
     typedef struct DateCacheRecord DateCacheRecord;
     typedef DateCacheRecord * DateCachePtr;
     struct DateTimeRec {    short year;    short month;    short day;    short hour;    short minute;    short second;    short dayOfWeek;  };
     typedef struct DateTimeRec DateTimeRec;
     typedef SInt64 LongDateTime;
     union LongDateCvt {    SInt64 c;    struct {     UInt32 lLow;     UInt32 lHigh;   }  hl;  };
     typedef union LongDateCvt LongDateCvt;
     union LongDateRec {    struct {     short era;     short year;     short month;     short day;     short hour;     short minute;     short second;     short dayOfWeek;     short dayOfYear;     short weekOfYear;     short pm;     short res1;     short res2;     short res3;   }  ld;    short list[14];    struct {     short eraAlt;     DateTimeRec oldDate;   }  od;  };
     typedef union LongDateRec LongDateRec;
     typedef SInt8 DateDelta;
     struct TogglePB {    long togFlags;    ResType amChars;    ResType pmChars;    long reserved[4];  };
     typedef struct TogglePB TogglePB;
     extern OSStatus UCConvertUTCDateTimeToCFAbsoluteTime(   const UTCDateTime * iUTCDate,   CFAbsoluteTime * oCFTime) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus UCConvertSecondsToCFAbsoluteTime(   UInt32 iSeconds,   CFAbsoluteTime * oCFTime) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus UCConvertLongDateTimeToCFAbsoluteTime(   LongDateTime iLongTime,   CFAbsoluteTime * oCFTime) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus UCConvertCFAbsoluteTimeToUTCDateTime(   CFAbsoluteTime iCFTime,   UTCDateTime * oUTCDate) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus UCConvertCFAbsoluteTimeToSeconds(   CFAbsoluteTime iCFTime,   UInt32 * oSeconds) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus UCConvertCFAbsoluteTimeToLongDateTime(   CFAbsoluteTime iCFTime,   LongDateTime * oLongDate) __attribute__((availability(macosx,introduced=10.2)));
     enum {    sortsBefore = -1,   sortsEqual = 0,   sortsAfter = 1 };
     enum {    dummyType = 0,   vType = 1,   ioQType = 2,   drvQType = 3,   evType = 4,   fsQType = 5,   sIQType = 6,   dtQType = 7,   nmType = 8 };
     typedef SignedByte QTypes;
     struct QElem {    struct QElem * qLink;    short qType;    short qData[1];  };
     typedef struct QElem QElem;
     typedef QElem * QElemPtr;
     struct QHdr {    volatile short qFlags;    volatile QElemPtr qHead;    volatile QElemPtr qTail;  };
     typedef struct QHdr QHdr;
     typedef QHdr * QHdrPtr;
     struct MachineLocation {      Fract latitude;      Fract longitude;      union {         long gmtDelta;         struct {             SInt8 pad[3];             SInt8 Delta;         } dls;     }  u;  };
     typedef struct MachineLocation MachineLocation;
     extern Boolean IsMetric(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern void Delay(   unsigned long numTicks,   unsigned long * finalTicks) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void Enqueue(   QElemPtr qElement,   QHdrPtr qHeader) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr Dequeue(   QElemPtr qElement,   QHdrPtr qHeader) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void ReadLocation(MachineLocation * loc) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt32 TickCount(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern CFStringRef CSCopyUserName(Boolean useShortName) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern CFStringRef CSCopyMachineName(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     enum {    useFree = 0,   useATalk = 1,   useAsync = 2,   useExtClk = 3,   useMIDI = 4 };
     enum {    false32b = 0,   true32b = 1 }
     __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     typedef void * SysPPtr;
     typedef void ( * DeferredTaskProcPtr)(long dtParam);
     typedef DeferredTaskProcPtr DeferredTaskUPP;
     extern DeferredTaskUPP NewDeferredTaskUPP(DeferredTaskProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void DisposeDeferredTaskUPP(DeferredTaskUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern void InvokeDeferredTaskUPP(   long dtParam,   DeferredTaskUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     struct DeferredTask {    volatile QElemPtr qLink;    short qType;    volatile short dtFlags;    DeferredTaskUPP dtAddr;    long dtParam;    long dtReserved;  };
     typedef struct DeferredTask DeferredTask;
     typedef DeferredTask * DeferredTaskPtr;
     struct vm_statistics {   natural_t free_count;   natural_t active_count;   natural_t inactive_count;   natural_t wire_count;   natural_t zero_fill_count;   natural_t reactivations;   natural_t pageins;   natural_t pageouts;   natural_t faults;   natural_t cow_faults;   natural_t lookups;   natural_t hits;   natural_t purgeable_count;   natural_t purges;   natural_t speculative_count;  };
     typedef struct vm_statistics *vm_statistics_t;
     typedef struct vm_statistics vm_statistics_data_t;
     struct vm_statistics64 {   natural_t free_count;   natural_t active_count;   natural_t inactive_count;   natural_t wire_count;   uint64_t zero_fill_count;   uint64_t reactivations;   uint64_t pageins;   uint64_t pageouts;   uint64_t faults;   uint64_t cow_faults;   uint64_t lookups;   uint64_t hits;   uint64_t purges;   natural_t purgeable_count;   natural_t speculative_count;   uint64_t decompressions;   uint64_t compressions;   uint64_t swapins;   uint64_t swapouts;   natural_t compressor_page_count;   natural_t throttled_count;   natural_t external_page_count;   natural_t internal_page_count;   uint64_t total_uncompressed_pages_in_compressor;  }
     __attribute__((aligned(8)));
     typedef struct vm_statistics64 *vm_statistics64_t;
     typedef struct vm_statistics64 vm_statistics64_data_t;
     struct vm_extmod_statistics {   int64_t task_for_pid_count;   int64_t task_for_pid_caller_count;   int64_t thread_creation_count;   int64_t thread_creation_caller_count;   int64_t thread_set_state_count;   int64_t thread_set_state_caller_count;  }
     __attribute__((aligned(8)));
     typedef struct vm_extmod_statistics *vm_extmod_statistics_t;
     typedef struct vm_extmod_statistics vm_extmod_statistics_data_t;
     typedef struct vm_purgeable_stat {   uint64_t count;   uint64_t size;  }
    vm_purgeable_stat_t;
     struct vm_purgeable_info {   vm_purgeable_stat_t fifo_data[8];   vm_purgeable_stat_t obsolete_data;   vm_purgeable_stat_t lifo_data[8];  };
     typedef struct vm_purgeable_info *vm_purgeable_info_t;
     typedef integer_t cpu_type_t;
     typedef integer_t cpu_subtype_t;
     typedef integer_t cpu_threadtype_t;
     typedef integer_t *host_info_t;
     typedef integer_t *host_info64_t;
     typedef integer_t host_info_data_t[(1024)];
     typedef char kernel_version_t[(512)];
     typedef char kernel_boot_info_t[(4096)];
     typedef integer_t host_flavor_t;
     struct host_can_has_debugger_info {   boolean_t can_has_debugger;  };
     typedef struct host_can_has_debugger_info host_can_has_debugger_info_data_t;
     typedef struct host_can_has_debugger_info *host_can_has_debugger_info_t;
     struct host_basic_info {   integer_t max_cpus;   integer_t avail_cpus;   natural_t memory_size;   cpu_type_t cpu_type;   cpu_subtype_t cpu_subtype;   cpu_threadtype_t cpu_threadtype;   integer_t physical_cpu;   integer_t physical_cpu_max;   integer_t logical_cpu;   integer_t logical_cpu_max;   uint64_t max_mem;  };
     typedef struct host_basic_info host_basic_info_data_t;
     typedef struct host_basic_info *host_basic_info_t;
     struct host_sched_info {   integer_t min_timeout;   integer_t min_quantum;  };
     typedef struct host_sched_info host_sched_info_data_t;
     typedef struct host_sched_info *host_sched_info_t;
     struct kernel_resource_sizes {   natural_t task;          natural_t thread;          natural_t port;          natural_t memory_region;          natural_t memory_object;  };
     typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
     typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
     struct host_priority_info {       integer_t kernel_priority;       integer_t system_priority;       integer_t server_priority;       integer_t user_priority;       integer_t depress_priority;       integer_t idle_priority;       integer_t minimum_priority;   integer_t maximum_priority;  };
     typedef struct host_priority_info host_priority_info_data_t;
     typedef struct host_priority_info *host_priority_info_t;
     struct host_load_info {   integer_t avenrun[3];   integer_t mach_factor[3];  };
     typedef struct host_load_info host_load_info_data_t;
     typedef struct host_load_info *host_load_info_t;
     typedef struct vm_purgeable_info host_purgable_info_data_t;
     typedef struct vm_purgeable_info *host_purgable_info_t;
     struct host_cpu_load_info {   natural_t cpu_ticks[4];  };
     typedef struct host_cpu_load_info host_cpu_load_info_data_t;
     typedef struct host_cpu_load_info *host_cpu_load_info_t;
     typedef int vm_prot_t;
     typedef unsigned vm_sync_t;
     typedef vm_offset_t pointer_t;
     typedef vm_offset_t vm_address_t;
     typedef uint64_t addr64_t;
     typedef uint32_t reg64_t;
     typedef uint32_t ppnum_t;
     typedef mach_port_t vm_map_t;
     typedef uint64_t vm_object_offset_t;
     typedef uint64_t vm_object_size_t;
     typedef mach_port_t upl_t;
     typedef mach_port_t vm_named_entry_t;
     typedef unsigned long long memory_object_offset_t;
     typedef unsigned long long memory_object_size_t;
     typedef natural_t memory_object_cluster_size_t;
     typedef natural_t * memory_object_fault_info_t;
     typedef unsigned long long vm_object_id_t;
     typedef mach_port_t memory_object_t;
     typedef mach_port_t memory_object_control_t;
     typedef memory_object_t *memory_object_array_t;
     typedef mach_port_t memory_object_name_t;
     typedef mach_port_t memory_object_default_t;
     typedef int memory_object_copy_strategy_t;
     typedef int memory_object_return_t;
     typedef int *memory_object_info_t;
     typedef int memory_object_flavor_t;
     typedef int memory_object_info_data_t[(1024)];
     struct memory_object_perf_info {   memory_object_cluster_size_t cluster_size;   boolean_t may_cache;  };
     struct memory_object_attr_info {   memory_object_copy_strategy_t copy_strategy;   memory_object_cluster_size_t cluster_size;   boolean_t may_cache_object;   boolean_t temporary;  };
     struct memory_object_behave_info {   memory_object_copy_strategy_t copy_strategy;   boolean_t temporary;   boolean_t invalidate;   boolean_t silent_overwrite;   boolean_t advisory_pageout;  };
     typedef struct memory_object_behave_info *memory_object_behave_info_t;
     typedef struct memory_object_behave_info memory_object_behave_info_data_t;
     typedef struct memory_object_perf_info *memory_object_perf_info_t;
     typedef struct memory_object_perf_info memory_object_perf_info_data_t;
     typedef struct memory_object_attr_info *memory_object_attr_info_t;
     typedef struct memory_object_attr_info memory_object_attr_info_data_t;
     struct x86_state_hdr {   int flavor;   int count;  };
     typedef struct x86_state_hdr x86_state_hdr_t;
     typedef struct __darwin_i386_thread_state i386_thread_state_t;
     typedef struct __darwin_i386_thread_state x86_thread_state32_t;
     typedef struct __darwin_i386_float_state i386_float_state_t;
     typedef struct __darwin_i386_float_state x86_float_state32_t;
     typedef struct __darwin_i386_avx_state x86_avx_state32_t;
     typedef struct __darwin_i386_exception_state i386_exception_state_t;
     typedef struct __darwin_i386_exception_state x86_exception_state32_t;
     typedef struct __darwin_x86_debug_state32 x86_debug_state32_t;
     typedef struct __darwin_x86_thread_state64 x86_thread_state64_t;
     typedef struct __darwin_x86_float_state64 x86_float_state64_t;
     typedef struct __darwin_x86_avx_state64 x86_avx_state64_t;
     typedef struct __darwin_x86_exception_state64 x86_exception_state64_t;
     typedef struct __darwin_x86_debug_state64 x86_debug_state64_t;
     struct x86_thread_state {   x86_state_hdr_t tsh;   union {      x86_thread_state32_t ts32;      x86_thread_state64_t ts64;  }  uts;  };
     struct x86_float_state {   x86_state_hdr_t fsh;   union {   x86_float_state32_t fs32;   x86_float_state64_t fs64;  }  ufs;  };
     struct x86_exception_state {   x86_state_hdr_t esh;   union {   x86_exception_state32_t es32;   x86_exception_state64_t es64;  }  ues;  };
     struct x86_debug_state {   x86_state_hdr_t dsh;   union {   x86_debug_state32_t ds32;   x86_debug_state64_t ds64;  }  uds;  };
     struct x86_avx_state {   x86_state_hdr_t ash;   union {   x86_avx_state32_t as32;   x86_avx_state64_t as64;  }  ufs;  };
     typedef struct x86_thread_state x86_thread_state_t;
     typedef struct x86_float_state x86_float_state_t;
     typedef struct x86_exception_state x86_exception_state_t;
     typedef struct x86_debug_state x86_debug_state_t;
     typedef struct x86_avx_state x86_avx_state_t;
     typedef natural_t *thread_state_t;
     typedef natural_t thread_state_data_t[(224)];
     typedef int thread_state_flavor_t;
     typedef thread_state_flavor_t *thread_state_flavor_array_t;
     typedef int exception_type_t;
     typedef integer_t exception_data_type_t;
     typedef int64_t mach_exception_data_type_t;
     typedef int exception_behavior_t;
     typedef exception_data_type_t *exception_data_t;
     typedef mach_exception_data_type_t *mach_exception_data_t;
     typedef unsigned int exception_mask_t;
     typedef exception_mask_t *exception_mask_array_t;
     typedef exception_behavior_t *exception_behavior_array_t;
     typedef thread_state_flavor_t *exception_flavor_array_t;
     typedef mach_port_t *exception_port_array_t;
     typedef mach_exception_data_type_t mach_exception_code_t;
     typedef mach_exception_data_type_t mach_exception_subcode_t;
     typedef mach_port_t mach_voucher_t;
     typedef mach_port_name_t mach_voucher_name_t;
     typedef mach_voucher_name_t *mach_voucher_name_array_t;
     typedef mach_voucher_t ipc_voucher_t;
     typedef uint32_t mach_voucher_selector_t;
     typedef uint32_t mach_voucher_attr_key_t;
     typedef mach_voucher_attr_key_t *mach_voucher_attr_key_array_t;
     typedef uint8_t *mach_voucher_attr_content_t;
     typedef uint32_t mach_voucher_attr_content_size_t;
     typedef uint32_t mach_voucher_attr_command_t;
     typedef uint32_t mach_voucher_attr_recipe_command_t;
     typedef mach_voucher_attr_recipe_command_t *mach_voucher_attr_recipe_command_array_t;
     typedef struct mach_voucher_attr_recipe_data {   mach_voucher_attr_key_t key;   mach_voucher_attr_recipe_command_t command;   mach_voucher_name_t previous_voucher;   mach_voucher_attr_content_size_t content_size;   uint8_t content[];  }
     mach_voucher_attr_recipe_data_t;
     typedef mach_voucher_attr_recipe_data_t *mach_voucher_attr_recipe_t;
     typedef mach_msg_type_number_t mach_voucher_attr_recipe_size_t;
     typedef uint8_t *mach_voucher_attr_raw_recipe_t;
     typedef mach_voucher_attr_raw_recipe_t mach_voucher_attr_raw_recipe_array_t;
     typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_size_t;
     typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_array_size_t;
     typedef mach_port_t mach_voucher_attr_manager_t;
     typedef mach_port_t mach_voucher_attr_control_t;
     typedef mach_port_t ipc_voucher_attr_manager_t;
     typedef mach_port_t ipc_voucher_attr_control_t;
     typedef uint64_t mach_voucher_attr_value_handle_t;
     typedef mach_voucher_attr_value_handle_t *mach_voucher_attr_value_handle_array_t;
     typedef mach_msg_type_number_t mach_voucher_attr_value_handle_array_size_t;
     typedef uint32_t mach_voucher_attr_value_reference_t;
     typedef uint32_t mach_voucher_attr_value_flags_t;
     typedef uint32_t mach_voucher_attr_control_flags_t;
     typedef uint32_t mach_voucher_attr_importance_refs;
     typedef integer_t *processor_info_t;
     typedef integer_t *processor_info_array_t;
     typedef integer_t processor_info_data_t[(1024)];
     typedef integer_t *processor_set_info_t;
     typedef integer_t processor_set_info_data_t[(1024)];
     typedef int processor_flavor_t;
     struct processor_basic_info {   cpu_type_t cpu_type;   cpu_subtype_t cpu_subtype;   boolean_t running;   int slot_num;   boolean_t is_master;  };
     typedef struct processor_basic_info processor_basic_info_data_t;
     typedef struct processor_basic_info *processor_basic_info_t;
     struct processor_cpu_load_info {          unsigned int cpu_ticks[4];  };
     typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
     typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
     typedef int processor_set_flavor_t;
     struct processor_set_basic_info {   int processor_count;   int default_policy;  };
     typedef struct processor_set_basic_info processor_set_basic_info_data_t;
     typedef struct processor_set_basic_info *processor_set_basic_info_t;
     struct processor_set_load_info {          int task_count;          int thread_count;          integer_t load_average;          integer_t mach_factor;  };
     typedef struct processor_set_load_info processor_set_load_info_data_t;
     typedef struct processor_set_load_info *processor_set_load_info_t;
     typedef int policy_t;
     typedef integer_t *policy_info_t;
     typedef integer_t *policy_base_t;
     typedef integer_t *policy_limit_t;
     struct policy_timeshare_base {   integer_t base_priority;  };
     struct policy_timeshare_limit {   integer_t max_priority;  };
     struct policy_timeshare_info {   integer_t max_priority;   integer_t base_priority;   integer_t cur_priority;   boolean_t depressed;   integer_t depress_priority;  };
     typedef struct policy_timeshare_base *policy_timeshare_base_t;
     typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
     typedef struct policy_timeshare_info *policy_timeshare_info_t;
     typedef struct policy_timeshare_base policy_timeshare_base_data_t;
     typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
     typedef struct policy_timeshare_info policy_timeshare_info_data_t;
     struct policy_rr_base {   integer_t base_priority;   integer_t quantum;  };
     struct policy_rr_limit {   integer_t max_priority;  };
     struct policy_rr_info {   integer_t max_priority;   integer_t base_priority;   integer_t quantum;   boolean_t depressed;   integer_t depress_priority;  };
     typedef struct policy_rr_base *policy_rr_base_t;
     typedef struct policy_rr_limit *policy_rr_limit_t;
     typedef struct thread_affinity_policy thread_affinity_policy_data_t;
     typedef struct thread_affinity_policy *thread_affinity_policy_t;
     struct thread_background_policy {   integer_t priority;  };
     typedef struct thread_background_policy thread_background_policy_data_t;
     typedef struct thread_background_policy *thread_background_policy_t;
     typedef integer_t thread_latency_qos_t;
     struct thread_latency_qos_policy {   thread_latency_qos_t thread_latency_qos_tier;  };
     typedef struct thread_latency_qos_policy thread_latency_qos_policy_data_t;
     typedef struct thread_latency_qos_policy *thread_latency_qos_policy_t;
     typedef integer_t thread_throughput_qos_t;
     struct thread_throughput_qos_policy {   thread_throughput_qos_t thread_throughput_qos_tier;  };
     typedef struct thread_throughput_qos_policy thread_throughput_qos_policy_data_t;
     typedef struct thread_throughput_qos_policy *thread_throughput_qos_policy_t;
     typedef unsigned int vm_machine_attribute_t;
     typedef int vm_machine_attribute_val_t;
     typedef unsigned int vm_inherit_t;
     typedef int vm_purgable_t;
     typedef int vm_behavior_t;
     typedef uint32_t vm32_object_id_t;
     typedef int *vm_region_info_t;
     typedef int *vm_region_info_64_t;
     typedef int *vm_region_recurse_info_t;
     typedef int *vm_region_recurse_info_64_t;
     typedef int vm_region_flavor_t;
     typedef int vm_region_info_data_t[(1024)];
     struct vm_region_basic_info_64 {   vm_prot_t protection;   vm_prot_t max_protection;   vm_inherit_t inheritance;   boolean_t shared;   boolean_t reserved;   memory_object_offset_t offset;   vm_behavior_t behavior;   unsigned short user_wired_count;  };
     typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
     typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;
     struct vm_region_basic_info {   vm_prot_t protection;   vm_prot_t max_protection;   vm_inherit_t inheritance;   boolean_t shared;   boolean_t reserved;   uint32_t offset;   vm_behavior_t behavior;   unsigned short user_wired_count;  };
     typedef struct vm_region_basic_info *vm_region_basic_info_t;
     typedef struct vm_region_basic_info vm_region_basic_info_data_t;
     struct vm_region_extended_info {   vm_prot_t protection;          unsigned int user_tag;          unsigned int pages_resident;          unsigned int pages_shared_now_private;          unsigned int pages_swapped_out;          unsigned int pages_dirtied;          unsigned int ref_count;          unsigned short shadow_depth;          unsigned char external_pager;          unsigned char share_mode;   unsigned int pages_reusable;  };
     typedef struct vm_region_extended_info *vm_region_extended_info_t;
     typedef struct vm_region_extended_info vm_region_extended_info_data_t;
     struct vm_region_top_info {          unsigned int obj_id;          unsigned int ref_count;          unsigned int private_pages_resident;          unsigned int shared_pages_resident;          unsigned char share_mode;  };
     typedef struct vm_region_top_info *vm_region_top_info_t;
     typedef struct vm_region_top_info vm_region_top_info_data_t;
     struct vm_region_submap_info {   vm_prot_t protection;   vm_prot_t max_protection;   vm_inherit_t inheritance;   uint32_t offset;          unsigned int user_tag;          unsigned int pages_resident;          unsigned int pages_shared_now_private;          unsigned int pages_swapped_out;          unsigned int pages_dirtied;          unsigned int ref_count;          unsigned short shadow_depth;          unsigned char external_pager;          unsigned char share_mode;   boolean_t is_submap;   vm_behavior_t behavior;   vm32_object_id_t object_id;   unsigned short user_wired_count;  };
     typedef struct vm_region_submap_info *vm_region_submap_info_t;
     typedef struct vm_region_submap_info vm_region_submap_info_data_t;
     struct vm_region_submap_info_64 {   vm_prot_t protection;   vm_prot_t max_protection;   vm_inherit_t inheritance;   memory_object_offset_t offset;          unsigned int user_tag;          unsigned int pages_resident;          unsigned int pages_shared_now_private;          unsigned int pages_swapped_out;          unsigned int pages_dirtied;          unsigned int ref_count;          unsigned short shadow_depth;          unsigned char external_pager;          unsigned char share_mode;   boolean_t is_submap;   vm_behavior_t behavior;   vm32_object_id_t object_id;   unsigned short user_wired_count;   unsigned int pages_reusable;  };
     typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
     typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;
     struct vm_region_submap_short_info_64 {   vm_prot_t protection;   vm_prot_t max_protection;   vm_inherit_t inheritance;   memory_object_offset_t offset;          unsigned int user_tag;          unsigned int ref_count;          unsigned short shadow_depth;          unsigned char external_pager;          unsigned char share_mode;   boolean_t is_submap;   vm_behavior_t behavior;   vm32_object_id_t object_id;   unsigned short user_wired_count;  };
     typedef struct vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
     typedef struct vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;
     struct mach_vm_read_entry {   mach_vm_address_t address;   mach_vm_size_t size;  };
     struct vm_read_entry {   vm_address_t address;   vm_size_t size;  };
     typedef struct mach_vm_read_entry mach_vm_read_entry_t[(256)];
     typedef struct vm_read_entry vm_read_entry_t[(256)];
     typedef int *vm_page_info_t;
     typedef int vm_page_info_data_t[];
     typedef int vm_page_info_flavor_t;
     struct vm_page_info_basic {   int disposition;   int ref_count;   vm_object_id_t object_id;   memory_object_offset_t offset;   int depth;   int __pad;  };
     typedef struct vm_page_info_basic *vm_page_info_basic_t;
     typedef struct vm_page_info_basic vm_page_info_basic_data_t;
     typedef int kmod_t;
     struct kmod_info;
     typedef kern_return_t kmod_start_func_t(struct kmod_info * ki, void * data);
     typedef kern_return_t kmod_stop_func_t(struct kmod_info * ki, void * data);
     typedef struct kmod_reference {      struct kmod_reference * next;      struct kmod_info * info;  }
     kmod_reference_t;
     typedef struct kmod_info {      struct kmod_info * next;      int32_t info_version;      uint32_t id;      char name[64];      char version[64];      int32_t reference_count;      kmod_reference_t * reference_list;      vm_address_t address;      vm_size_t size;      vm_size_t hdr_size;      kmod_start_func_t * start;      kmod_stop_func_t * stop;  }
     kmod_info_t;
     typedef struct kmod_info_32_v1 {      uint32_t next_addr;      int32_t info_version;      uint32_t id;      uint8_t name[64];      uint8_t version[64];      int32_t reference_count;      uint32_t reference_list_addr;      uint32_t address;      uint32_t size;      uint32_t hdr_size;      uint32_t start_addr;      uint32_t stop_addr;  }
     kmod_info_32_v1_t;
     typedef struct kmod_info_64_v1 {      uint64_t next_addr;      int32_t info_version;      uint32_t id;      uint8_t name[64];      uint8_t version[64];      int32_t reference_count;      uint64_t reference_list_addr;      uint64_t address;      uint64_t size;      uint64_t hdr_size;      uint64_t start_addr;      uint64_t stop_addr;  }
     kmod_info_64_v1_t;
     typedef void * kmod_args_t;
     typedef int kmod_control_flavor_t;
     typedef kmod_info_t * kmod_info_array_t;
     typedef struct fsid {  int32_t val[2];  }
     fsid_t;
     typedef struct fsobj_id {   u_int32_t fid_objno;   u_int32_t fid_generation;  }
     fsobj_id_t;
     struct dyld_kernel_image_info {   uuid_t uuid;   fsobj_id_t fsobjid;   fsid_t fsid;   uint64_t load_addr;  };
     struct dyld_kernel_process_info {   struct dyld_kernel_image_info cache_image_info;   uint64_t timestamp;   uint32_t imageCount;   uint32_t initialImageCount;   uint8_t dyldState;   boolean_t no_cache;   boolean_t private_cache;  };
     typedef struct dyld_kernel_image_info dyld_kernel_image_info_t;
     typedef struct dyld_kernel_process_info dyld_kernel_process_info_t;
     typedef dyld_kernel_image_info_t *dyld_kernel_image_info_array_t;
     typedef mach_port_t task_t;
     typedef mach_port_t task_name_t;
     typedef mach_port_t task_inspect_t;
     typedef mach_port_t task_suspension_token_t;
     typedef mach_port_t thread_t;
     typedef mach_port_t thread_act_t;
     typedef mach_port_t thread_inspect_t;
     typedef mach_port_t ipc_space_t;
     typedef mach_port_t ipc_space_inspect_t;
     typedef mach_port_t coalition_t;
     typedef mach_port_t host_t;
     typedef mach_port_t host_priv_t;
     typedef mach_port_t host_security_t;
     typedef mach_port_t processor_t;
     typedef mach_port_t processor_set_t;
     typedef mach_port_t processor_set_control_t;
     typedef mach_port_t semaphore_t;
     typedef mach_port_t lock_set_t;
     typedef mach_port_t ledger_t;
     typedef mach_port_t alarm_t;
     typedef mach_port_t clock_serv_t;
     typedef mach_port_t clock_ctrl_t;
     typedef processor_set_t processor_set_name_t;
     typedef mach_port_t clock_reply_t;
     typedef mach_port_t bootstrap_t;
     typedef mach_port_t mem_entry_name_port_t;
     typedef mach_port_t exception_handler_t;
     typedef exception_handler_t *exception_handler_array_t;
     typedef mach_port_t vm_task_entry_t;
     typedef mach_port_t io_master_t;
     typedef mach_port_t UNDServerRef;
     typedef task_t *task_array_t;
     typedef thread_t *thread_array_t;
     typedef processor_set_t *processor_set_array_t;
     typedef processor_set_t *processor_set_name_array_t;
     typedef processor_t *processor_array_t;
     typedef thread_act_t *thread_act_array_t;
     typedef ledger_t *ledger_array_t;
     typedef task_t task_port_t;
     typedef task_array_t task_port_array_t;
     typedef thread_t thread_port_t;
     extern kern_return_t macx_backing_store_suspend(     boolean_t suspend);
     extern kern_return_t macx_backing_store_recovery(     int pid);
     extern boolean_t swtch_pri(int pri);
     extern boolean_t swtch(void);
     extern kern_return_t thread_switch(     mach_port_name_t thread_name,     int option,     mach_msg_timeout_t option_time);
     extern mach_port_name_t task_self_trap(void);
     extern kern_return_t host_create_mach_voucher_trap(     mach_port_name_t host,     mach_voucher_attr_raw_recipe_array_t recipes,     int recipes_size,     mach_port_name_t *voucher);
     extern kern_return_t mach_voucher_extract_attr_recipe_trap(     mach_port_name_t voucher_name,     mach_voucher_attr_key_t key,     mach_voucher_attr_raw_recipe_t recipe,     mach_msg_type_number_t *recipe_size);
     extern kern_return_t task_for_pid(     mach_port_name_t target_tport,     int pid,     mach_port_name_t *t);
     extern kern_return_t task_name_for_pid(     mach_port_name_t target_tport,     int pid,     mach_port_name_t *tn);
     extern kern_return_t pid_for_task(     mach_port_name_t t,     int *x);
     extern mach_port_t bootstrap_port;
     extern int (*vprintf_stderr_func)(const char *format, va_list ap);
     typedef kern_return_t mach_error_t;
     typedef mach_error_t (* mach_error_fn_t)( void );
     typedef kern_return_t IOReturn;
     typedef unsigned int UInt;
     typedef signed int SInt;
     typedef UInt32 IOOptionBits;
     typedef SInt32 IOFixed;
     typedef UInt32 IOVersion;
     typedef UInt32 IOItemCount;
     typedef UInt32 IOCacheMode;
     typedef UInt32 IOByteCount32;
     typedef UInt64 IOByteCount64;
     typedef UInt32 IOPhysicalAddress32;
     typedef UInt64 IOPhysicalAddress64;
     typedef UInt32 IOPhysicalLength32;
     typedef UInt64 IOPhysicalLength64;
     typedef mach_vm_address_t IOVirtualAddress;
     typedef IOByteCount32 IOByteCount;
     typedef IOVirtualAddress IOLogicalAddress;
     typedef IOPhysicalAddress32 IOPhysicalAddress;
     typedef IOPhysicalLength32 IOPhysicalLength;
     typedef struct {      IOPhysicalAddress address;      IOByteCount length;  }
     IOPhysicalRange;
     typedef struct {      IOVirtualAddress address;      IOByteCount length;  }
     IOVirtualRange;
     typedef IOVirtualRange IOAddressRange;
     typedef struct {   int value;   const char *name;  }
     IONamedValue;
     typedef unsigned int IOAlignment;
     typedef mach_port_t io_object_t;
     typedef char * io_buf_ptr_t;
     typedef char io_name_t[128];
     typedef char io_string_t[512];
     typedef char io_string_inband_t[4096];
     typedef char io_struct_inband_t[4096];
     typedef uint64_t io_user_scalar_t;
     typedef uint64_t io_user_reference_t;
     typedef io_user_scalar_t io_scalar_inband_t[16];
     typedef io_user_reference_t io_async_ref_t[8];
     typedef io_user_scalar_t io_scalar_inband64_t[16];
     typedef io_user_reference_t io_async_ref64_t[8];
     typedef io_object_t io_connect_t;
     typedef io_object_t io_enumerator_t;
     typedef io_object_t io_iterator_t;
     typedef io_object_t io_registry_entry_t;
     typedef io_object_t io_service_t;
     enum {      kIODefaultMemoryType = 0 };
     enum {      kIODefaultCache = 0,     kIOInhibitCache = 1,     kIOWriteThruCache = 2,     kIOCopybackCache = 3,     kIOWriteCombineCache = 4,     kIOCopybackInnerCache = 5 };
     enum {      kIOMapAnywhere = 0x00000001,     kIOMapCacheMask = 0x00000700,     kIOMapCacheShift = 8,     kIOMapDefaultCache = kIODefaultCache << kIOMapCacheShift,     kIOMapInhibitCache = kIOInhibitCache << kIOMapCacheShift,     kIOMapWriteThruCache = kIOWriteThruCache << kIOMapCacheShift,     kIOMapCopybackCache = kIOCopybackCache << kIOMapCacheShift,     kIOMapWriteCombineCache = kIOWriteCombineCache << kIOMapCacheShift,     kIOMapCopybackInnerCache = kIOCopybackInnerCache << kIOMapCacheShift,     kIOMapUserOptionsMask = 0x00000fff,     kIOMapReadOnly = 0x00001000,     kIOMapStatic = 0x01000000,     kIOMapReference = 0x02000000,     kIOMapUnique = 0x04000000,     kIOMapPrefault = 0x10000000,     kIOMapOverwrite = 0x20000000 };
     enum {      kNanosecondScale = 1,     kMicrosecondScale = 1000,     kMillisecondScale = 1000 * 1000,     kSecondScale = 1000 * 1000 * 1000,     kTickScale = (kSecondScale / 100) };
     kern_return_t IOCatalogueGetData(         mach_port_t masterPort,         uint32_t flag,         char **buffer,         uint32_t *size );
     kern_return_t IOCatalogueModuleLoaded(         mach_port_t masterPort,         io_name_t name );
     kern_return_t IOCatalogueReset(         mach_port_t masterPort,         uint32_t flag );
     typedef struct __attribute__((objc_bridge(id))) __DASession * DASessionRef;
     extern CFTypeID DASessionGetTypeID( void );
     extern DASessionRef _Nullable DASessionCreate( CFAllocatorRef _Nullable allocator );
     extern void DASessionScheduleWithRunLoop( DASessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode );
     extern void DASessionUnscheduleFromRunLoop( DASessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode );
     extern void DASessionSetDispatchQueue( DASessionRef session, dispatch_queue_t _Nullable queue );
     typedef struct __attribute__((objc_bridge(id))) __DASession * DAApprovalSessionRef __attribute__((availability(swift, unavailable, message="Use DASessionRef instead")));
     extern CFTypeID DAApprovalSessionGetTypeID( void ) __attribute__((availability(swift, unavailable, message="Use DASessionGetTypeID instead")));
     extern DAApprovalSessionRef _Nullable DAApprovalSessionCreate( CFAllocatorRef _Nullable allocator ) __attribute__((availability(swift, unavailable, message="Use DASessionCreate instead")));
     extern void DAApprovalSessionScheduleWithRunLoop( DAApprovalSessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode ) __attribute__((availability(swift, unavailable, message="Use DASessionSetDispatchQueue instead")));
     extern void DAApprovalSessionUnscheduleFromRunLoop( DAApprovalSessionRef session, CFRunLoopRef runLoop, CFStringRef runLoopMode ) __attribute__((availability(swift, unavailable, message="Use DASessionSetDispatchQueue instead")));
     extern const CFStringRef kDADiskDescriptionVolumeKindKey;
     extern const CFStringRef kDADiskDescriptionVolumeMountableKey;
     extern const CFStringRef kDADiskDescriptionVolumeNameKey;
     extern const CFStringRef kDADiskDescriptionVolumeNetworkKey;
     extern const CFStringRef kDADiskDescriptionVolumePathKey;
     extern const CFStringRef kDADiskDescriptionVolumeTypeKey;
     extern const CFStringRef kDADiskDescriptionVolumeUUIDKey;
     extern const CFStringRef kDADiskDescriptionMediaBlockSizeKey;
     extern const CFStringRef kDADiskDescriptionMediaBSDMajorKey;
     extern const CFStringRef kDADiskDescriptionMediaBSDMinorKey;
     extern const CFStringRef kDADiskDescriptionMediaBSDNameKey;
     extern const CFStringRef kDADiskDescriptionMediaBSDUnitKey;
     extern const CFStringRef kDADiskDescriptionMediaContentKey;
     extern const CFStringRef kDADiskDescriptionMediaEjectableKey;
     extern const CFStringRef kDADiskDescriptionMediaIconKey;
     extern const CFStringRef kDADiskDescriptionMediaKindKey;
     extern const CFStringRef kDADiskDescriptionMediaLeafKey;
     extern const CFStringRef kDADiskDescriptionMediaNameKey;
     extern const CFStringRef kDADiskDescriptionMediaPathKey;
     extern const CFStringRef kDADiskDescriptionMediaRemovableKey;
     extern const CFStringRef kDADiskDescriptionMediaSizeKey;
     extern const CFStringRef kDADiskDescriptionMediaTypeKey;
     extern const CFStringRef kDADiskDescriptionMediaUUIDKey;
     extern const CFStringRef kDADiskDescriptionMediaWholeKey;
     extern const CFStringRef kDADiskDescriptionMediaWritableKey;
     extern const CFStringRef kDADiskDescriptionDeviceGUIDKey;
     extern const CFStringRef kDADiskDescriptionDeviceInternalKey;
     extern const CFStringRef kDADiskDescriptionDeviceModelKey;
     extern const CFStringRef kDADiskDescriptionDevicePathKey;
     extern const CFStringRef kDADiskDescriptionDeviceProtocolKey;
     extern const CFStringRef kDADiskDescriptionDeviceRevisionKey;
     extern const CFStringRef kDADiskDescriptionDeviceUnitKey;
     extern const CFStringRef kDADiskDescriptionDeviceVendorKey;
     extern const CFStringRef kDADiskDescriptionBusNameKey;
     extern const CFStringRef kDADiskDescriptionBusPathKey;
     typedef struct __attribute__((objc_bridge(id))) __DADisk * DADiskRef;
     extern CFTypeID DADiskGetTypeID( void );
     extern DADiskRef _Nullable DADiskCreateFromBSDName( CFAllocatorRef _Nullable allocator, DASessionRef session, const char * name );
     extern DADiskRef _Nullable DADiskCreateFromIOMedia( CFAllocatorRef _Nullable allocator, DASessionRef session, io_service_t media );
     extern DADiskRef _Nullable DADiskCreateFromVolumePath( CFAllocatorRef _Nullable allocator, DASessionRef session, CFURLRef path );
     extern const char * _Nullable DADiskGetBSDName( DADiskRef disk );
     extern io_service_t DADiskCopyIOMedia( DADiskRef disk );
     extern CFDictionaryRef _Nullable DADiskCopyDescription( DADiskRef disk );
     extern DADiskRef _Nullable DADiskCopyWholeDisk( DADiskRef disk );
     struct HFSUniStr255 {   u_int16_t length;   u_int16_t unicode[255];  }
     __attribute__((aligned(2), packed));
     typedef struct HFSUniStr255 HFSUniStr255;
     typedef const HFSUniStr255 *ConstHFSUniStr255Param;
     enum {    fsCurPerm = 0x00,   fsRdPerm = 0x01,   fsWrPerm = 0x02,   fsRdWrPerm = 0x03,   fsRdWrShPerm = 0x04 };
     enum {    fsRdAccessPerm = 0x01,   fsWrAccessPerm = 0x02,   fsRdDenyPerm = 0x10,   fsWrDenyPerm = 0x20 };
     enum {    fsRtParID = 1,   fsRtDirID = 2 };
     enum {    fsAtMark = 0,   fsFromStart = 1,   fsFromLEOF = 2,   fsFromMark = 3 };
     enum {    kFSAllowConcurrentAsyncIOBit = 3,   kFSAllowConcurrentAsyncIOMask = 0x0008,   kFSPleaseCacheBit = 4,   kFSPleaseCacheMask = 0x0010,   kFSNoCacheBit = 5,   kFSNoCacheMask = 0x0020,   kFSRdVerifyBit = 6,   kFSRdVerifyMask = 0x0040,   kFSForceReadBit = 6,   kFSForceReadMask = 0x0040,   kFSNewLineBit = 7,   kFSNewLineMask = 0x0080,   kFSNewLineCharMask = 0xFF00 };
     enum {    fsSBPartialName = 0x01,   fsSBFullName = 0x02,   fsSBFlAttrib = 0x04,   fsSBFlFndrInfo = 0x08,   fsSBFlLgLen = 0x20,   fsSBFlPyLen = 0x40,   fsSBFlRLgLen = 0x80,   fsSBFlRPyLen = 0x0100,   fsSBFlCrDat = 0x0200,   fsSBFlMdDat = 0x0400,   fsSBFlBkDat = 0x0800,   fsSBFlXFndrInfo = 0x1000,   fsSBFlParID = 0x2000,   fsSBNegate = 0x4000,   fsSBDrUsrWds = 0x08,   fsSBDrNmFls = 0x10,   fsSBDrCrDat = 0x0200,   fsSBDrMdDat = 0x0400,   fsSBDrBkDat = 0x0800,   fsSBDrFndrInfo = 0x1000,   fsSBDrParID = 0x2000,   fsSBNodeID = 0x8000,   fsSBAttributeModDate = 0x00010000,   fsSBAccessDate = 0x00020000,   fsSBPermissions = 0x00040000,   fsSBSkipPackageContents = 0x00080000,   fsSBSkipHiddenItems = 0x00100000,   fsSBUserID = 0x00200000,   fsSBGroupID = 0x00400000 };
     enum {    fsSBPartialNameBit = 0,   fsSBFullNameBit = 1,   fsSBFlAttribBit = 2,   fsSBFlFndrInfoBit = 3,   fsSBFlLgLenBit = 5,   fsSBFlPyLenBit = 6,   fsSBFlRLgLenBit = 7,   fsSBFlRPyLenBit = 8,   fsSBFlCrDatBit = 9,   fsSBFlMdDatBit = 10,   fsSBFlBkDatBit = 11,   fsSBFlXFndrInfoBit = 12,   fsSBFlParIDBit = 13,   fsSBNegateBit = 14,   fsSBDrUsrWdsBit = 3,   fsSBDrNmFlsBit = 4,   fsSBDrCrDatBit = 9,   fsSBDrMdDatBit = 10,   fsSBDrBkDatBit = 11,   fsSBDrFndrInfoBit = 12,   fsSBDrParIDBit = 13,   fsSBNodeIDBit = 15,   fsSBAttributeModDateBit = 16,   fsSBAccessDateBit = 17,   fsSBPermissionsBit = 18,   fsSBSkipPackageContentsBit = 19,   fsSBSkipHiddenItemsBit = 20,   fsSBUserIDBit = 21,   fsSBGroupIDBit = 22 };
     enum {    bLimitFCBs = 31,   bLocalWList = 30,   bNoMiniFndr = 29,   bNoVNEdit = 28,   bNoLclSync = 27,   bTrshOffLine = 26,   bNoSwitchTo = 25,   bNoDeskItems = 20,   bNoBootBlks = 19,   bAccessCntl = 18,   bNoSysDir = 17,   bHasExtFSVol = 16,   bHasOpenDeny = 15,   bHasCopyFile = 14,   bHasMoveRename = 13,   bHasDesktopMgr = 12,   bHasShortName = 11,   bHasFolderLock = 10,   bHasPersonalAccessPrivileges = 9,   bHasUserGroupList = 8,   bHasCatSearch = 7,   bHasFileIDs = 6,   bHasBTreeMgr = 5,   bHasBlankAccessPrivileges = 4,   bSupportsAsyncRequests = 3,   bSupportsTrashVolumeCache = 2 };
     enum {    bHasDirectIO = 1 };
     enum {    bIsEjectable = 0,   bSupportsHFSPlusAPIs = 1,   bSupportsFSCatalogSearch = 2,   bSupportsFSExchangeObjects = 3,   bSupports2TBFiles = 4,   bSupportsLongNames = 5,   bSupportsMultiScriptNames = 6,   bSupportsNamedForks = 7,   bSupportsSubtreeIterators = 8,   bL2PCanMapFileBlocks = 9,   bParentModDateChanges = 10,   bAncestorModDateChanges = 11,   bSupportsSymbolicLinks = 13,   bIsAutoMounted = 14,   bAllowCDiDataHandler = 17,   bSupportsExclusiveLocks = 18,   bSupportsJournaling = 19,   bNoVolumeSizes = 20,   bIsOnInternalBus = 21,   bIsCaseSensitive = 22,   bIsCasePreserving = 23,   bDoNotDisplay = 24,   bIsRemovable = 25,   bNoRootTimes = 26,   bIsOnExternalBus = 27,   bSupportsExtendedFileSecurity = 28 };
     enum {    kWidePosOffsetBit = 8,   kUseWidePositioning = (1 << kWidePosOffsetBit),   kMaximumBlocksIn4GB = 0x007FFFFF };
     enum {    fsUnixPriv = 1 };
     enum {    kNoUserAuthentication = 1,   kPassword = 2,   kEncryptPassword = 3,   kTwoWayEncryptPassword = 6 };
     enum {    knoUser = 0,   kadministratorUser = 1 };
     enum {    knoGroup = 0 };
     typedef SInt16 FSVolumeRefNum;
     typedef int FSIORefNum;
     enum {    kFSInvalidVolumeRefNum = 0 };
     struct FSRef {    UInt8 hidden[80];  };
     typedef struct FSRef FSRef;
     typedef FSRef * FSRefPtr;
     typedef struct __FSFileSecurity* FSFileSecurityRef;
     struct CatPositionRec {    SInt32 initialize;    SInt16 priv[6];  };
     typedef struct CatPositionRec CatPositionRec;
     struct FSSpec {    UInt8 hidden[70];  };
     typedef struct FSSpec FSSpec;
     typedef FSSpec * FSSpecPtr;
     typedef FSSpecPtr * FSSpecHandle;
     typedef FSSpecPtr FSSpecArrayPtr;
     typedef const FSSpec * ConstFSSpecPtr;
     typedef union ParamBlockRec ParamBlockRec;
     typedef void * ParmBlkPtr;
     typedef void ( * IOCompletionProcPtr)(ParmBlkPtr paramBlock);
     typedef IOCompletionProcPtr IOCompletionUPP;
     struct FSPermissionInfo {    UInt32 userID;    UInt32 groupID;    UInt8 reserved1;    UInt8 userAccess;    UInt16 mode;    FSFileSecurityRef fileSec;  };
     typedef struct FSPermissionInfo FSPermissionInfo;
     typedef UInt32 FSCatalogInfoBitmap;
     enum {    kFSCatInfoNone = 0x00000000,   kFSCatInfoTextEncoding = 0x00000001,   kFSCatInfoNodeFlags = 0x00000002,   kFSCatInfoVolume = 0x00000004,   kFSCatInfoParentDirID = 0x00000008,   kFSCatInfoNodeID = 0x00000010,   kFSCatInfoCreateDate = 0x00000020,   kFSCatInfoContentMod = 0x00000040,   kFSCatInfoAttrMod = 0x00000080,   kFSCatInfoAccessDate = 0x00000100,   kFSCatInfoBackupDate = 0x00000200,   kFSCatInfoPermissions = 0x00000400,   kFSCatInfoFinderInfo = 0x00000800,   kFSCatInfoFinderXInfo = 0x00001000,   kFSCatInfoValence = 0x00002000,   kFSCatInfoDataSizes = 0x00004000,   kFSCatInfoRsrcSizes = 0x00008000,   kFSCatInfoSharingFlags = 0x00010000,   kFSCatInfoUserPrivs = 0x00020000,   kFSCatInfoUserAccess = 0x00080000,   kFSCatInfoSetOwnership = 0x00100000,   kFSCatInfoFSFileSecurityRef = 0x00400000,   kFSCatInfoAllDates = 0x000003E0,   kFSCatInfoGettableInfo = 0x0003FFFF,   kFSCatInfoSettableInfo = 0x00001FE3,   kFSCatInfoReserved = (int)0xFFFC0000 };
     enum {    kFSNodeLockedBit = 0,   kFSNodeLockedMask = 0x0001,   kFSNodeResOpenBit = 2,   kFSNodeResOpenMask = 0x0004,   kFSNodeDataOpenBit = 3,   kFSNodeDataOpenMask = 0x0008,   kFSNodeIsDirectoryBit = 4,   kFSNodeIsDirectoryMask = 0x0010,   kFSNodeCopyProtectBit = 6,   kFSNodeCopyProtectMask = 0x0040,   kFSNodeForkOpenBit = 7,   kFSNodeForkOpenMask = 0x0080,   kFSNodeHardLinkBit = 8,   kFSNodeHardLinkMask = 0x00000100 };
     enum {    kFSNodeInSharedBit = 2,   kFSNodeInSharedMask = 0x0004,   kFSNodeIsMountedBit = 3,   kFSNodeIsMountedMask = 0x0008,   kFSNodeIsSharePointBit = 5,   kFSNodeIsSharePointMask = 0x0020 };
     struct FSCatalogInfo {    UInt16 nodeFlags;    FSVolumeRefNum volume;    UInt32 parentDirID;    UInt32 nodeID;    UInt8 sharingFlags;    UInt8 userPrivileges;    UInt8 reserved1;    UInt8 reserved2;    UTCDateTime createDate;    UTCDateTime contentModDate;    UTCDateTime attributeModDate;    UTCDateTime accessDate;    UTCDateTime backupDate;    FSPermissionInfo permissions;    UInt8 finderInfo[16];    UInt8 extFinderInfo[16];    UInt64 dataLogicalSize;    UInt64 dataPhysicalSize;    UInt64 rsrcLogicalSize;    UInt64 rsrcPhysicalSize;    UInt32 valence;    TextEncoding textEncodingHint;  };
     typedef struct FSCatalogInfo FSCatalogInfo;
     typedef FSCatalogInfo * FSCatalogInfoPtr;
     struct FSRefParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    ConstStringPtr ioNamePtr;    FSVolumeRefNum ioVRefNum;    SInt16 reserved1;    UInt8 reserved2;    UInt8 reserved3;    const FSRef * ref;    FSCatalogInfoBitmap whichInfo;    FSCatalogInfo * catInfo;    UniCharCount nameLength;    const UniChar * name;    UInt32 ioDirID;    FSSpecPtr spec;    FSRef * parentRef;    FSRef * newRef;    TextEncoding textEncodingHint;    HFSUniStr255 * outName;  };
     typedef struct FSRefParam FSRefParam;
     typedef FSRefParam * FSRefParamPtr;
     struct FSRefForkIOParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    const FSRef * parentRef;    UniCharCount nameLength;    const UniChar * name;    FSCatalogInfoBitmap whichInfo;    const FSCatalogInfo * catInfo;    UniCharCount forkNameLength;    const UniChar * forkName;    SInt8 permissions;    UInt8 reserved1;    FSIORefNum forkRefNum;    FSRef * newRef;  };
     typedef struct FSRefForkIOParam FSRefForkIOParam;
     typedef FSRefForkIOParam * FSRefForkIOParamPtr;
     typedef struct OpaqueFSIterator* FSIterator;
     enum {    kFSIterateFlat = 0,   kFSIterateSubtree = 1,   kFSIterateDelete = 2,   kFSIterateReserved = (int)0xFFFFFFFC };
     typedef OptionBits FSIteratorFlags;
     struct FSSearchParams {    Duration searchTime;    OptionBits searchBits;    UniCharCount searchNameLength;    const UniChar * searchName;    FSCatalogInfo * searchInfo1;    FSCatalogInfo * searchInfo2;  };
     typedef struct FSSearchParams FSSearchParams;
     typedef FSSearchParams * FSSearchParamsPtr;
     struct FSCatalogBulkParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    Boolean containerChanged;    UInt8 reserved;    FSIteratorFlags iteratorFlags;    FSIterator iterator;    const FSRef * container;    ItemCount maximumItems;    ItemCount actualItems;    FSCatalogInfoBitmap whichInfo;    FSCatalogInfo * catalogInfo;    FSRef * refs;    FSSpecPtr specs;    HFSUniStr255 * names;    const FSSearchParams * searchParams;  };
     typedef struct FSCatalogBulkParam FSCatalogBulkParam;
     typedef FSCatalogBulkParam * FSCatalogBulkParamPtr;
     typedef UInt16 FSAllocationFlags;
     enum {    kFSAllocDefaultFlags = 0x0000,   kFSAllocAllOrNothingMask = 0x0001,   kFSAllocContiguousMask = 0x0002,   kFSAllocNoRoundUpMask = 0x0004,   kFSAllocReservedMask = 0xFFF8 };
     struct FSForkIOParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    void * reserved1;    SInt16 reserved2;    FSIORefNum forkRefNum;    UInt8 reserved3;    SInt8 permissions;    const FSRef * ref;    Ptr buffer;    UInt32 requestCount;    UInt32 actualCount;    UInt16 positionMode;    SInt64 positionOffset;    FSAllocationFlags allocationFlags;    UInt64 allocationAmount;    UniCharCount forkNameLength;    const UniChar * forkName;    CatPositionRec forkIterator;    HFSUniStr255 * outForkName;  };
     typedef struct FSForkIOParam FSForkIOParam;
     typedef FSForkIOParam * FSForkIOParamPtr;
     typedef UInt8 FSForkInfoFlags;
     struct FSForkInfo {    FSForkInfoFlags flags;    SInt8 permissions;    FSVolumeRefNum volume;    UInt32 reserved2;    UInt32 nodeID;    UInt32 forkID;    UInt64 currentPosition;    UInt64 logicalEOF;    UInt64 physicalEOF;    UInt64 process;  };
     typedef struct FSForkInfo FSForkInfo;
     typedef FSForkInfo * FSForkInfoPtr;
     struct FSForkCBInfoParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    FSIORefNum desiredRefNum;    FSVolumeRefNum volumeRefNum;    FSIORefNum iterator;    FSVolumeRefNum actualRefNum;    FSRef * ref;    FSForkInfo * forkInfo;    HFSUniStr255 * forkName;  };
     typedef struct FSForkCBInfoParam FSForkCBInfoParam;
     typedef FSForkCBInfoParam * FSForkCBInfoParamPtr;
     struct FSRangeLockParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    FSIORefNum forkRefNum;    UInt64 requestCount;    UInt16 positionMode;    SInt64 positionOffset;    UInt64 rangeStart;  };
     typedef struct FSRangeLockParam FSRangeLockParam;
     typedef FSRangeLockParam * FSRangeLockParamPtr;
     typedef UInt32 FSVolumeInfoBitmap;
     enum {    kFSVolInfoNone = 0x0000,   kFSVolInfoCreateDate = 0x0001,   kFSVolInfoModDate = 0x0002,   kFSVolInfoBackupDate = 0x0004,   kFSVolInfoCheckedDate = 0x0008,   kFSVolInfoFileCount = 0x0010,   kFSVolInfoDirCount = 0x0020,   kFSVolInfoSizes = 0x0040,   kFSVolInfoBlocks = 0x0080,   kFSVolInfoNextAlloc = 0x0100,   kFSVolInfoRsrcClump = 0x0200,   kFSVolInfoDataClump = 0x0400,   kFSVolInfoNextID = 0x0800,   kFSVolInfoFinderInfo = 0x1000,   kFSVolInfoFlags = 0x2000,   kFSVolInfoFSInfo = 0x4000,   kFSVolInfoDriveInfo = 0x8000,   kFSVolInfoGettableInfo = 0xFFFF,   kFSVolInfoSettableInfo = 0x3004 };
     enum {    kFSVolFlagDefaultVolumeBit = 5,   kFSVolFlagDefaultVolumeMask = 0x0020,   kFSVolFlagFilesOpenBit = 6,   kFSVolFlagFilesOpenMask = 0x0040,   kFSVolFlagHardwareLockedBit = 7,   kFSVolFlagHardwareLockedMask = 0x0080,   kFSVolFlagJournalingActiveBit = 14,   kFSVolFlagJournalingActiveMask = 0x4000,   kFSVolFlagSoftwareLockedBit = 15,   kFSVolFlagSoftwareLockedMask = 0x8000 };
     struct FSVolumeInfo {    UTCDateTime createDate;    UTCDateTime modifyDate;    UTCDateTime backupDate;    UTCDateTime checkedDate;    UInt32 fileCount;    UInt32 folderCount;    UInt64 totalBytes;    UInt64 freeBytes;    UInt32 blockSize;    UInt32 totalBlocks;    UInt32 freeBlocks;    UInt32 nextAllocation;    UInt32 rsrcClumpSize;    UInt32 dataClumpSize;    UInt32 nextCatalogID;    UInt8 finderInfo[32];    UInt16 flags;    UInt16 filesystemID;    UInt16 signature;    UInt16 driveNumber;    FSIORefNum driverRefNum;  };
     typedef struct FSVolumeInfo FSVolumeInfo;
     typedef FSVolumeInfo * FSVolumeInfoPtr;
     struct FSVolumeInfoParam {    QElemPtr qLink;    SInt16 qType;    SInt16 ioTrap;    Ptr ioCmdAddr;    IOCompletionUPP ioCompletion;    volatile OSErr ioResult;    StringPtr ioNamePtr;    FSVolumeRefNum ioVRefNum;    UInt32 volumeIndex;    FSVolumeInfoBitmap whichInfo;    FSVolumeInfo * volumeInfo;    HFSUniStr255 * volumeName;    FSRef * ref;  };
     typedef struct FSVolumeInfoParam FSVolumeInfoParam;
     typedef FSVolumeInfoParam * FSVolumeInfoParamPtr;
     struct GetVolParmsInfoBuffer {    SInt16 vMVersion;    SInt32 vMAttrib;    Handle vMLocalHand;    SInt32 vMServerAdr;    SInt32 vMVolumeGrade;    SInt16 vMForeignPrivID;    SInt32 vMExtendedAttributes;    void * vMDeviceID;    UniCharCount vMMaxNameLength;  };
     typedef struct GetVolParmsInfoBuffer GetVolParmsInfoBuffer;
     typedef struct OpaqueMPProcessID* MPProcessID;
     typedef struct OpaqueMPTaskID* MPTaskID;
     typedef struct OpaqueMPQueueID* MPQueueID;
     typedef struct OpaqueMPSemaphoreID* MPSemaphoreID;
     typedef struct OpaqueMPCriticalRegionID* MPCriticalRegionID;
     typedef struct OpaqueMPTimerID* MPTimerID;
     typedef struct OpaqueMPEventID* MPEventID;
     typedef struct OpaqueMPAddressSpaceID* MPAddressSpaceID;
     typedef struct OpaqueMPNotificationID* MPNotificationID;
     typedef struct OpaqueMPCoherenceID* MPCoherenceID;
     typedef struct OpaqueMPCpuID* MPCpuID;
     typedef struct OpaqueMPAreaID* MPAreaID;
     typedef struct OpaqueMPConsoleID* MPConsoleID;
     typedef struct OpaqueMPOpaqueID* MPOpaqueID;
     enum {    kOpaqueAnyID = 0,   kOpaqueProcessID = 1,   kOpaqueTaskID = 2,   kOpaqueTimerID = 3,   kOpaqueQueueID = 4,   kOpaqueSemaphoreID = 5,   kOpaqueCriticalRegionID = 6,   kOpaqueCpuID = 7,   kOpaqueAddressSpaceID = 8,   kOpaqueEventID = 9,   kOpaqueCoherenceID = 10,   kOpaqueAreaID = 11,   kOpaqueNotificationID = 12,   kOpaqueConsoleID = 13 };
     typedef UInt32 MPOpaqueIDClass;
     enum {    kMPNoID = 0 };
     typedef OptionBits MPTaskOptions;
     typedef ItemCount TaskStorageIndex;
     typedef LogicalAddress TaskStorageValue;
     typedef ItemCount MPSemaphoreCount;
     typedef UInt32 MPTaskWeight;
     typedef UInt32 MPEventFlags;
     typedef UInt32 MPExceptionKind;
     typedef UInt32 MPTaskStateKind;
     typedef UInt32 MPPageSizeClass;
     enum {    kDurationImmediate = 0,   kDurationForever = 0x7FFFFFFF,   kDurationMillisecond = 1,   kDurationMicrosecond = -1 };
     extern ItemCount MPProcessors(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern ItemCount MPProcessorsScheduled(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     enum {    kMPCreateTaskSuspendedMask = 1L << 0,   kMPCreateTaskTakesAllExceptionsMask = 1L << 1,   kMPCreateTaskNotDebuggableMask = 1L << 2,   kMPCreateTaskValidOptionsMask = kMPCreateTaskSuspendedMask | kMPCreateTaskTakesAllExceptionsMask | kMPCreateTaskNotDebuggableMask };
     typedef OSStatus ( * TaskProc)(void * parameter);
     extern OSStatus MPCreateTask(   TaskProc entryPoint,   void * parameter,   ByteCount stackSize,   MPQueueID notifyQueue,   void * terminationParameter1,   void * terminationParameter2,   MPTaskOptions options,   MPTaskID * task) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPTerminateTask(   MPTaskID task,   OSStatus terminationStatus) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPSetTaskWeight(   MPTaskID task,   MPTaskWeight weight) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern Boolean MPTaskIsPreemptive(MPTaskID taskID) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern void MPExit(OSStatus status) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern void MPYield(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern MPTaskID MPCurrentTaskID(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPSetTaskType(   MPTaskID task,   OSType taskType) __attribute__((availability(macosx,introduced=10.1,deprecated=10.8)));
     extern OSStatus MPAllocateTaskStorageIndex(TaskStorageIndex * taskIndex) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPDeallocateTaskStorageIndex(TaskStorageIndex taskIndex) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPSetTaskStorageValue(   TaskStorageIndex taskIndex,   TaskStorageValue value) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern TaskStorageValue MPGetTaskStorageValue(TaskStorageIndex taskIndex) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPCreateQueue(MPQueueID * queue) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPDeleteQueue(MPQueueID queue) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPNotifyQueue(   MPQueueID queue,   void * param1,   void * param2,   void * param3) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPWaitOnQueue(   MPQueueID queue,   void ** param1,   void ** param2,   void ** param3,   Duration timeout) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPSetQueueReserve(   MPQueueID queue,   ItemCount count) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPCreateSemaphore(   MPSemaphoreCount maximumValue,   MPSemaphoreCount initialValue,   MPSemaphoreID * semaphore) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPDeleteSemaphore(MPSemaphoreID semaphore) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPSignalSemaphore(MPSemaphoreID semaphore) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern OSStatus MPWaitOnSemaphore(   MPSemaphoreID semaphore,   Duration timeout) __attribute__((availability(macosx,introduced=10.0,deprecated=10.7)));
     extern short PLstrspn(   ConstStr255Param str1,   ConstStr255Param charSet) __attribute__((availability(macosx,introduced=10.0,deprecated=10.4)));
     extern Ptr PLstrstr(   ConstStr255Param str1,   ConstStr255Param searchStr) __attribute__((availability(macosx,introduced=10.0,deprecated=10.4)));
     extern short PLstrlen(ConstStr255Param str) __attribute__((availability(macosx,introduced=10.0,deprecated=10.4)));
     extern short PLpos(   ConstStr255Param str1,   ConstStr255Param searchStr) __attribute__((availability(macosx,introduced=10.0,deprecated=10.4)));
     extern Boolean CompareAndSwap(   UInt32 oldValue,   UInt32 newValue,   UInt32 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Boolean TestAndClear(   UInt32 bit,   UInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern Boolean TestAndSet(   UInt32 bit,   UInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt8 IncrementAtomic8(SInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt8 DecrementAtomic8(SInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt8 AddAtomic8(   SInt32 amount,   SInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt8 BitAndAtomic8(   UInt32 mask,   UInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt8 BitOrAtomic8(   UInt32 mask,   UInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt8 BitXorAtomic8(   UInt32 mask,   UInt8 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt16 IncrementAtomic16(SInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt16 DecrementAtomic16(SInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt16 AddAtomic16(   SInt32 amount,   SInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt16 BitAndAtomic16(   UInt32 mask,   UInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt16 BitOrAtomic16(   UInt32 mask,   UInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern UInt16 BitXorAtomic16(   UInt32 mask,   UInt16 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern SInt32 IncrementAtomic(SInt32 * address) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     enum {    kContextualAlternatesOnSelector = 0,   kContextualAlternatesOffSelector = 1,   kSwashAlternatesOnSelector = 2,   kSwashAlternatesOffSelector = 3,   kContextualSwashAlternatesOnSelector = 4,   kContextualSwashAlternatesOffSelector = 5 };
     enum {    kDefaultLowerCaseSelector = 0,   kLowerCaseSmallCapsSelector = 1,   kLowerCasePetiteCapsSelector = 2 };
     enum {    kDefaultUpperCaseSelector = 0,   kUpperCaseSmallCapsSelector = 1,   kUpperCasePetiteCapsSelector = 2 };
     enum {    kHalfWidthCJKRomanSelector = 0,   kProportionalCJKRomanSelector = 1,   kDefaultCJKRomanSelector = 2,   kFullWidthCJKRomanSelector = 3 };
     enum {    kSFNTLookupSimpleArray = 0,   kSFNTLookupSegmentSingle = 2,   kSFNTLookupSegmentArray = 4,   kSFNTLookupSingleTable = 6,   kSFNTLookupTrimmedArray = 8,   kSFNTLookupVector = 10 };
     typedef UInt16 SFNTLookupTableFormat;
     typedef UInt16 SFNTLookupValue;
     typedef UInt16 SFNTLookupOffset;
     typedef UInt32 SFNTLookupKind;
     struct SFNTLookupBinarySearchHeader {    UInt16 unitSize;    UInt16 nUnits;    UInt16 searchRange;    UInt16 entrySelector;    UInt16 rangeShift;  };
     typedef struct SFNTLookupBinarySearchHeader SFNTLookupBinarySearchHeader;
     struct SFNTLookupArrayHeader {    SFNTLookupValue lookupValues[1];  };
     typedef struct SFNTLookupArrayHeader SFNTLookupArrayHeader;
     struct SFNTLookupTrimmedArrayHeader {    UInt16 firstGlyph;    UInt16 count;    SFNTLookupValue valueArray[1];  };
     typedef struct SFNTLookupTrimmedArrayHeader SFNTLookupTrimmedArrayHeader;
     struct SFNTLookupVectorHeader {    UInt16 valueSize;    UInt16 firstGlyph;    UInt16 count;    UInt8 values[1];  };
     typedef struct SFNTLookupVectorHeader SFNTLookupVectorHeader;
     struct SFNTLookupSegment {    UInt16 lastGlyph;    UInt16 firstGlyph;    UInt16 value[1];  };
     typedef struct SFNTLookupSegment SFNTLookupSegment;
     struct SFNTLookupSegmentHeader {    SFNTLookupBinarySearchHeader binSearch;    SFNTLookupSegment segments[1];  };
     typedef struct SFNTLookupSegmentHeader SFNTLookupSegmentHeader;
     struct SFNTLookupSingle {    UInt16 glyph;    UInt16 value[1];  };
     typedef struct SFNTLookupSingle SFNTLookupSingle;
     struct SFNTLookupSingleHeader {    SFNTLookupBinarySearchHeader binSearch;    SFNTLookupSingle entries[1];  };
     typedef struct SFNTLookupSingleHeader SFNTLookupSingleHeader;
     union SFNTLookupFormatSpecificHeader {    SFNTLookupArrayHeader theArray;    SFNTLookupSegmentHeader segment;    SFNTLookupSingleHeader single;    SFNTLookupTrimmedArrayHeader trimmedArray;    SFNTLookupVectorHeader vector;  };
     typedef union SFNTLookupFormatSpecificHeader SFNTLookupFormatSpecificHeader;
     struct SFNTLookupTable {    SFNTLookupTableFormat format;    SFNTLookupFormatSpecificHeader fsHeader;  };
     typedef struct SFNTLookupTable SFNTLookupTable;
     typedef SFNTLookupTable * SFNTLookupTablePtr;
     typedef SFNTLookupTablePtr * SFNTLookupTableHandle;
     enum {    kSTClassEndOfText = 0,   kSTClassOutOfBounds = 1,   kSTClassDeletedGlyph = 2,   kSTClassEndOfLine = 3,   kSTSetMark = 0x8000,   kSTNoAdvance = 0x4000,   kSTMarkEnd = 0x2000,   kSTLigActionMask = 0x3FFF,   kSTRearrVerbMask = 0x000F };
     typedef UInt8 STClass;
     typedef UInt8 STEntryIndex;
     struct STHeader {    UInt8 filler;    STClass nClasses;    UInt16 classTableOffset;    UInt16 stateArrayOffset;    UInt16 entryTableOffset;  };
     typedef struct STHeader STHeader;
     struct STClassTable {    UInt16 firstGlyph;    UInt16 nGlyphs;    STClass classes[1];  };
     typedef struct STClassTable STClassTable;
     struct STEntryZero {    UInt16 newState;    UInt16 flags;  };
     typedef struct STEntryZero STEntryZero;
     struct STEntryOne {    UInt16 newState;    UInt16 flags;    UInt16 offset1;  };
     typedef struct STEntryOne STEntryOne;
     struct STEntryTwo {    UInt16 newState;    UInt16 flags;    UInt16 offset1;    UInt16 offset2;  };
     typedef struct STEntryTwo STEntryTwo;
     enum {    kSTXHasLigAction = 0x2000 };
     typedef UInt16 STXClass;
     typedef UInt16 STXStateIndex;
     typedef UInt16 STXEntryIndex;
     struct STXHeader {    UInt32 nClasses;    UInt32 classTableOffset;    UInt32 stateArrayOffset;    UInt32 entryTableOffset;  };
     typedef struct STXHeader STXHeader;
     typedef SFNTLookupTable STXClassTable;
     struct STXEntryZero {    STXStateIndex newState;    UInt16 flags;  };
     typedef struct STXEntryZero STXEntryZero;
     struct STXEntryOne {    STXStateIndex newState;    UInt16 flags;    UInt16 index1;  };
     typedef struct STXEntryOne STXEntryOne;
     struct STXEntryTwo {    STXStateIndex newState;    UInt16 flags;    UInt16 index1;    UInt16 index2;  };
     typedef struct STXEntryTwo STXEntryTwo;
     enum {    kSTKCrossStreamReset = 0x2000 };
     enum {    kLCARTag = 0x6C636172,   kLCARCurrentVersion = 0x00010000,   kLCARLinearFormat = 0,   kLCARCtlPointFormat = 1 };
     struct LcarCaretClassEntry {    UInt16 count;    UInt16 partials[1];  };
     typedef struct LcarCaretClassEntry LcarCaretClassEntry;
     struct LcarCaretTable {    Fixed version;    UInt16 format;    SFNTLookupTable lookup;  };
     typedef struct LcarCaretTable LcarCaretTable;
     typedef LcarCaretTable * LcarCaretTablePtr;
     enum {    kJUSTTag = 0x6A757374,   kJUSTCurrentVersion = 0x00010000,   kJUSTStandardFormat = 0,   kJUSTnoGlyphcode = 0xFFFF,   kJUSTpcDecompositionAction = 0,   kJUSTpcUnconditionalAddAction = 1,   kJUSTpcConditionalAddAction = 2,   kJUSTpcGlyphStretchAction = 3,   kJUSTpcDuctilityAction = 4,   kJUSTpcGlyphRepeatAddAction = 5 };
     enum {    kJUSTKashidaPriority = 0,   kJUSTSpacePriority = 1,   kJUSTLetterPriority = 2,   kJUSTNullPriority = 3,   kJUSTPriorityCount = 4 };
     enum {    kJUSTOverridePriority = 0x8000,   kJUSTOverrideLimits = 0x4000,   kJUSTOverrideUnlimited = 0x2000,   kJUSTUnlimited = 0x1000,   kJUSTPriorityMask = 0x0003 };
     typedef struct TrakTable TrakTable;
     enum {    kKERNTag = 0x6B65726E,   kKERNCurrentVersion = 0x00010000,   kKERNVertical = 0x8000,   kKERNResetCrossStream = 0x8000,   kKERNCrossStream = 0x4000,   kKERNVariation = 0x2000,   kKERNUnusedBits = 0x1F00,   kKERNFormatMask = 0x00FF };
     enum {    kKERNOrderedList = 0,   kKERNStateTable = 1,   kKERNSimpleArray = 2,   kKERNIndexArray = 3 };
     enum {    kKERNLineStart = 0x00000001,   kKERNLineEndKerning = 0x00000002,   kKERNNoCrossKerning = 0x00000004,   kKERNNotesRequested = 0x00000008,   kKERNNoStakeNote = 1,   kKERNCrossStreamResetNote = 2,   kKERNNotApplied = 0x00000001 };
     typedef UInt8 KernTableFormat;
     typedef UInt16 KernSubtableInfo;
     typedef SInt16 KernKerningValue;
     typedef UInt16 KernArrayOffset;
     struct KernVersion0Header {    UInt16 version;    UInt16 nTables;    UInt16 firstSubtable[1];  };
     typedef struct KernVersion0Header KernVersion0Header;
     struct KernTableHeader {    Fixed version;    SInt32 nTables;    UInt16 firstSubtable[1];  };
     typedef struct KernTableHeader KernTableHeader;
     typedef KernTableHeader * KernTableHeaderPtr;
     typedef KernTableHeaderPtr * KernTableHeaderHandle;
     struct KernKerningPair {    UInt16 left;    UInt16 right;  };
     typedef struct KernKerningPair KernKerningPair;
     struct KernOrderedListEntry {    KernKerningPair pair;    KernKerningValue value;  };
     typedef struct KernOrderedListEntry KernOrderedListEntry;
     typedef KernOrderedListEntry * KernOrderedListEntryPtr;
     struct KernOrderedListHeader {    UInt16 nPairs;    UInt16 searchRange;    UInt16 entrySelector;    UInt16 rangeShift;    UInt16 table[1];  };
     typedef struct KernOrderedListHeader KernOrderedListHeader;
     struct KernStateHeader {    STHeader header;    UInt16 valueTable;    UInt8 firstTable[1];  };
     typedef struct KernStateHeader KernStateHeader;
     struct KernStateEntry {    UInt16 newState;    UInt16 flags;  };
     typedef struct KernStateEntry KernStateEntry;
     struct KernOffsetTable {    UInt16 firstGlyph;    UInt16 nGlyphs;    KernArrayOffset offsetTable[1];  };
     typedef struct KernOffsetTable KernOffsetTable;
     typedef KernOffsetTable * KernOffsetTablePtr;
     struct KernSimpleArrayHeader {    UInt16 rowWidth;    UInt16 leftOffsetTable;    UInt16 rightOffsetTable;    KernArrayOffset theArray;    UInt16 firstTable[1];  };
     typedef struct KernSimpleArrayHeader KernSimpleArrayHeader;
     struct KernIndexArrayHeader {    UInt16 glyphCount;    UInt8 kernValueCount;    UInt8 leftClassCount;    UInt8 rightClassCount;    UInt8 flags;    SInt16 kernValue[1];    UInt8 leftClass[1];    UInt8 rightClass[1];    UInt8 kernIndex[1];  };
     typedef struct KernIndexArrayHeader KernIndexArrayHeader;
     union KernFormatSpecificHeader {    KernOrderedListHeader orderedList;    KernStateHeader stateTable;    KernSimpleArrayHeader simpleArray;    KernIndexArrayHeader indexArray;  };
     typedef union KernFormatSpecificHeader KernFormatSpecificHeader;
     struct KernVersion0SubtableHeader {    UInt16 version;    UInt16 length;    KernSubtableInfo stInfo;    KernFormatSpecificHeader fsHeader;  };
     typedef struct KernVersion0SubtableHeader KernVersion0SubtableHeader;
     struct KernSubtableHeader {    SInt32 length;    KernSubtableInfo stInfo;    SInt16 tupleIndex;    KernFormatSpecificHeader fsHeader;  };
     typedef struct KernSubtableHeader KernSubtableHeader;
     typedef KernSubtableHeader * KernSubtableHeaderPtr;
     enum {    kKERXTag = 0x6B657278,   kKERXCurrentVersion = 0x00020000,   kKERXVertical = (int)0x80000000,   kKERXResetCrossStream = 0x8000,   kKERXCrossStream = 0x40000000,   kKERXVariation = 0x20000000,   kKERXDescending = 0x10000000,   kKERXUnusedBits = 0x0FFFFF00,   kKERXFormatMask = 0x000000FF };
     enum {    kKERXOrderedList = 0,   kKERXStateTable = 1,   kKERXSimpleArray = 2,   kKERXControlPoint = 4,   kKERXIndexArray = 6 };
     enum {    kKERXLineStart = 0x00000001,   kKERXLineEndKerning = 0x00000002,   kKERXNoCrossKerning = 0x00000004,   kKERXNotesRequested = 0x00000008,   kKERXNoStakeNote = 1,   kKERXCrossStreamResetNote = 2,   kKERXNotApplied = 0x00000001 };
     enum {    kKERXActionTypeMask = (3U << 30),   kKERXActionTypeControlPoints = (0U << 30),   kKERXActionTypeAnchorPoints = (1U << 30),   kKERXActionTypeCoordinates = (2U << 30),   kKERXUnusedFlags = 0x3F000000,   kKERXActionOffsetMask = 0x00FFFFFF, };
     enum {    kKERXValuesAreLong = 0x00000001 };
     typedef UInt32 KerxSubtableCoverage;
     typedef UInt32 KerxArrayOffset;
     struct KerxTableHeader {    Fixed version;    UInt32 nTables;    UInt32 firstSubtable[1];  };
     typedef struct KerxTableHeader KerxTableHeader;
     typedef KerxTableHeader * KerxTableHeaderPtr;
     typedef KerxTableHeaderPtr * KerxTableHeaderHandle;
     struct KerxKerningPair {    UInt16 left;    UInt16 right;  };
     typedef struct KerxKerningPair KerxKerningPair;
     struct KerxOrderedListEntry {    KerxKerningPair pair;    KernKerningValue value;  };
     typedef struct KerxOrderedListEntry KerxOrderedListEntry;
     typedef KerxOrderedListEntry * KerxOrderedListEntryPtr;
     struct KerxOrderedListHeader {    UInt32 nPairs;    UInt32 searchRange;    UInt32 entrySelector;    UInt32 rangeShift;    UInt32 table[1];  };
     typedef struct KerxOrderedListHeader KerxOrderedListHeader;
     struct KerxStateHeader {    STXHeader header;    UInt32 valueTable;    UInt8 firstTable[1];  };
     typedef struct KerxStateHeader KerxStateHeader;
     struct KerxStateEntry {    UInt16 newState;    UInt16 flags;    UInt16 valueIndex;  };
     typedef struct KerxStateEntry KerxStateEntry;
     struct KerxControlPointHeader {    STXHeader header;    UInt32 flags;    UInt8 firstTable[1];  };
     typedef struct KerxControlPointHeader KerxControlPointHeader;
     struct KerxControlPointEntry {    UInt16 newState;    UInt16 flags;    UInt16 actionIndex;  };
     typedef struct KerxControlPointEntry KerxControlPointEntry;
     struct KerxControlPointAction {    UInt16 markControlPoint;    UInt16 currControlPoint;  };
     typedef struct KerxControlPointAction KerxControlPointAction;
     struct KerxAnchorPointAction {    UInt16 markAnchorPoint;    UInt16 currAnchorPoint;  };
     typedef struct KerxAnchorPointAction KerxAnchorPointAction;
     struct KerxCoordinateAction {    UInt16 markX;    UInt16 markY;    UInt16 currX;    UInt16 currY;  };
     typedef struct KerxCoordinateAction KerxCoordinateAction;
     struct KerxSimpleArrayHeader {    UInt32 rowWidth;    UInt32 leftOffsetTable;    UInt32 rightOffsetTable;    KerxArrayOffset theArray;    UInt32 firstTable[1];  };
     typedef struct KerxSimpleArrayHeader KerxSimpleArrayHeader;
     struct KerxIndexArrayHeader {    UInt32 flags;    UInt16 rowCount;    UInt16 columnCount;    UInt32 rowIndexTableOffset;    UInt32 columnIndexTableOffset;    UInt32 kerningArrayOffset;    UInt32 kerningVectorOffset;  };
     typedef struct KerxIndexArrayHeader KerxIndexArrayHeader;
     union KerxFormatSpecificHeader {    KerxOrderedListHeader orderedList;    KerxStateHeader stateTable;    KerxSimpleArrayHeader simpleArray;    KerxIndexArrayHeader indexArray;    KerxControlPointHeader controlPoint;  };
     typedef union KerxFormatSpecificHeader KerxFormatSpecificHeader;
     struct KerxSubtableHeader {    UInt32 length;    KerxSubtableCoverage stInfo;    UInt32 tupleCount;    KerxFormatSpecificHeader fsHeader;  };
     typedef struct KerxSubtableHeader KerxSubtableHeader;
     typedef KerxSubtableHeader * KerxSubtableHeaderPtr;
     enum {    kBSLNTag = 0x62736C6E,   kBSLNCurrentVersion = 0x00010000,   kBSLNDistanceFormatNoMap = 0,   kBSLNDistanceFormatWithMap = 1,   kBSLNControlPointFormatNoMap = 2,   kBSLNControlPointFormatWithMap = 3 };
     enum {    kBSLNRomanBaseline = 0,   kBSLNIdeographicCenterBaseline = 1,   kBSLNIdeographicLowBaseline = 2,   kBSLNHangingBaseline = 3,   kBSLNMathBaseline = 4,   kBSLNIdeographicHighBaseline = 5,   kBSLNLastBaseline = 31,   kBSLNNumBaselineClasses = kBSLNLastBaseline + 1,   kBSLNNoBaseline = 255,   kBSLNNoBaselineOverride = 255 };
     typedef UInt32 BslnBaselineClass;
     typedef Fixed BslnBaselineRecord[32];
     struct BslnFormat0Part {    SInt16 deltas[32];  };
     typedef struct BslnFormat0Part BslnFormat0Part;
     struct BslnFormat1Part {    SInt16 deltas[32];    SFNTLookupTable mappingData;  };
     typedef struct BslnFormat1Part BslnFormat1Part;
     struct BslnFormat2Part {    UInt16 stdGlyph;    SInt16 ctlPoints[32];  };
     typedef struct BslnFormat2Part BslnFormat2Part;
     struct BslnFormat3Part {    UInt16 stdGlyph;    SInt16 ctlPoints[32];    SFNTLookupTable mappingData;  };
     typedef struct BslnFormat3Part BslnFormat3Part;
     union BslnFormatUnion {    BslnFormat0Part fmt0Part;    BslnFormat1Part fmt1Part;    BslnFormat2Part fmt2Part;    BslnFormat3Part fmt3Part;  };
     typedef union BslnFormatUnion BslnFormatUnion;
     typedef UInt16 BslnTableFormat;
     struct BslnTable {    Fixed version;    BslnTableFormat format;    UInt16 defaultBaseline;    BslnFormatUnion parts;  };
     typedef struct BslnTable BslnTable;
     typedef BslnTable * BslnTablePtr;
     struct ALMXHeader {    Fixed Version;    UInt16 Flags;    UInt16 NMasters;    UInt16 FirstGlyph;    UInt16 LastGlyph;    SFNTLookupTable lookup;  };
     typedef struct ALMXHeader ALMXHeader;
     struct ALMXGlyphEntry {    SInt16 GlyphIndexOffset;    SInt16 HorizontalAdvance;    SInt16 XOffsetToHOrigin;    SInt16 VerticalAdvance;    SInt16 YOffsetToVOrigin;  };
     typedef struct ALMXGlyphEntry ALMXGlyphEntry;
     struct ROTAHeader {    Fixed Version;    UInt16 Flags;    UInt16 NMasters;    UInt16 FirstGlyph;    UInt16 LastGlyph;    SFNTLookupTable lookup;  };
     typedef struct ROTAHeader ROTAHeader;
     struct ROTAGlyphEntry {    SInt16 GlyphIndexOffset;    SInt16 HBaselineOffset;    SInt16 VBaselineOffset;  };
     typedef struct ROTAGlyphEntry ROTAGlyphEntry;
     enum {    kANKRCurrentVersion = 0 };
     struct AnchorPoint {    SInt16 x;    SInt16 y;  };
     typedef struct AnchorPoint AnchorPoint;
     struct AnchorPointTable {    UInt32 nPoints;    AnchorPoint points[1];  };
     typedef struct AnchorPointTable AnchorPointTable;
     struct AnkrTable {    UInt16 version;    UInt16 flags;    UInt32 lookupTableOffset;    UInt32 anchorPointTableOffset;  };
     typedef struct AnkrTable AnkrTable;
     enum {    kLTAGCurrentVersion = 1 };
     struct LtagStringRange {    UInt16 offset;    UInt16 length;  };
     typedef struct LtagStringRange LtagStringRange;
     struct LtagTable {    UInt32 version;    UInt32 flags;    UInt32 numTags;    LtagStringRange tagRange[1];  };
     typedef struct LtagTable LtagTable;
     typedef double CGFloat;
     typedef struct __attribute__((objc_bridge(id))) __IOSurface *IOSurfaceRef __attribute__((swift_name("IOSurfaceRef")));
     struct CGPoint {      CGFloat x;      CGFloat y;  };
     typedef struct CGPoint CGPoint;
     struct CGSize {      CGFloat width;      CGFloat height;  };
     typedef struct CGSize CGSize;
     struct CGVector {      CGFloat dx;      CGFloat dy;  };
     typedef struct CGVector CGVector;
     struct CGRect {      CGPoint origin;      CGSize size;  };
     typedef struct CGRect CGRect;
     typedef uint32_t CGRectEdge;
     enum {      CGRectMinXEdge, CGRectMinYEdge, CGRectMaxXEdge, CGRectMaxYEdge };
     extern const CGPoint CGPointZero       __attribute__((availability(macosx,introduced=10.0)));
     extern const CGSize CGSizeZero     __attribute__((availability(macosx,introduced=10.0)));
     extern const CGRect CGRectZero     __attribute__((availability(macosx,introduced=10.0)));
     extern const CGRect CGRectNull     __attribute__((availability(macosx,introduced=10.0)));
     extern const CGRect CGRectInfinite     __attribute__((availability(macosx,introduced=10.4)));
     static inline CGPoint CGPointMake(CGFloat x, CGFloat y);
     static inline CGSize CGSizeMake(CGFloat width, CGFloat height);
     static inline CGVector CGVectorMake(CGFloat dx, CGFloat dy);
     static inline CGRect CGRectMake(CGFloat x, CGFloat y, CGFloat width,   CGFloat height);
     extern CGFloat CGRectGetMinX(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGFloat CGRectGetMidX(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGFloat CGRectGetMaxX(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGFloat CGRectGetMinY(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGFloat CGRectGetMidY(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGFloat CGRectGetMaxY(CGRect rect)     __attribute__((availability(macosx,introduced=10.0)));
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceModeDescription;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceModeDescriptions;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceDefaultProfileID;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceHostScope;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceUserScope;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncProfileHostScope;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncProfileUserScope;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceProfileIsFactory;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceProfileIsDefault;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceProfileIsCurrent;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceProfileID;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceRegisteredNotification;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceUnregisteredNotification;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDeviceProfilesNotification;
     __attribute__((visibility("default"))) extern CFStringRef kColorSyncDisplayDeviceProfilesNotification;
     __attribute__((visibility("default"))) extern _Bool ColorSyncRegisterDevice (CFStringRef deviceClass, CFUUIDRef deviceID, CFDictionaryRef deviceInfo);
     __attribute__((visibility("default"))) extern _Bool ColorSyncUnregisterDevice (CFStringRef deviceClass, CFUUIDRef deviceID);
     __attribute__((visibility("default"))) extern _Bool ColorSyncDeviceSetCustomProfiles (CFStringRef deviceClass, CFUUIDRef deviceID, CFDictionaryRef profileInfo);
     __attribute__((visibility("default"))) extern CFDictionaryRef ColorSyncDeviceCopyDeviceInfo (CFStringRef deviceClass, CFUUIDRef devID);
     typedef _Bool (*ColorSyncDeviceProfileIterateCallback) (CFDictionaryRef colorSyncDeviceProfileInfo,                                                        void* userInfo);
     __attribute__((visibility("default"))) extern void ColorSyncIterateDeviceProfiles(ColorSyncDeviceProfileIterateCallback callBack,                                             void* userInfo);
         __attribute__((visibility("default"))) extern CFUUIDRef CGDisplayCreateUUIDFromDisplayID (uint32_t displayID);
         __attribute__((visibility("default"))) extern uint32_t CGDisplayGetDisplayIDFromUUID (CFUUIDRef uuid);
     typedef struct CGAffineTransform CGAffineTransform;
     struct CGAffineTransform {    CGFloat a, b, c, d;    CGFloat tx, ty;  };
     extern const CGAffineTransform CGAffineTransformIdentity   __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformMake(CGFloat a, CGFloat b,   CGFloat c, CGFloat d, CGFloat tx, CGFloat ty)   __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformMakeTranslation(CGFloat tx,   CGFloat ty) __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)   __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformMakeRotation(CGFloat angle)   __attribute__((availability(macosx,introduced=10.0)));
     extern _Bool CGAffineTransformIsIdentity(CGAffineTransform t)   __attribute__((availability(macosx,introduced=10.4)));
     extern CGAffineTransform CGAffineTransformTranslate(CGAffineTransform t,   CGFloat tx, CGFloat ty) __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformScale(CGAffineTransform t,   CGFloat sx, CGFloat sy) __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformRotate(CGAffineTransform t,   CGFloat angle) __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformInvert(CGAffineTransform t)   __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGAffineTransformConcat(CGAffineTransform t1,   CGAffineTransform t2) __attribute__((availability(macosx,introduced=10.0)));
     extern _Bool CGAffineTransformEqualToTransform(CGAffineTransform t1,   CGAffineTransform t2) __attribute__((availability(macosx,introduced=10.4)));
     extern CGPoint CGPointApplyAffineTransform(CGPoint point,   CGAffineTransform t) __attribute__((availability(macosx,introduced=10.0)));
     extern CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)   __attribute__((availability(macosx,introduced=10.0)));
     extern CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform t)   __attribute__((availability(macosx,introduced=10.4)));
     static inline CGAffineTransform __CGAffineTransformMake(CGFloat a, CGFloat b, CGFloat c, CGFloat d,   CGFloat tx, CGFloat ty) {    CGAffineTransform t;    t.a = a;  t.b = b;  t.c = c;  t.d = d;  t.tx = tx;  t.ty = ty;    return t;  }
     static inline CGPoint __CGPointApplyAffineTransform(CGPoint point, CGAffineTransform t) {    CGPoint p;    p.x = (CGFloat)((double)t.a * point.x + (double)t.c * point.y + t.tx);    p.y = (CGFloat)((double)t.b * point.x + (double)t.d * point.y + t.ty);    return p;  }
     static inline CGSize __CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t) {    CGSize s;    s.width = (CGFloat)((double)t.a * size.width + (double)t.c * size.height);    s.height = (CGFloat)((double)t.b * size.width + (double)t.d * size.height);    return s;  }
     typedef struct CGContext *CGContextRef;
     typedef struct CGColor *CGColorRef;
     typedef struct CGColorSpace *CGColorSpaceRef;
     typedef struct CGDataProvider *CGDataProviderRef;
     typedef size_t (*CGDataProviderGetBytesCallback)(void * _Nullable info,     void * buffer, size_t count);
     typedef off_t (*CGDataProviderSkipForwardCallback)(void * _Nullable info,     off_t count);
     typedef void (*CGDataProviderRewindCallback)(void * _Nullable info);
     typedef void (*CGDataProviderReleaseInfoCallback)(void * _Nullable info);
     struct CGDataProviderSequentialCallbacks {      unsigned int version;      CGDataProviderGetBytesCallback _Nullable getBytes;      CGDataProviderSkipForwardCallback _Nullable skipForward;      CGDataProviderRewindCallback _Nullable rewind;      CGDataProviderReleaseInfoCallback _Nullable releaseInfo;  };
     typedef struct CGDataProviderSequentialCallbacks     CGDataProviderSequentialCallbacks;
     typedef const void * _Nullable(*CGDataProviderGetBytePointerCallback)(     void * _Nullable info);
     typedef void (*CGDataProviderReleaseBytePointerCallback)(     void * _Nullable info, const void * pointer);
     typedef size_t (*CGDataProviderGetBytesAtPositionCallback)(     void * _Nullable info, void * buffer, off_t pos, size_t cnt);
     struct CGDataProviderDirectCallbacks {      unsigned int version;      CGDataProviderGetBytePointerCallback _Nullable getBytePointer;      CGDataProviderReleaseBytePointerCallback _Nullable releaseBytePointer;      CGDataProviderGetBytesAtPositionCallback _Nullable getBytesAtPosition;      CGDataProviderReleaseInfoCallback _Nullable releaseInfo;  };
     typedef struct CGDataProviderDirectCallbacks CGDataProviderDirectCallbacks;
     extern CFTypeID CGDataProviderGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGDataProviderRef _Nullable CGDataProviderCreateSequential(     void * _Nullable info,     const CGDataProviderSequentialCallbacks * _Nullable callbacks)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGDataProviderRef _Nullable CGDataProviderCreateDirect(     void * _Nullable info, off_t size,     const CGDataProviderDirectCallbacks * _Nullable callbacks)     __attribute__((availability(macosx,introduced=10.5)));
     typedef void (*CGDataProviderReleaseDataCallback)(void * _Nullable info,     const void * data, size_t size);
     extern CGDataProviderRef _Nullable CGDataProviderCreateWithData(     void * _Nullable info, const void * _Nullable data, size_t size,     CGDataProviderReleaseDataCallback _Nullable releaseData)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataProviderRef _Nullable CGDataProviderCreateWithCFData(     CFDataRef _Nullable data)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGDataProviderRef _Nullable CGDataProviderCreateWithURL(     CFURLRef _Nullable url)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataProviderRef _Nullable CGDataProviderCreateWithFilename(     const char * _Nullable filename)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataProviderRef _Nullable CGDataProviderRetain(     CGDataProviderRef _Nullable provider)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGDataProviderRelease(CGDataProviderRef _Nullable provider)     __attribute__((availability(macosx,introduced=10.0)));
     extern CFDataRef _Nullable CGDataProviderCopyData(     CGDataProviderRef _Nullable provider)     __attribute__((availability(macosx,introduced=10.3)));
     typedef int32_t CGColorRenderingIntent;
     enum {      kCGRenderingIntentDefault,     kCGRenderingIntentAbsoluteColorimetric,     kCGRenderingIntentRelativeColorimetric,     kCGRenderingIntentPerceptual,     kCGRenderingIntentSaturation };
     typedef int32_t CGColorSpaceModel;
     enum {      kCGColorSpaceModelUnknown = -1,     kCGColorSpaceModelMonochrome,     kCGColorSpaceModelRGB,     kCGColorSpaceModelCMYK,     kCGColorSpaceModelLab,     kCGColorSpaceModelDeviceN,     kCGColorSpaceModelIndexed,     kCGColorSpaceModelPattern };
     extern const CFStringRef kCGColorSpaceGenericGray   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGColorSpaceGenericRGB   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGColorSpaceGenericCMYK   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGColorSpaceDisplayP3   __attribute__((availability(macosx,introduced=10.11.2)));
     extern const CFStringRef kCGColorSpaceGenericRGBLinear   __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGColorSpaceAdobeRGB1998   __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGColorSpaceSRGB   __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGColorSpaceGenericGrayGamma2_2   __attribute__((availability(macosx,introduced=10.6)));
     extern const CFStringRef kCGColorSpaceGenericXYZ   __attribute__((availability(macosx,introduced=10.11)));
     extern const CFStringRef kCGColorSpaceACESCGLinear __attribute__((availability(macosx,introduced=10.11)));
     extern const CFStringRef kCGColorSpaceITUR_709 __attribute__((availability(macosx,introduced=10.11)));
     extern const CFStringRef kCGColorSpaceITUR_2020 __attribute__((availability(macosx,introduced=10.11)));
     extern const CFStringRef kCGColorSpaceROMMRGB __attribute__((availability(macosx,introduced=10.11)));
     extern const CFStringRef kCGColorSpaceDCIP3 __attribute__((availability(macosx,introduced=10.11)));
     extern _Bool CGColorSpaceIsWideGamutRGB(CGColorSpaceRef) __attribute__((availability(macosx,introduced=10.12)));
     extern _Bool CGColorSpaceSupportsOutput(CGColorSpaceRef space) __attribute__((availability(macosx,introduced=10.12)));
     typedef struct CGPattern *CGPatternRef;
     typedef int32_t CGPatternTiling;
     enum {      kCGPatternTilingNoDistortion,     kCGPatternTilingConstantSpacingMinimalDistortion,     kCGPatternTilingConstantSpacing };
     typedef void (*CGPatternDrawPatternCallback)(void * _Nullable info,                                              CGContextRef _Nullable context);
     typedef void (*CGPatternReleaseInfoCallback)(void * _Nullable info);
     struct CGPatternCallbacks {      unsigned int version;      CGPatternDrawPatternCallback _Nullable drawPattern;      CGPatternReleaseInfoCallback _Nullable releaseInfo;  };
     typedef struct CGPatternCallbacks CGPatternCallbacks;
     extern CFTypeID CGPatternGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGPatternRef _Nullable CGPatternCreate(void * _Nullable info,     CGRect bounds, CGAffineTransform matrix, CGFloat xStep, CGFloat yStep,     CGPatternTiling tiling, _Bool isColored,     const CGPatternCallbacks * _Nullable callbacks)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGPatternRef _Nullable CGPatternRetain(CGPatternRef _Nullable pattern)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGPatternRelease(CGPatternRef _Nullable pattern)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGColorRef _Nullable CGColorCreate(CGColorSpaceRef _Nullable space,   const CGFloat * _Nullable components)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)   __attribute__((availability(macosx,introduced=10.5)));
     extern CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green,   CGFloat blue, CGFloat alpha) __attribute__((availability(macosx,introduced=10.5)));
     extern CGColorRef CGColorCreateGenericCMYK(CGFloat cyan, CGFloat magenta,   CGFloat yellow, CGFloat black, CGFloat alpha)   __attribute__((availability(macosx,introduced=10.5)));
     extern CGColorRef _Nullable CGColorGetConstantColor(CFStringRef _Nullable colorName)   __attribute__((availability(macosx,introduced=10.5)));
     extern CGColorRef _Nullable CGColorCreateWithPattern(CGColorSpaceRef _Nullable space,   CGPatternRef _Nullable pattern, const CGFloat * _Nullable components)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGColorRef _Nullable CGColorCreateCopy(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGColorRef _Nullable CGColorCreateCopyWithAlpha(CGColorRef _Nullable color,   CGFloat alpha) __attribute__((availability(macosx,introduced=10.3)));
     extern CGColorRef _Nullable CGColorCreateCopyByMatchingToColorSpace(_Nullable CGColorSpaceRef,   CGColorRenderingIntent intent, CGColorRef _Nullable color, _Nullable CFDictionaryRef options)   __attribute__((availability(macosx,introduced=10.11)));
     extern CGColorRef _Nullable CGColorRetain(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern void CGColorRelease(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGColorEqualToColor(CGColorRef _Nullable color1, CGColorRef _Nullable color2)   __attribute__((availability(macosx,introduced=10.3)));
     extern size_t CGColorGetNumberOfComponents(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern const CGFloat * _Nullable CGColorGetComponents(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGFloat CGColorGetAlpha(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGColorSpaceRef _Nullable CGColorGetColorSpace(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGPatternRef _Nullable CGColorGetPattern(CGColorRef _Nullable color)   __attribute__((availability(macosx,introduced=10.3)));
     extern CFTypeID CGColorGetTypeID(void)   __attribute__((availability(macosx,introduced=10.3)));
     extern const CFStringRef kCGColorWhite   __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGColorBlack   __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGColorClear   __attribute__((availability(macosx,introduced=10.5)));
     typedef struct CGFont *CGFontRef;
     typedef unsigned short CGFontIndex;
     typedef CGFontIndex CGGlyph;
     typedef int32_t CGFontPostScriptFormat;
     enum {      kCGFontPostScriptFormatType1 = 1,     kCGFontPostScriptFormatType3 = 3,     kCGFontPostScriptFormatType42 = 42 };
     static const CGFontIndex kCGFontIndexMax = ((1 << 16) - 2);
     static const CGFontIndex kCGFontIndexInvalid = ((1 << 16) - 1);
     static const CGFontIndex kCGGlyphMax = kCGFontIndexMax;
     extern CFTypeID CGFontGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGFontRef _Nullable CGFontCreateWithPlatformFont(     void * _Nullable platformFontReference)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     extern CGFontRef _Nullable CGFontCreateWithDataProvider(     CGDataProviderRef _Nullable provider)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGFontRef _Nullable CGFontCreateWithFontName(     CFStringRef _Nullable name)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGFontRef _Nullable CGFontCreateCopyWithVariations(     CGFontRef _Nullable font, CFDictionaryRef _Nullable variations)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGFontRef _Nullable CGFontRetain(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGFontRelease(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGFontGetNumberOfGlyphs(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.0)));
     extern int CGFontGetUnitsPerEm(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.0)));
     extern CFStringRef _Nullable CGFontCopyPostScriptName(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFStringRef _Nullable CGFontCopyFullName(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern int CGFontGetAscent(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern int CGFontGetDescent(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern int CGFontGetLeading(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern int CGFontGetCapHeight(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern int CGFontGetXHeight(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGRect CGFontGetFontBBox(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGFloat CGFontGetItalicAngle(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGFloat CGFontGetStemV(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern CFArrayRef _Nullable CGFontCopyVariationAxes(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFDictionaryRef _Nullable CGFontCopyVariations(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGFontGetGlyphAdvances(CGFontRef _Nullable font,     const CGGlyph * glyphs, size_t count, int * advances)     __attribute__((availability(macosx,introduced=10.0)));
     extern _Bool CGFontGetGlyphBBoxes(CGFontRef _Nullable font,     const CGGlyph * glyphs, size_t count, CGRect * bboxes)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGGlyph CGFontGetGlyphWithGlyphName(     CGFontRef _Nullable font, CFStringRef _Nullable name)     __attribute__((availability(macosx,introduced=10.5)));
     extern CFStringRef _Nullable CGFontCopyGlyphNameForGlyph(     CGFontRef _Nullable font, CGGlyph glyph)     __attribute__((availability(macosx,introduced=10.5)));
     extern _Bool CGFontCanCreatePostScriptSubset(CGFontRef _Nullable font,     CGFontPostScriptFormat format)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFDataRef _Nullable CGFontCreatePostScriptSubset(     CGFontRef _Nullable font, CFStringRef _Nullable subsetName,     CGFontPostScriptFormat format, const CGGlyph * _Nullable glyphs,     size_t count, const CGGlyph encoding[256])     __attribute__((availability(macosx,introduced=10.4)));
     extern CFDataRef _Nullable CGFontCreatePostScriptEncoding(     CGFontRef _Nullable font, const CGGlyph encoding[256])     __attribute__((availability(macosx,introduced=10.4)));
     extern CFArrayRef _Nullable CGFontCopyTableTags(CGFontRef _Nullable font)     __attribute__((availability(macosx,introduced=10.5)));
     extern CFDataRef _Nullable CGFontCopyTableForTag(     CGFontRef _Nullable font, uint32_t tag)     __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kCGFontVariationAxisName     __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGFontVariationAxisMinValue     __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGFontVariationAxisMaxValue     __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGFontVariationAxisDefaultValue     __attribute__((availability(macosx,introduced=10.4)));
     typedef int32_t CGGlyphDeprecatedEnum;
     enum {    CGGlyphMin __attribute__((deprecated)),   CGGlyphMax __attribute__((deprecated)) };
     typedef struct CGGradient *CGGradientRef;
     typedef uint32_t CGGradientDrawingOptions;
     enum {    kCGGradientDrawsBeforeStartLocation = (1 << 0),   kCGGradientDrawsAfterEndLocation = (1 << 1) };
     extern CFTypeID CGGradientGetTypeID(void)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGGradientRef _Nullable CGGradientCreateWithColorComponents(     CGColorSpaceRef _Nullable space, const CGFloat * _Nullable components,     const CGFloat * _Nullable locations, size_t count)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGGradientRef _Nullable CGGradientCreateWithColors(     CGColorSpaceRef _Nullable space, CFArrayRef _Nullable colors,     const CGFloat * _Nullable locations)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGGradientRef _Nullable CGGradientRetain(     CGGradientRef _Nullable gradient)     __attribute__((availability(macosx,introduced=10.5)));
     extern void CGGradientRelease(CGGradientRef _Nullable gradient)     __attribute__((availability(macosx,introduced=10.5)));
     typedef struct CGImage *CGImageRef;
     typedef uint32_t CGImageAlphaInfo;
     enum {      kCGImageAlphaNone,     kCGImageAlphaPremultipliedLast,     kCGImageAlphaPremultipliedFirst,     kCGImageAlphaLast,     kCGImageAlphaFirst,     kCGImageAlphaNoneSkipLast,     kCGImageAlphaNoneSkipFirst,     kCGImageAlphaOnly };
     typedef uint32_t CGImageByteOrderInfo;
     enum {      kCGImageByteOrderMask = 0x7000,     kCGImageByteOrder16Little = (1 << 12),     kCGImageByteOrder32Little = (2 << 12),     kCGImageByteOrder16Big = (3 << 12),     kCGImageByteOrder32Big = (4 << 12) }
     __attribute__((availability(macosx,introduced=10.12)));
     typedef uint32_t CGBitmapInfo;
     enum {      kCGBitmapAlphaInfoMask = 0x1F,     kCGBitmapFloatInfoMask = 0xF00,     kCGBitmapFloatComponents = (1 << 8),     kCGBitmapByteOrderMask = kCGImageByteOrderMask,     kCGBitmapByteOrderDefault = (0 << 12),     kCGBitmapByteOrder16Little = kCGImageByteOrder16Little,     kCGBitmapByteOrder32Little = kCGImageByteOrder32Little,     kCGBitmapByteOrder16Big = kCGImageByteOrder16Big,     kCGBitmapByteOrder32Big = kCGImageByteOrder32Big }
     __attribute__((availability(macosx,introduced=10.0)));
     extern CFTypeID CGImageGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGImageRef _Nullable CGImageCreate(size_t width, size_t height,     size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow,     CGColorSpaceRef _Nullable space, CGBitmapInfo bitmapInfo,     CGDataProviderRef _Nullable provider,     const CGFloat * _Nullable decode, _Bool shouldInterpolate,     CGColorRenderingIntent intent)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGImageRef _Nullable CGImageMaskCreate(size_t width, size_t height,     size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow,     CGDataProviderRef _Nullable provider, const CGFloat * _Nullable decode,     _Bool shouldInterpolate)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGImageRef _Nullable CGImageCreateCopy(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGImageRef _Nullable CGImageCreateWithJPEGDataProvider(     CGDataProviderRef _Nullable source, const CGFloat * _Nullable decode,     _Bool shouldInterpolate,     CGColorRenderingIntent intent)     __attribute__((availability(macosx,introduced=10.1)));
     extern CGImageRef _Nullable CGImageCreateWithPNGDataProvider(     CGDataProviderRef _Nullable source, const CGFloat * _Nullable decode,     _Bool shouldInterpolate,     CGColorRenderingIntent intent)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGImageRef _Nullable CGImageCreateWithImageInRect(     CGImageRef _Nullable image, CGRect rect)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGImageRef _Nullable CGImageCreateWithMask(     CGImageRef _Nullable image, CGImageRef _Nullable mask)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGImageRef _Nullable CGImageCreateWithMaskingColors(     CGImageRef _Nullable image, const CGFloat * _Nullable components)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGImageRef _Nullable CGImageCreateCopyWithColorSpace(     CGImageRef _Nullable image, CGColorSpaceRef _Nullable space)     __attribute__((availability(macosx,introduced=10.3)));
     extern CGImageRef _Nullable CGImageRetain(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGImageRelease(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern _Bool CGImageIsMask(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGImageGetWidth(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGImageGetHeight(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGImageGetBitsPerComponent(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGImageGetBitsPerPixel(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGImageGetBytesPerRow(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGColorSpaceRef _Nullable CGImageGetColorSpace(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataProviderRef _Nullable CGImageGetDataProvider(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern const CGFloat * _Nullable CGImageGetDecode(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern _Bool CGImageGetShouldInterpolate(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGColorRenderingIntent CGImageGetRenderingIntent(_Nullable CGImageRef image)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGBitmapInfo CGImageGetBitmapInfo(CGImageRef _Nullable image)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFStringRef _Nullable CGImageGetUTType(_Nullable CGImageRef image)     __attribute__((availability(macosx,introduced=10.11)));
     typedef struct CGPath *CGMutablePathRef;
     typedef const struct CGPath *CGPathRef;
     typedef int32_t CGLineJoin;
     enum {      kCGLineJoinMiter,     kCGLineJoinRound,     kCGLineJoinBevel };
     typedef int32_t CGLineCap;
     enum {      kCGLineCapButt,     kCGLineCapRound,     kCGLineCapSquare };
     extern CFTypeID CGPathGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGMutablePathRef CGPathCreateMutable(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGPathRef _Nullable CGPathCreateCopy(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGPathRef _Nullable CGPathCreateCopyByTransformingPath(     CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform)     __attribute__((availability(macosx,introduced=10.7)));
     extern CGMutablePathRef _Nullable CGPathCreateMutableCopy(     CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGMutablePathRef _Nullable CGPathCreateMutableCopyByTransformingPath(     CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform)     __attribute__((availability(macosx,introduced=10.7)));
     extern CGPathRef CGPathCreateWithRect(CGRect rect,     const CGAffineTransform * _Nullable transform)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGPathRef CGPathCreateWithEllipseInRect(CGRect rect,     const CGAffineTransform * _Nullable transform)     __attribute__((availability(macosx,introduced=10.7)));
     extern CGPathRef CGPathCreateWithRoundedRect(CGRect rect,     CGFloat cornerWidth, CGFloat cornerHeight,     const CGAffineTransform * _Nullable transform)     __attribute__((availability(macosx,introduced=10.9)));
     extern void CGPathAddRoundedRect(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable transform, CGRect rect,     CGFloat cornerWidth, CGFloat cornerHeight)     __attribute__((availability(macosx,introduced=10.9)));
     extern CGPathRef _Nullable CGPathCreateCopyByDashingPath(     CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform,     CGFloat phase, const CGFloat * _Nullable lengths, size_t count)     __attribute__((availability(macosx,introduced=10.7)));
     extern CGPathRef _Nullable CGPathCreateCopyByStrokingPath(     CGPathRef _Nullable path, const CGAffineTransform * _Nullable transform,     CGFloat lineWidth, CGLineCap lineCap,     CGLineJoin lineJoin, CGFloat miterLimit)     __attribute__((availability(macosx,introduced=10.7)));
     extern CGPathRef _Nullable CGPathRetain(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathRelease(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern _Bool CGPathEqualToPath(CGPathRef _Nullable path1,     CGPathRef _Nullable path2)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathMoveToPoint(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGFloat x, CGFloat y)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddLineToPoint(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGFloat x, CGFloat y)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddQuadCurveToPoint(CGMutablePathRef _Nullable path,     const CGAffineTransform *_Nullable m, CGFloat cpx, CGFloat cpy,     CGFloat x, CGFloat y)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddCurveToPoint(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGFloat cp1x, CGFloat cp1y,     CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathCloseSubpath(CGMutablePathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddRect(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGRect rect)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddRects(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, const CGRect * _Nullable rects,     size_t count)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddLines(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, const CGPoint * _Nullable points,     size_t count)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddEllipseInRect(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGRect rect)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGPathAddRelativeArc(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable matrix, CGFloat x, CGFloat y,     CGFloat radius, CGFloat startAngle, CGFloat delta)     __attribute__((availability(macosx,introduced=10.7)));
     extern void CGPathAddArc(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m,     CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle,     _Bool clockwise)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddArcToPoint(CGMutablePathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGFloat x1, CGFloat y1,     CGFloat x2, CGFloat y2, CGFloat radius)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGPathAddPath(CGMutablePathRef _Nullable path1,     const CGAffineTransform * _Nullable m, CGPathRef _Nullable path2)     __attribute__((availability(macosx,introduced=10.2)));
     extern _Bool CGPathIsEmpty(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern _Bool CGPathIsRect(CGPathRef _Nullable path, CGRect * _Nullable rect)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGPoint CGPathGetCurrentPoint(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGRect CGPathGetBoundingBox(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGRect CGPathGetPathBoundingBox(CGPathRef _Nullable path)     __attribute__((availability(macosx,introduced=10.6)));
     extern _Bool CGPathContainsPoint(CGPathRef _Nullable path,     const CGAffineTransform * _Nullable m, CGPoint point, _Bool eoFill)     __attribute__((availability(macosx,introduced=10.4)));
     typedef int32_t CGPathElementType;
     enum {    kCGPathElementMoveToPoint,   kCGPathElementAddLineToPoint,   kCGPathElementAddQuadCurveToPoint,   kCGPathElementAddCurveToPoint,   kCGPathElementCloseSubpath };
     struct CGPathElement {    CGPathElementType type;    CGPoint * points;  };
     typedef struct CGPathElement CGPathElement;
     typedef void (*CGPathApplierFunction)(void * _Nullable info,   const CGPathElement * element);
     extern void CGPathApply(CGPathRef _Nullable path, void * _Nullable info,     CGPathApplierFunction _Nullable function)     __attribute__((availability(macosx,introduced=10.2)));
     typedef struct CGPDFDocument *CGPDFDocumentRef;
     typedef struct CGPDFPage *CGPDFPageRef;
     typedef struct CGPDFDictionary *CGPDFDictionaryRef;
     typedef struct CGPDFArray *CGPDFArrayRef;
     typedef unsigned char CGPDFBoolean;
     typedef long int CGPDFInteger;
     typedef CGFloat CGPDFReal;
     typedef struct CGPDFObject *CGPDFObjectRef;
     typedef int32_t CGPDFObjectType;
     enum {    kCGPDFObjectTypeNull = 1,   kCGPDFObjectTypeBoolean,   kCGPDFObjectTypeInteger,   kCGPDFObjectTypeReal,   kCGPDFObjectTypeName,   kCGPDFObjectTypeString,   kCGPDFObjectTypeArray,   kCGPDFObjectTypeDictionary,   kCGPDFObjectTypeStream };
     extern CGPDFObjectType CGPDFObjectGetType(CGPDFObjectRef _Nullable object)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFObjectGetValue(CGPDFObjectRef _Nullable object,     CGPDFObjectType type, void * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     typedef struct CGPDFStream *CGPDFStreamRef;
     typedef int32_t CGPDFDataFormat;
     enum {      CGPDFDataFormatRaw, CGPDFDataFormatJPEGEncoded, CGPDFDataFormatJPEG2000 };
     extern CGPDFDictionaryRef _Nullable CGPDFStreamGetDictionary(     CGPDFStreamRef _Nullable stream)     __attribute__((availability(macosx,introduced=10.3)));
     extern CFDataRef _Nullable CGPDFStreamCopyData(     CGPDFStreamRef _Nullable stream,     CGPDFDataFormat * _Nullable format)     __attribute__((availability(macosx,introduced=10.3)));
     typedef struct CGPDFString *CGPDFStringRef;
     extern size_t CGPDFStringGetLength(CGPDFStringRef _Nullable string)     __attribute__((availability(macosx,introduced=10.3)));
     extern const unsigned char * _Nullable CGPDFStringGetBytePtr(     CGPDFStringRef _Nullable string)     __attribute__((availability(macosx,introduced=10.3)));
     extern CFStringRef _Nullable CGPDFStringCopyTextString(     CGPDFStringRef _Nullable string)     __attribute__((availability(macosx,introduced=10.3)));
     extern CFDateRef _Nullable CGPDFStringCopyDate(     CGPDFStringRef _Nullable string)     __attribute__((availability(macosx,introduced=10.4)));
     extern size_t CGPDFArrayGetCount(CGPDFArrayRef _Nullable array)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetObject(CGPDFArrayRef _Nullable array, size_t index,     CGPDFObjectRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetNull(CGPDFArrayRef _Nullable array, size_t index)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetBoolean(CGPDFArrayRef _Nullable array,     size_t index, CGPDFBoolean * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetInteger(CGPDFArrayRef _Nullable array,     size_t index, CGPDFInteger * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetNumber(CGPDFArrayRef _Nullable array,     size_t index, CGPDFReal * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetName(CGPDFArrayRef _Nullable array,     size_t index, const char * _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetString(CGPDFArrayRef _Nullable array,     size_t index, CGPDFStringRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetArray(CGPDFArrayRef _Nullable array,     size_t index, CGPDFArrayRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetDictionary(CGPDFArrayRef _Nullable array,     size_t index, CGPDFDictionaryRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFArrayGetStream(CGPDFArrayRef _Nullable array,     size_t index, CGPDFStreamRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern size_t CGPDFDictionaryGetCount(CGPDFDictionaryRef _Nullable dict)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFDictionaryGetObject(CGPDFDictionaryRef _Nullable dict,     const char * key, CGPDFObjectRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFDictionaryGetBoolean(CGPDFDictionaryRef _Nullable dict,     const char * key, CGPDFBoolean * _Nullable value)     __attribute__((availability(macosx,introduced=10.3)));
     extern _Bool CGPDFDocumentAllowsCopying(CGPDFDocumentRef _Nullable document)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGPDFDocumentGetNumberOfPages(     CGPDFDocumentRef _Nullable document)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGPDFPageRef _Nullable CGPDFDocumentGetPage(     CGPDFDocumentRef _Nullable document, size_t pageNumber)     __attribute__((availability(macosx,introduced=10.3)));
     extern CGPDFDictionaryRef _Nullable CGPDFDocumentGetCatalog(     CGPDFDocumentRef _Nullable document)     __attribute__((availability(macosx,introduced=10.3)));
     extern CGPDFDictionaryRef _Nullable CGPDFDocumentGetInfo(     CGPDFDocumentRef _Nullable document)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFArrayRef _Nullable CGPDFDocumentGetID(     CGPDFDocumentRef _Nullable document)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFTypeID CGPDFDocumentGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGRect CGPDFDocumentGetMediaBox(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern CGRect CGPDFDocumentGetCropBox(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern CGRect CGPDFDocumentGetBleedBox(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern CGRect CGPDFDocumentGetTrimBox(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern CGRect CGPDFDocumentGetArtBox(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern int CGPDFDocumentGetRotationAngle(CGPDFDocumentRef _Nullable document,     int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     typedef struct CGShading *CGShadingRef;
     typedef struct CGFunction *CGFunctionRef;
     typedef void (*CGFunctionEvaluateCallback)(void * _Nullable info,   const CGFloat * in, CGFloat * out);
     typedef void (*CGFunctionReleaseInfoCallback)(void * _Nullable info);
     struct CGFunctionCallbacks {      unsigned int version;      CGFunctionEvaluateCallback _Nullable evaluate;      CGFunctionReleaseInfoCallback _Nullable releaseInfo;  };
     typedef struct CGFunctionCallbacks CGFunctionCallbacks;
     extern CFTypeID CGFunctionGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGFunctionRef _Nullable CGFunctionCreate(void * _Nullable info,     size_t domainDimension, const CGFloat *_Nullable domain,     size_t rangeDimension, const CGFloat * _Nullable range,     const CGFunctionCallbacks * _Nullable callbacks)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGFunctionRef _Nullable CGFunctionRetain(     CGFunctionRef _Nullable function)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGFunctionRelease(CGFunctionRef _Nullable function)     __attribute__((availability(macosx,introduced=10.2)));
     extern CFTypeID CGShadingGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGShadingRef _Nullable CGShadingCreateAxial(     CGColorSpaceRef _Nullable space, CGPoint start, CGPoint end,     CGFunctionRef _Nullable function, _Bool extendStart, _Bool extendEnd)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGShadingRef _Nullable CGShadingCreateRadial(     CGColorSpaceRef _Nullable space,     CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius,     CGFunctionRef _Nullable function, _Bool extendStart, _Bool extendEnd)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGShadingRef _Nullable CGShadingRetain(CGShadingRef _Nullable shading)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGShadingRelease(CGShadingRef _Nullable shading)     __attribute__((availability(macosx,introduced=10.2)));
     typedef int32_t CGPathDrawingMode;
     enum {    kCGPathFill,   kCGPathEOFill,   kCGPathStroke,   kCGPathFillStroke,   kCGPathEOFillStroke };
     typedef int32_t CGTextDrawingMode;
     enum {    kCGTextFill,   kCGTextStroke,   kCGTextFillStroke,   kCGTextInvisible,   kCGTextFillClip,   kCGTextStrokeClip,   kCGTextFillStrokeClip,   kCGTextClip };
     typedef int32_t CGTextEncoding;
     enum {    kCGEncodingFontSpecific,   kCGEncodingMacRoman }
     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     typedef int32_t CGInterpolationQuality;
     enum {    kCGInterpolationDefault = 0,   kCGInterpolationNone = 1,   kCGInterpolationLow = 2,   kCGInterpolationMedium = 4,   kCGInterpolationHigh = 3 };
     typedef int32_t CGBlendMode;
     enum {      kCGBlendModeNormal,     kCGBlendModeMultiply,     kCGBlendModeScreen,     kCGBlendModeOverlay,     kCGBlendModeDarken,     kCGBlendModeLighten,     kCGBlendModeColorDodge,     kCGBlendModeColorBurn,     kCGBlendModeSoftLight,     kCGBlendModeHardLight,     kCGBlendModeDifference,     kCGBlendModeExclusion,     kCGBlendModeHue,     kCGBlendModeSaturation,     kCGBlendModeColor,     kCGBlendModeLuminosity,     kCGBlendModeClear,     kCGBlendModeCopy,     kCGBlendModeSourceIn,     kCGBlendModeSourceOut,     kCGBlendModeSourceAtop,     kCGBlendModeDestinationOver,     kCGBlendModeDestinationIn,     kCGBlendModeDestinationOut,     kCGBlendModeDestinationAtop,     kCGBlendModeXOR,     kCGBlendModePlusDarker,     kCGBlendModePlusLighter };
     extern CFTypeID CGContextGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGContextSaveGState(CGContextRef _Nullable c)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextRestoreGState(CGContextRef _Nullable c)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextScaleCTM(CGContextRef _Nullable c,     CGFloat sx, CGFloat sy)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextTranslateCTM(CGContextRef _Nullable c,     CGFloat tx, CGFloat ty)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextRotateCTM(CGContextRef _Nullable c, CGFloat angle)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextConcatCTM(CGContextRef _Nullable c,     CGAffineTransform transform)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGAffineTransform CGContextGetCTM(CGContextRef _Nullable c)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetLineWidth(CGContextRef _Nullable c, CGFloat width)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetLineCap(CGContextRef _Nullable c, CGLineCap cap)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetLineJoin(CGContextRef _Nullable c, CGLineJoin join)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetMiterLimit(CGContextRef _Nullable c, CGFloat limit)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetLineDash(CGContextRef _Nullable c, CGFloat phase,     const CGFloat * _Nullable lengths, size_t count)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetFlatness(CGContextRef _Nullable c, CGFloat flatness)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetAlpha(CGContextRef _Nullable c, CGFloat alpha)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGContextSetBlendMode(CGContextRef _Nullable c, CGBlendMode mode)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGContextDrawRadialGradient(CGContextRef _Nullable c,     CGGradientRef _Nullable gradient, CGPoint startCenter, CGFloat startRadius,     CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)     __attribute__((availability(macosx,introduced=10.5)));
     extern void CGContextDrawShading(CGContextRef _Nullable c,     _Nullable CGShadingRef shading)     __attribute__((availability(macosx,introduced=10.2)));
     extern void CGContextSetCharacterSpacing(CGContextRef _Nullable c,     CGFloat spacing)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGSize CGContextConvertSizeToDeviceSpace(CGContextRef _Nullable c,     CGSize size)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGSize CGContextConvertSizeToUserSpace(CGContextRef _Nullable c,     CGSize size)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGRect CGContextConvertRectToDeviceSpace(CGContextRef _Nullable c,     CGRect rect)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGRect CGContextConvertRectToUserSpace(CGContextRef _Nullable c,     CGRect rect)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGContextSelectFont(CGContextRef _Nullable c,     const char * _Nullable name, CGFloat size, CGTextEncoding textEncoding)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern void CGContextShowText(CGContextRef _Nullable c,     const char * _Nullable string, size_t length)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern void CGContextShowTextAtPoint(CGContextRef _Nullable c,     CGFloat x, CGFloat y, const char * _Nullable string, size_t length)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern void CGContextShowGlyphs(CGContextRef _Nullable c,     const CGGlyph * _Nullable g, size_t count)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern void CGContextShowGlyphsAtPoint(CGContextRef _Nullable c, CGFloat x,     CGFloat y, const CGGlyph * _Nullable glyphs, size_t count)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
     extern void CGContextShowGlyphsWithAdvances(CGContextRef _Nullable c,     const CGGlyph * _Nullable glyphs, const CGSize * _Nullable advances,     size_t count)     __attribute__((availability(macosx,introduced=10.3,deprecated=10.9)));
     extern void CGContextDrawPDFDocument(CGContextRef _Nullable c, CGRect rect,     CGPDFDocumentRef _Nullable document, int page)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     typedef void (*CGBitmapContextReleaseDataCallback)(void * _Nullable releaseInfo,     void * _Nullable data);
     extern CGContextRef _Nullable CGBitmapContextCreateWithData(     void * _Nullable data, size_t width, size_t height, size_t bitsPerComponent,     size_t bytesPerRow, CGColorSpaceRef _Nullable space, uint32_t bitmapInfo,     CGBitmapContextReleaseDataCallback _Nullable releaseCallback,     void * _Nullable releaseInfo)     __attribute__((availability(macosx,introduced=10.6)));
     extern CGContextRef _Nullable CGBitmapContextCreate(void * _Nullable data,     size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow,     CGColorSpaceRef _Nullable space, uint32_t bitmapInfo)     __attribute__((availability(macosx,introduced=10.0)));
     extern void * _Nullable CGBitmapContextGetData(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGBitmapContextGetWidth(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGBitmapContextGetHeight(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGBitmapContextGetBitsPerComponent(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGBitmapContextGetBitsPerPixel(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern size_t CGBitmapContextGetBytesPerRow(CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGColorSpaceRef _Nullable CGBitmapContextGetColorSpace(     CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGImageAlphaInfo CGBitmapContextGetAlphaInfo(     CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGBitmapInfo CGBitmapContextGetBitmapInfo(     CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGImageRef _Nullable CGBitmapContextCreateImage(     CGContextRef _Nullable context)     __attribute__((availability(macosx,introduced=10.4)));
     typedef const struct __attribute__((objc_bridge(id))) CGColorConversionInfo* CGColorConversionInfoRef;
     extern CFTypeID CGColorConversionInfoGetTypeID(void);
     typedef uint32_t CGColorConversionInfoTransformType;
     enum {    kCGColorConversionTransformFromSpace = 0,   kCGColorConversionTransformToSpace,   kCGColorConversionTransformApplySpace };
     extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreate(_Nullable CGColorSpaceRef src, _Nullable CGColorSpaceRef dst)     __attribute__((availability(macosx,introduced=10.12)));
     extern CGColorConversionInfoRef _Nullable CGColorConversionInfoCreateFromList   (CFDictionaryRef _Nullable options, _Nullable CGColorSpaceRef, CGColorConversionInfoTransformType, CGColorRenderingIntent, ...)   __attribute__((availability(macosx,introduced=10.12)));
     extern const CFStringRef kCGColorConversionBlackPointCompensation __attribute__((availability(macosx,introduced=10.12)));
     typedef struct CGDataConsumer *CGDataConsumerRef;
     typedef size_t (*CGDataConsumerPutBytesCallback)(void * _Nullable info,     const void * buffer, size_t count);
     typedef void (*CGDataConsumerReleaseInfoCallback)(void * _Nullable info);
     struct CGDataConsumerCallbacks {      CGDataConsumerPutBytesCallback _Nullable putBytes;      CGDataConsumerReleaseInfoCallback _Nullable releaseConsumer;  };
     typedef struct CGDataConsumerCallbacks CGDataConsumerCallbacks;
     extern CFTypeID CGDataConsumerGetTypeID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGDataConsumerRef _Nullable CGDataConsumerCreate(     void * _Nullable info, const CGDataConsumerCallbacks * _Nullable cbks)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataConsumerRef _Nullable CGDataConsumerCreateWithURL(     CFURLRef _Nullable url)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDataConsumerRef _Nullable CGDataConsumerCreateWithCFData(     CFMutableDataRef _Nullable data)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGDataConsumerRef _Nullable CGDataConsumerRetain(     CGDataConsumerRef _Nullable consumer)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGDataConsumerRelease(_Nullable CGDataConsumerRef consumer)     __attribute__((availability(macosx,introduced=10.0)));
     typedef int32_t CGError;
     enum {    kCGErrorSuccess = 0,   kCGErrorFailure = 1000,   kCGErrorIllegalArgument = 1001,   kCGErrorInvalidConnection = 1002,   kCGErrorInvalidContext = 1003,   kCGErrorCannotComplete = 1004,   kCGErrorNotImplemented = 1006,   kCGErrorRangeCheck = 1007,   kCGErrorTypeCheck = 1008,   kCGErrorInvalidOperation = 1010,   kCGErrorNoneAvailable = 1011, };
     typedef struct CGLayer *CGLayerRef;
     extern CGLayerRef _Nullable CGLayerCreateWithContext(     CGContextRef _Nullable context,     CGSize size, CFDictionaryRef _Nullable auxiliaryInfo)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGLayerRef _Nullable CGLayerRetain(CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGLayerRelease(CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGSize CGLayerGetSize(CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGContextRef _Nullable CGLayerGetContext(CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGContextDrawLayerInRect(CGContextRef _Nullable context,     CGRect rect, CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGContextDrawLayerAtPoint(CGContextRef _Nullable context,     CGPoint point, CGLayerRef _Nullable layer)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFTypeID CGLayerGetTypeID(void)     __attribute__((availability(macosx,introduced=10.4)));
     typedef struct CGPDFContentStream *CGPDFContentStreamRef;
     extern CGPDFContentStreamRef CGPDFContentStreamCreateWithPage(   CGPDFPageRef page) __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFContentStreamRef CGPDFContentStreamCreateWithStream(   CGPDFStreamRef stream, CGPDFDictionaryRef streamResources,   CGPDFContentStreamRef _Nullable parent)   __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFContentStreamRef CGPDFContentStreamRetain(   CGPDFContentStreamRef cs) __attribute__((availability(macosx,introduced=10.4)));
     extern void CGPDFContentStreamRelease(CGPDFContentStreamRef cs)   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGPDFXOutputCondition   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGPDFXRegistryName   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGPDFXInfo   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGPDFXDestinationOutputProfile   __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kCGPDFContextOutputIntents   __attribute__((availability(macosx,introduced=10.4)));
     typedef struct CGPDFOperatorTable *CGPDFOperatorTableRef;
     typedef struct CGPDFScanner *CGPDFScannerRef;
     extern CGPDFScannerRef CGPDFScannerCreate(     CGPDFContentStreamRef cs,     CGPDFOperatorTableRef _Nullable table, void * _Nullable info)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFScannerRef _Nullable CGPDFScannerRetain(     CGPDFScannerRef _Nullable scanner)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGPDFScannerRelease(CGPDFScannerRef _Nullable scanner)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerScan(CGPDFScannerRef _Nullable scanner)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFContentStreamRef CGPDFScannerGetContentStream(     CGPDFScannerRef scanner)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopObject(CGPDFScannerRef scanner,     CGPDFObjectRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopBoolean(CGPDFScannerRef scanner,     CGPDFBoolean * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopInteger(CGPDFScannerRef scanner,     CGPDFInteger * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopNumber(CGPDFScannerRef scanner,     CGPDFReal * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopName(CGPDFScannerRef scanner,     const char * _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopString(CGPDFScannerRef scanner,     CGPDFStringRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopArray(CGPDFScannerRef scanner,     CGPDFArrayRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopDictionary(CGPDFScannerRef scanner,     CGPDFDictionaryRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGPDFScannerPopStream(CGPDFScannerRef scanner,     CGPDFStreamRef _Nullable * _Nullable value)     __attribute__((availability(macosx,introduced=10.4)));
     typedef void (*CGPDFOperatorCallback)(CGPDFScannerRef scanner,                                       void * _Nullable info);
     extern CGPDFOperatorTableRef _Nullable CGPDFOperatorTableCreate(void)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPDFOperatorTableRef _Nullable CGPDFOperatorTableRetain(     CGPDFOperatorTableRef _Nullable table)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGPDFOperatorTableRelease(     CGPDFOperatorTableRef _Nullable table)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGPDFOperatorTableSetCallback(     CGPDFOperatorTableRef _Nullable table,     const char * _Nullable name, CGPDFOperatorCallback _Nullable callback)     __attribute__((availability(macosx,introduced=10.4)));
     typedef uint32_t CGDirectDisplayID;
     typedef uint32_t CGOpenGLDisplayMask;
     typedef double CGRefreshRate;
     typedef struct CGDisplayMode *CGDisplayModeRef;
     extern CGDirectDisplayID CGMainDisplayID(void)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGError CGGetDisplaysWithPoint(CGPoint point, uint32_t maxDisplays,     CGDirectDisplayID * _Nullable displays,     uint32_t * _Nullable matchingDisplayCount)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGGetDisplaysWithRect(CGRect rect, uint32_t maxDisplays,     CGDirectDisplayID * _Nullable displays,     uint32_t * _Nullable matchingDisplayCount)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask mask,     uint32_t maxDisplays, CGDirectDisplayID * _Nullable displays,     uint32_t * _Nullable matchingDisplayCount)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGGetActiveDisplayList(uint32_t maxDisplays,     CGDirectDisplayID * _Nullable activeDisplays,     uint32_t * _Nullable displayCount)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGGetOnlineDisplayList(uint32_t maxDisplays,     CGDirectDisplayID * _Nullable onlineDisplays,     uint32_t * _Nullable displayCount)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGOpenGLDisplayMask CGDisplayIDToOpenGLDisplayMask(     CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGDirectDisplayID CGOpenGLDisplayMaskToDisplayID(     CGOpenGLDisplayMask mask)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGRect CGDisplayBounds(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGDisplayPixelsWide(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.0)));
     extern size_t CGDisplayPixelsHigh(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.0)));
     extern CFArrayRef _Nullable CGDisplayCopyAllDisplayModes(     CGDirectDisplayID display, CFDictionaryRef _Nullable options)     __attribute__((availability(macosx,introduced=10.6)));
     extern const CFStringRef kCGDisplayShowDuplicateLowResolutionModes     __attribute__((availability(macosx,introduced=10.8)));
     extern CGDisplayModeRef _Nullable CGDisplayCopyDisplayMode(     CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.6)));
     extern CGError CGDisplaySetDisplayMode(CGDirectDisplayID display,     CGDisplayModeRef _Nullable mode, CFDictionaryRef _Nullable options)     __attribute__((availability(macosx,introduced=10.6)));
     extern size_t CGDisplayModeGetWidth(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern size_t CGDisplayModeGetHeight(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern CFStringRef _Nullable CGDisplayModeCopyPixelEncoding(     CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6,deprecated=10.11)));
     extern double CGDisplayModeGetRefreshRate(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern uint32_t CGDisplayModeGetIOFlags(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern int32_t CGDisplayModeGetIODisplayModeID(     CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern _Bool CGDisplayModeIsUsableForDesktopGUI(     CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern CFTypeID CGDisplayModeGetTypeID(void)     __attribute__((availability(macosx,introduced=10.6)));
     extern CGDisplayModeRef _Nullable CGDisplayModeRetain(     CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern void CGDisplayModeRelease(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.6)));
     extern size_t CGDisplayModeGetPixelWidth(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.8)));
     extern size_t CGDisplayModeGetPixelHeight(CGDisplayModeRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.8)));
     typedef float CGGammaValue;
     extern CFDictionaryRef _Nullable CGDisplayBestModeForParametersAndRefreshRate(     CGDirectDisplayID display, size_t bitsPerPixel, size_t width, size_t height,     CGRefreshRate refreshRate, boolean_t * _Nullable exactMatch)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     extern CFDictionaryRef _Nullable CGDisplayCurrentMode(     CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     extern CGError CGDisplaySwitchToMode(CGDirectDisplayID display,     CFDictionaryRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     struct CGDeviceColor {    float red;    float green;    float blue;  };
     typedef struct CGDeviceColor CGDeviceColor;
     typedef struct _CGDisplayConfigRef *CGDisplayConfigRef;
     extern CGError CGBeginDisplayConfiguration(     CGDisplayConfigRef _Nullable * _Nullable config)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGConfigureDisplayOrigin(     CGDisplayConfigRef _Nullable config,     CGDirectDisplayID display, int32_t x, int32_t y)     __attribute__((availability(macosx,introduced=10.0)));
     extern CGError CGConfigureDisplayWithDisplayMode(     CGDisplayConfigRef _Nullable config,     CGDirectDisplayID display, CGDisplayModeRef _Nullable mode,     CFDictionaryRef _Nullable options)     __attribute__((availability(macosx,introduced=10.6)));
     extern CGError CGConfigureDisplayStereoOperation(     CGDisplayConfigRef _Nullable config,     CGDirectDisplayID display, boolean_t stereo, boolean_t forceBlueLine)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGError CGConfigureDisplayMirrorOfDisplay(     CGDisplayConfigRef _Nullable config,     CGDirectDisplayID display, CGDirectDisplayID master)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGError CGCancelDisplayConfiguration(     CGDisplayConfigRef _Nullable config)     __attribute__((availability(macosx,introduced=10.0)));
     typedef uint32_t CGConfigureOption;
     enum {      kCGConfigureForAppOnly = 0,     kCGConfigureForSession = 1,     kCGConfigurePermanently = 2 };
     extern CGError CGCompleteDisplayConfiguration(     CGDisplayConfigRef _Nullable config,     CGConfigureOption option)     __attribute__((availability(macosx,introduced=10.0)));
     extern void CGRestorePermanentDisplayConfiguration(void)     __attribute__((availability(macosx,introduced=10.2)));
     typedef uint32_t CGDisplayChangeSummaryFlags;
     enum {      kCGDisplayBeginConfigurationFlag = (1 << 0),     kCGDisplayMovedFlag = (1 << 1),     kCGDisplaySetMainFlag = (1 << 2),     kCGDisplaySetModeFlag = (1 << 3),     kCGDisplayAddFlag = (1 << 4),     kCGDisplayRemoveFlag = (1 << 5),     kCGDisplayEnabledFlag = (1 << 8),     kCGDisplayDisabledFlag = (1 << 9),     kCGDisplayMirrorFlag = (1 << 10),     kCGDisplayUnMirrorFlag = (1 << 11),     kCGDisplayDesktopShapeChangedFlag = (1 << 12) };
     typedef void(*CGDisplayReconfigurationCallBack)(CGDirectDisplayID display,   CGDisplayChangeSummaryFlags flags, void * _Nullable userInfo);
     extern CGError CGDisplayRegisterReconfigurationCallback(   CGDisplayReconfigurationCallBack _Nullable callback,   void * _Nullable userInfo)   __attribute__((availability(macosx,introduced=10.3)));
     extern CGError CGDisplayRemoveReconfigurationCallback(     CGDisplayReconfigurationCallBack _Nullable callback,     void * _Nullable userInfo)     __attribute__((availability(macosx,introduced=10.3)));
     extern CGError CGDisplaySetStereoOperation(CGDirectDisplayID display,     boolean_t stereo, boolean_t forceBlueLine, CGConfigureOption option)     __attribute__((availability(macosx,introduced=10.4)));
     extern boolean_t CGDisplayIsActive(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsAsleep(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsOnline(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsMain(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsBuiltin(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsInMirrorSet(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsInHWMirrorSet(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGDirectDisplayID CGDisplayMirrorsDisplay(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayIsStereo(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGDirectDisplayID CGDisplayPrimaryDisplay(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern uint32_t CGDisplayUnitNumber(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern uint32_t CGDisplayVendorNumber(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern uint32_t CGDisplayModelNumber(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern uint32_t CGDisplaySerialNumber(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2)));
     extern io_service_t CGDisplayIOServicePort(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.2,deprecated=10.9)));
     extern CGSize CGDisplayScreenSize(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.3)));
     extern double CGDisplayRotation(CGDirectDisplayID display)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGColorSpaceRef CGDisplayCopyColorSpace(   CGDirectDisplayID display)   __attribute__((availability(macosx,introduced=10.5)));
     extern CGError CGConfigureDisplayMode(CGDisplayConfigRef _Nullable config,     CGDirectDisplayID display, CFDictionaryRef _Nullable mode)     __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef uint32_t CGDisplayFadeReservationToken;
     typedef float CGDisplayBlendFraction;
     typedef float CGDisplayFadeInterval;
     extern CGError CGConfigureDisplayFadeEffect(     CGDisplayConfigRef _Nullable config,     CGDisplayFadeInterval fadeOutSeconds, CGDisplayFadeInterval fadeInSeconds,     float fadeRed, float fadeGreen, float fadeBlue)     __attribute__((availability(macosx,introduced=10.2)));
     typedef float CGDisplayReservationInterval;
     extern CGError CGAcquireDisplayFadeReservation(CGDisplayReservationInterval     seconds, CGDisplayFadeReservationToken * _Nullable token)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGError CGReleaseDisplayFadeReservation(     CGDisplayFadeReservationToken token)     __attribute__((availability(macosx,introduced=10.2)));
     extern CGError CGDisplayFade(CGDisplayFadeReservationToken token,     CGDisplayFadeInterval duration, CGDisplayBlendFraction startBlend,     CGDisplayBlendFraction endBlend, float redBlend, float greenBlend,     float blueBlend, boolean_t synchronous)     __attribute__((availability(macosx,introduced=10.2)));
     extern boolean_t CGDisplayFadeOperationInProgress(void)     __attribute__((availability(macosx,introduced=10.2,deprecated=10.9)));
     typedef struct CGDisplayStream *CGDisplayStreamRef;
     typedef const struct CGDisplayStreamUpdate *CGDisplayStreamUpdateRef;
     typedef int32_t CGDisplayStreamUpdateRectType;
     enum {          kCGDisplayStreamUpdateRefreshedRects,         kCGDisplayStreamUpdateMovedRects,         kCGDisplayStreamUpdateDirtyRects,         kCGDisplayStreamUpdateReducedDirtyRects, };
     typedef int32_t CGDisplayStreamFrameStatus;
     enum{          kCGDisplayStreamFrameStatusFrameComplete,         kCGDisplayStreamFrameStatusFrameIdle,         kCGDisplayStreamFrameStatusFrameBlank,         kCGDisplayStreamFrameStatusStopped, };
     typedef void (^CGDisplayStreamFrameAvailableHandler)(CGDisplayStreamFrameStatus status, uint64_t displayTime,                                                                            IOSurfaceRef _Nullable frameSurface,                                                                            CGDisplayStreamUpdateRef _Nullable updateRef);
     extern CFTypeID CGDisplayStreamUpdateGetTypeID(void)     __attribute__((availability(macosx,introduced=10.8)));
     extern const CGRect * _Nullable CGDisplayStreamUpdateGetRects(CGDisplayStreamUpdateRef _Nullable updateRef,     CGDisplayStreamUpdateRectType rectType, size_t * rectCount)     __attribute__((availability(macosx,introduced=10.8)));
     extern CGDisplayStreamUpdateRef _Nullable CGDisplayStreamUpdateCreateMergedUpdate(     CGDisplayStreamUpdateRef _Nullable firstUpdate,     CGDisplayStreamUpdateRef _Nullable secondUpdate)     __attribute__((availability(macosx,introduced=10.8)));
     extern void CGDisplayStreamUpdateGetMovedRectsDelta(CGDisplayStreamUpdateRef _Nullable updateRef,     CGFloat * dx, CGFloat * dy)     __attribute__((availability(macosx,introduced=10.8)));
     extern size_t CGDisplayStreamUpdateGetDropCount(CGDisplayStreamUpdateRef _Nullable updateRef)     __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamSourceRect __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamDestinationRect __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamPreserveAspectRatio __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamColorSpace __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamMinimumFrameTime __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamShowCursor __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamQueueDepth __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamYCbCrMatrix __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamYCbCrMatrix_ITU_R_709_2 __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamYCbCrMatrix_ITU_R_601_4 __attribute__((availability(macosx,introduced=10.8)));
     extern const CFStringRef kCGDisplayStreamYCbCrMatrix_SMPTE_240M_1995 __attribute__((availability(macosx,introduced=10.8)));
     extern CFTypeID CGDisplayStreamGetTypeID(void)     __attribute__((availability(macosx,introduced=10.8)));
     extern CGDisplayStreamRef _Nullable CGDisplayStreamCreate(CGDirectDisplayID display,     size_t outputWidth, size_t outputHeight, int32_t pixelFormat, CFDictionaryRef _Nullable properties,     CGDisplayStreamFrameAvailableHandler _Nullable handler)     __attribute__((availability(macosx,introduced=10.8)));
     extern CGDisplayStreamRef _Nullable CGDisplayStreamCreateWithDispatchQueue(CGDirectDisplayID display,     size_t outputWidth, size_t outputHeight, int32_t pixelFormat, CFDictionaryRef _Nullable properties,     dispatch_queue_t queue, CGDisplayStreamFrameAvailableHandler _Nullable handler)     __attribute__((availability(macosx,introduced=10.8)));
     extern CGError CGDisplayStreamStart(CGDisplayStreamRef _Nullable displayStream)     __attribute__((availability(macosx,introduced=10.8)));
     extern CGError CGDisplayStreamStop(CGDisplayStreamRef _Nullable displayStream)     __attribute__((availability(macosx,introduced=10.8)));
     extern CFRunLoopSourceRef _Nullable CGDisplayStreamGetRunLoopSource(CGDisplayStreamRef _Nullable displayStream)     __attribute__((availability(macosx,introduced=10.8)));
     typedef CGError CGEventErr;
     typedef uint32_t CGButtonCount;
     typedef uint32_t CGWheelCount;
     typedef uint16_t CGCharCode;
     typedef uint16_t CGKeyCode;
     typedef void (*CGScreenRefreshCallback)(uint32_t count,                                         const CGRect * rects,                                         void *_Nullable userInfo);
     NXMouseButton;
     typedef struct __IOFixedPoint32 {      int32_t x;      int32_t y;  }
     IOFixedPoint32;
     typedef int *NXEventSystemInfoType;
     typedef int NXEventSystemInfoData[(1024)];
     typedef struct {   int interface;   int interface_addr;   int dev_type;   int id;  }
     NXEventSystemDevice;
     typedef struct {   NXEventSystemDevice dev[16];  }
     NXEventSystemDeviceList;
     typedef enum { EVNOP, EVHIDE, EVSHOW, EVMOVE, EVLEVEL}
     EvCmd;
     typedef float NXCoord;
     typedef struct _NXPoint {      NXCoord x, y;  }
     NXPoint;
     typedef struct _NXSize {      NXCoord width, height;  }
     NXSize;
     typedef struct _NXTabletPointData {   SInt32 x;      SInt32 y;   SInt32 z;      UInt16 buttons;      UInt16 pressure;      struct {         SInt16 x;         SInt16 y;  }  tilt;   UInt16 rotation;   SInt16 tangentialPressure;   UInt16 deviceID;   SInt16 vendor1;   SInt16 vendor2;   SInt16 vendor3;  }
     NXTabletPointData, *NXTabletPointDataPtr;
     typedef struct _NXTabletProximityData {      UInt16 vendorID;   UInt16 tabletID;   UInt16 pointerID;   UInt16 deviceID;   UInt16 systemTabletID;   UInt16 vendorPointerType;   UInt32 pointerSerialNumber;   UInt64 uniqueID __attribute__ ((packed));   UInt32 capabilityMask;   UInt8 pointerType;   UInt8 enterProximity;   SInt16 reserved1;  }
     NXTabletProximityData, *NXTabletProximityDataPtr;
     typedef union {      struct {         UInt8 subx;         UInt8 suby;         SInt16 eventNum;         SInt32 click;         UInt8 pressure;         UInt8 buttonNumber;         UInt8 subType;         UInt8 reserved2;         SInt32 reserved3;         union {             NXTabletPointData point;             NXTabletProximityData proximity;         } tablet;     }  mouse;      struct {         SInt32 dx;         SInt32 dy;         UInt8 subx;         UInt8 suby;         UInt8 subType;         UInt8 reserved1;         SInt32 reserved2;         union {             NXTabletPointData point;             NXTabletProximityData proximity;         } tablet;     }  mouseMove;      struct {         UInt16 origCharSet;         SInt16 repeat;         UInt16 charSet;         UInt16 charCode;         UInt16 keyCode;         UInt16 origCharCode;         SInt32 reserved1;         UInt32 keyboardType;         SInt32 reserved2;         SInt32 reserved3;         SInt32 reserved4;         SInt32 reserved5[4];     }  key;      struct {         SInt16 reserved;         SInt16 eventNum;         SInt32 trackingNum;         SInt32 userData;         SInt32 reserved1;         SInt32 reserved2;         SInt32 reserved3;         SInt32 reserved4;         SInt32 reserved5;         SInt32 reserved6[4];     }  tracking;      struct {         SInt16 deltaAxis1;         SInt16 deltaAxis2;         SInt16 deltaAxis3;         SInt16 reserved1;         SInt32 fixedDeltaAxis1;         SInt32 fixedDeltaAxis2;         SInt32 fixedDeltaAxis3;         SInt32 pointDeltaAxis1;         SInt32 pointDeltaAxis2;         SInt32 pointDeltaAxis3;         SInt32 reserved8[4];     }  scrollWheel, zoom;      struct {         SInt16 reserved;         SInt16 subType;         union {             float F[11];             SInt32 L[11];             SInt16 S[22];             char C[44];         } misc;     }  compound;      struct {         SInt32 x;         SInt32 y;         SInt32 z;         UInt16 buttons;         UInt16 pressure;         struct {             SInt16 x;             SInt16 y;         } tilt;         UInt16 rotation;         SInt16 tangentialPressure;         UInt16 deviceID;         SInt16 vendor1;         SInt16 vendor2;         SInt16 vendor3;         SInt32 reserved[4];     }  tablet;      struct {         UInt16 vendorID;         UInt16 tabletID;         UInt16 pointerID;         UInt16 deviceID;         UInt16 systemTabletID;         UInt16 vendorPointerType;         UInt32 pointerSerialNumber;         UInt64 uniqueID __attribute__ ((packed));         UInt32 capabilityMask;         UInt8 pointerType;         UInt8 enterProximity;         SInt16 reserved1;         SInt32 reserved2[4];     }  proximity;  }
     NXEventData;
     typedef struct _NXEvent {   SInt32 type;      struct {         SInt32 x, y;     }  location;      UInt64 time __attribute__ ((packed));      SInt32 flags;      UInt32 window;      UInt64 service_id __attribute__ ((packed));      SInt32 ext_pid;      NXEventData data;  }
     NXEvent, *NXEventPtr;
     typedef struct _NXEventExtension {      UInt32 flags;  }
     NXEventExtension;
     typedef struct _NXEventExt {      NXEvent payload;      NXEventExtension extension;  }
     NXEventExt;
     typedef struct __CGEvent *CGEventRef;
     typedef uint32_t CGMouseButton;
     enum {    kCGMouseButtonLeft = 0,   kCGMouseButtonRight = 1,   kCGMouseButtonCenter = 2 };
     typedef uint32_t CGScrollEventUnit;
     enum {    kCGScrollEventUnitPixel = 0,   kCGScrollEventUnitLine = 1, };
     typedef uint32_t CGMomentumScrollPhase;
     enum {      kCGMomentumScrollPhaseNone = 0,     kCGMomentumScrollPhaseBegin = 1,     kCGMomentumScrollPhaseContinue = 2,     kCGMomentumScrollPhaseEnd = 3 };
     typedef uint32_t CGScrollPhase;
     enum {      kCGScrollPhaseBegan = 1,     kCGScrollPhaseChanged = 2,     kCGScrollPhaseEnded = 4,     kCGScrollPhaseCancelled = 8,     kCGScrollPhaseMayBegin = 128 };
     typedef uint32_t CGGesturePhase;
     enum {      kCGGesturePhaseNone = 0,     kCGGesturePhaseBegan = 1,     kCGGesturePhaseChanged = 2,     kCGGesturePhaseEnded = 4,     kCGGesturePhaseCancelled = 8,     kCGGesturePhaseMayBegin = 128 };
     typedef uint64_t CGEventFlags;
     enum {    kCGEventFlagMaskAlphaShift = 0x00010000,   kCGEventFlagMaskShift = 0x00020000,   kCGEventFlagMaskControl = 0x00040000,   kCGEventFlagMaskAlternate = 0x00080000,   kCGEventFlagMaskCommand = 0x00100000,   kCGEventFlagMaskHelp = 0x00400000,   kCGEventFlagMaskSecondaryFn = 0x00800000,   kCGEventFlagMaskNumericPad = 0x00200000,   kCGEventFlagMaskNonCoalesced = 0x00000100 };
     typedef uint32_t CGEventType;
     enum {    kCGEventNull = 0,   kCGEventLeftMouseDown = 1,   kCGEventLeftMouseUp = 2,   kCGEventRightMouseDown = 3,   kCGEventRightMouseUp = 4,   kCGEventMouseMoved = 5,   kCGEventLeftMouseDragged = 6,   kCGEventRightMouseDragged = 7,   kCGEventKeyDown = 10,   kCGEventKeyUp = 11,   kCGEventFlagsChanged = 12,   kCGEventScrollWheel = 22,   kCGEventTabletPointer = 23,   kCGEventTabletProximity = 24,   kCGEventOtherMouseDown = 25,   kCGEventOtherMouseUp = 26,   kCGEventOtherMouseDragged = 27,   kCGEventTapDisabledByTimeout = 0xFFFFFFFE,   kCGEventTapDisabledByUserInput = 0xFFFFFFFF };
     typedef uint64_t CGEventTimestamp;
     typedef uint32_t CGEventField;
     enum {    kCGMouseEventNumber = 0,   kCGMouseEventClickState = 1,   kCGMouseEventPressure = 2,   kCGMouseEventButtonNumber = 3,   kCGMouseEventDeltaX = 4,   kCGMouseEventDeltaY = 5,   kCGMouseEventInstantMouser = 6,   kCGMouseEventSubtype = 7,   kCGKeyboardEventAutorepeat = 8,   kCGKeyboardEventKeycode = 9,   kCGKeyboardEventKeyboardType = 10,   kCGScrollWheelEventDeltaAxis1 = 11,   kCGScrollWheelEventDeltaAxis2 = 12,   kCGScrollWheelEventDeltaAxis3 = 13,   kCGScrollWheelEventFixedPtDeltaAxis1 = 93,   kCGScrollWheelEventFixedPtDeltaAxis2 = 94,   kCGScrollWheelEventFixedPtDeltaAxis3 = 95,   kCGScrollWheelEventPointDeltaAxis1 = 96,   kCGScrollWheelEventPointDeltaAxis2 = 97,   kCGScrollWheelEventPointDeltaAxis3 = 98,   kCGScrollWheelEventScrollPhase = 99,   kCGScrollWheelEventScrollCount = 100,   kCGScrollWheelEventMomentumPhase = 123,   kCGScrollWheelEventInstantMouser = 14,   kCGTabletEventPointX = 15,   kCGTabletEventPointY = 16,   kCGTabletEventPointZ = 17,   kCGTabletEventPointButtons = 18,   kCGTabletEventPointPressure = 19,   kCGTabletEventTiltX = 20,   kCGTabletEventTiltY = 21,   kCGTabletEventRotation = 22,   kCGTabletEventTangentialPressure = 23,   kCGTabletEventDeviceID = 24,   kCGTabletEventVendor1 = 25,   kCGTabletEventVendor2 = 26,   kCGTabletEventVendor3 = 27,   kCGTabletProximityEventVendorID = 28,   kCGTabletProximityEventTabletID = 29,   kCGTabletProximityEventPointerID = 30,   kCGTabletProximityEventDeviceID = 31,   kCGTabletProximityEventSystemTabletID = 32,   kCGTabletProximityEventVendorPointerType = 33,   kCGTabletProximityEventVendorPointerSerialNumber = 34,   kCGTabletProximityEventVendorUniqueID = 35,   kCGTabletProximityEventCapabilityMask = 36,   kCGTabletProximityEventPointerType = 37,   kCGTabletProximityEventEnterProximity = 38,   kCGEventTargetProcessSerialNumber = 39,   kCGEventTargetUnixProcessID = 40,   kCGEventSourceUnixProcessID = 41,   kCGEventSourceUserData = 42,   kCGEventSourceUserID = 43,   kCGEventSourceGroupID = 44,   kCGEventSourceStateID = 45,   kCGScrollWheelEventIsContinuous = 88,   kCGMouseEventWindowUnderMousePointer = 91,   kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92 };
     typedef uint32_t CGEventMouseSubtype;
     enum {    kCGEventMouseSubtypeDefault = 0,   kCGEventMouseSubtypeTabletPoint = 1,   kCGEventMouseSubtypeTabletProximity = 2 };
     typedef uint32_t CGEventTapLocation;
     enum {    kCGHIDEventTap = 0,   kCGSessionEventTap,   kCGAnnotatedSessionEventTap };
     typedef uint32_t CGEventTapPlacement;
     enum {    kCGHeadInsertEventTap = 0,   kCGTailAppendEventTap };
     typedef uint32_t CGEventTapOptions;
     enum {    kCGEventTapOptionDefault = 0x00000000,   kCGEventTapOptionListenOnly = 0x00000001 };
     typedef uint64_t CGEventMask;
     typedef struct __CGEventTapProxy *CGEventTapProxy;
     typedef CGEventRef _Nullable (*CGEventTapCallBack)(CGEventTapProxy proxy,   CGEventType type, CGEventRef event, void * _Nullable userInfo);
     struct __CGEventTapInformation {    uint32_t eventTapID;    CGEventTapLocation tapPoint;    CGEventTapOptions options;    CGEventMask eventsOfInterest;    pid_t tappingProcess;    pid_t processBeingTapped;    _Bool enabled;    float minUsecLatency;    float avgUsecLatency;    float maxUsecLatency;  };
     typedef struct __CGEventTapInformation CGEventTapInformation;
     typedef struct __CGEventSource *CGEventSourceRef;
     typedef int32_t CGEventSourceStateID;
     enum {    kCGEventSourceStatePrivate = -1,   kCGEventSourceStateCombinedSessionState = 0,   kCGEventSourceStateHIDSystemState = 1 };
     typedef uint32_t CGEventSourceKeyboardType;
     extern CFTypeID CGEventGetTypeID(void)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventRef _Nullable CGEventCreate(CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFDataRef _Nullable CGEventCreateData(     CFAllocatorRef _Nullable allocator,     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventRef _Nullable CGEventCreateFromData(     CFAllocatorRef _Nullable allocator, CFDataRef _Nullable data)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventRef _Nullable CGEventCreateMouseEvent(     CGEventSourceRef _Nullable source,     CGEventType mouseType, CGPoint mouseCursorPosition,     CGMouseButton mouseButton)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventRef _Nullable CGEventCreateKeyboardEvent(     CGEventSourceRef _Nullable source,     CGKeyCode virtualKey, _Bool keyDown)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventRef _Nullable CGEventCreateScrollWheelEvent(     CGEventSourceRef _Nullable source,     CGScrollEventUnit units, uint32_t wheelCount, int32_t wheel1, ...)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGEventRef _Nullable CGEventCreateCopy(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventSourceRef _Nullable CGEventCreateSourceFromEvent(     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetSource(CGEventRef _Nullable event,     CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventType CGEventGetType(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetType(CGEventRef _Nullable event, CGEventType type)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventTimestamp CGEventGetTimestamp(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetTimestamp(CGEventRef _Nullable event,     CGEventTimestamp timestamp)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPoint CGEventGetLocation(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGPoint CGEventGetUnflippedLocation(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.5)));
     extern void CGEventSetLocation(CGEventRef _Nullable event, CGPoint location)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventFlags CGEventGetFlags(CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetFlags(CGEventRef _Nullable event, CGEventFlags flags)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventKeyboardGetUnicodeString(CGEventRef _Nullable event,     UniCharCount maxStringLength, UniCharCount *_Nullable actualStringLength,     UniChar * _Nullable unicodeString)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventKeyboardSetUnicodeString(CGEventRef _Nullable event,     UniCharCount stringLength, const UniChar * _Nullable unicodeString)     __attribute__((availability(macosx,introduced=10.4)));
     extern int64_t CGEventGetIntegerValueField(CGEventRef _Nullable event,     CGEventField field)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetIntegerValueField(CGEventRef _Nullable event,     CGEventField field, int64_t value)     __attribute__((availability(macosx,introduced=10.4)));
     extern double CGEventGetDoubleValueField(CGEventRef _Nullable event,     CGEventField field)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSetDoubleValueField(CGEventRef _Nullable event,     CGEventField field, double value)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFMachPortRef _Nullable CGEventTapCreate(CGEventTapLocation tap,     CGEventTapPlacement place, CGEventTapOptions options,     CGEventMask eventsOfInterest, CGEventTapCallBack callback,     void * _Nullable userInfo)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFMachPortRef _Nullable CGEventTapCreateForPSN(     void * processSerialNumber,     CGEventTapPlacement place, CGEventTapOptions options,     CGEventMask eventsOfInterest, CGEventTapCallBack callback,     void *_Nullable userInfo)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFMachPortRef _Nullable CGEventTapCreateForPid(pid_t pid,   CGEventTapPlacement place, CGEventTapOptions options,   CGEventMask eventsOfInterest, CGEventTapCallBack callback,   void * _Nullable userInfo) __attribute__((availability(macosx,introduced=10.11)));
     extern void CGEventTapEnable(CFMachPortRef tap, _Bool enable)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGEventTapIsEnabled(CFMachPortRef tap)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventTapPostEvent(CGEventTapProxy _Nullable proxy,     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventPost(CGEventTapLocation tap, CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventPostToPSN(void * _Nullable processSerialNumber,     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventPostToPid( pid_t pid,     CGEventRef _Nullable event)     __attribute__((availability(macosx,introduced=10.11)));
     extern CGError CGGetEventTapList(uint32_t maxNumberOfTaps,     CGEventTapInformation * _Nullable tapList,     uint32_t * _Nullable eventTapCount)     __attribute__((availability(macosx,introduced=10.4)));
     extern CFTypeID CGEventSourceGetTypeID(void)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventSourceRef _Nullable CGEventSourceCreate(     CGEventSourceStateID stateID)     __attribute__((availability(macosx,introduced=10.4)));
     extern CGEventSourceKeyboardType CGEventSourceGetKeyboardType(     CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.4)));
     extern void CGEventSourceSetKeyboardType(CGEventSourceRef _Nullable source,     CGEventSourceKeyboardType keyboardType)     __attribute__((availability(macosx,introduced=10.4)));
     extern double CGEventSourceGetPixelsPerLine(     CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.5)));
     extern void CGEventSourceSetPixelsPerLine(CGEventSourceRef _Nullable source,     double pixelsPerLine)     __attribute__((availability(macosx,introduced=10.5)));
     extern CGEventSourceStateID CGEventSourceGetSourceStateID(     CGEventSourceRef _Nullable source)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGEventSourceButtonState(CGEventSourceStateID stateID,     CGMouseButton button)     __attribute__((availability(macosx,introduced=10.4)));
     extern _Bool CGEventSourceKeyState(CGEventSourceStateID stateID,     CGKeyCode key)     __attribute__((availability(macosx,introduced=10.4)));
     enum {    cmXYZData = 'XYZ ',   cmLabData = 'Lab ',   cmLuvData = 'Luv ',   cmYCbCrData = 'YCbr',   cmYxyData = 'Yxy ',   cmRGBData = 'RGB ',   cmSRGBData = 'sRGB',   cmGrayData = 'GRAY',   cmHSVData = 'HSV ',   cmHLSData = 'HLS ',   cmCMYKData = 'CMYK',   cmCMYData = 'CMY ',   cmMCH5Data = 'MCH5',   cmMCH6Data = 'MCH6',   cmMCH7Data = 'MCH7',   cmMCH8Data = 'MCH8',   cm3CLRData = '3CLR',   cm4CLRData = '4CLR',   cm5CLRData = '5CLR',   cm6CLRData = '6CLR',   cm7CLRData = '7CLR',   cm8CLRData = '8CLR',   cm9CLRData = '9CLR',   cm10CLRData = 'ACLR',   cm11CLRData = 'BCLR',   cm12CLRData = 'CCLR',   cm13CLRData = 'DCLR',   cm14CLRData = 'ECLR',   cm15CLRData = 'FCLR',   cmNamedData = 'NAME' };
     enum {    cmInputClass = 'scnr',   cmDisplayClass = 'mntr',   cmOutputClass = 'prtr',   cmLinkClass = 'link',   cmAbstractClass = 'abst',   cmColorSpaceClass = 'spac',   cmNamedColorClass = 'nmcl' };
     enum {    cmMacintosh = 'APPL',   cmMicrosoft = 'MSFT',   cmSolaris = 'SUNW',   cmSiliconGraphics = 'SGI ',   cmTaligent = 'TGNT' };
     enum {    cmParametricType0 = 0,   cmParametricType1 = 1,   cmParametricType2 = 2,   cmParametricType3 = 3,   cmParametricType4 = 4 };
     enum {    cmCS1ChromTag = 'chrm',   cmCS1TRCTag = 'trc ',   cmCS1NameTag = 'name',   cmCS1CustTag = 'cust' };
     typedef struct CMDateTime {    UInt16 year;    UInt16 month;    UInt16 dayOfTheMonth;    UInt16 hours;    UInt16 minutes;    UInt16 seconds;  }
     CMDateTime __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMFixedXYColor {    Fixed x;    Fixed y;  }
     CMFixedXYColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMFixedXYZColor {    Fixed X;    Fixed Y;    Fixed Z;  }
     CMFixedXYZColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef UInt16 CMXYZComponent;
     typedef struct CMXYZColor {    CMXYZComponent X;    CMXYZComponent Y;    CMXYZComponent Z;  }
     CMXYZColor;
     typedef unsigned char CMProfileMD5[16] __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef CMProfileMD5 * CMProfileMD5Ptr __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CM2Header {    UInt32 size;    OSType CMMType;    UInt32 profileVersion;    OSType profileClass;    OSType dataColorSpace;    OSType profileConnectionSpace;    CMDateTime dateTime;    OSType CS2profileSignature;    OSType platform;    UInt32 flags;    OSType deviceManufacturer;    UInt32 deviceModel;    UInt32 deviceAttributes[2];    UInt32 renderingIntent;    CMFixedXYZColor white;    OSType creator;    char reserved[44];  }
     CM2Header __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CM4Header {    UInt32 size;    OSType CMMType;    UInt32 profileVersion;    OSType profileClass;    OSType dataColorSpace;    OSType profileConnectionSpace;    CMDateTime dateTime;    OSType CS2profileSignature;    OSType platform;    UInt32 flags;    OSType deviceManufacturer;    UInt32 deviceModel;    UInt32 deviceAttributes[2];    UInt32 renderingIntent;    CMFixedXYZColor white;    OSType creator;    CMProfileMD5 digest;    char reserved[28];  }
     CM4Header __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMTagRecord {    OSType tag;    UInt32 elementOffset;    UInt32 elementSize;  }
     CMTagRecord __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMTagElemTable {    UInt32 count;    CMTagRecord tagList[1];  }
     CMTagElemTable __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CM2Profile {    CM2Header header;    CMTagElemTable tagTable;    char elemData[1];  }
     CM2Profile, *CM2ProfilePtr, **CM2ProfileHandle __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMAdaptationMatrixType {    OSType typeDescriptor;    UInt32 reserved;    Fixed adaptationMatrix[9];  }
     CMAdaptationMatrixType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMCurveType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 countValue;    UInt16 data[1];  }
     CMCurveType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMDataType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 dataFlag;    char data[1];  }
     CMDataType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMDateTimeType {    OSType typeDescriptor;    UInt32 reserved;    CMDateTime dateTime;  }
     CMDateTimeType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMLut16Type {    OSType typeDescriptor;    UInt32 reserved;    UInt8 inputChannels;    UInt8 outputChannels;    UInt8 gridPoints;    UInt8 reserved2;    Fixed matrix[3][3];    UInt16 inputTableEntries;    UInt16 outputTableEntries;    UInt16 inputTable[1];  }
     CMLut16Type __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMLut8Type {    OSType typeDescriptor;    UInt32 reserved;    UInt8 inputChannels;    UInt8 outputChannels;    UInt8 gridPoints;    UInt8 reserved2;    Fixed matrix[3][3];    UInt8 inputTable[1];  }
     CMLut8Type __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultiFunctLutType {    OSType typeDescriptor;    UInt32 reserved;    UInt8 inputChannels;    UInt8 outputChannels;    UInt16 reserved2;    UInt32 offsetBcurves;    UInt32 offsetMatrix;    UInt32 offsetMcurves;    UInt32 offsetCLUT;    UInt32 offsetAcurves;    UInt8 data[1];  }
     CMMultiFunctLutType, CMMultiFunctLutA2BType, CMMultiFunctLutB2AType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultiFunctCLUTType {    UInt8 gridPoints[16];    UInt8 entrySize;    UInt8 reserved[3];    UInt8 data[2];  }
     CMMultiFunctCLUTType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMeasurementType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 standardObserver;    CMFixedXYZColor backingXYZ;    UInt32 geometry;    UInt32 flare;    UInt32 illuminant;  }
     CMMeasurementType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNamedColorType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 vendorFlag;    UInt32 count;    UInt8 prefixName[1];  }
     CMNamedColorType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNamedColor2EntryType {    UInt8 rootName[32];    UInt16 PCSColorCoords[3];    UInt16 DeviceColorCoords[1];  }
     CMNamedColor2EntryType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNamedColor2Type {    OSType typeDescriptor;    UInt32 reserved;    UInt32 vendorFlag;    UInt32 count;    UInt32 deviceChannelCount;    UInt8 prefixName[32];    UInt8 suffixName[32];    char data[1];  }
     CMNamedColor2Type __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNativeDisplayInfo {    UInt32 dataSize;    CMFixedXYColor redPhosphor;    CMFixedXYColor greenPhosphor;    CMFixedXYColor bluePhosphor;    CMFixedXYColor whitePoint;    Fixed redGammaValue;    Fixed greenGammaValue;    Fixed blueGammaValue;    UInt16 gammaChannels;    UInt16 gammaEntryCount;    UInt16 gammaEntrySize;    char gammaData[1];  }
     CMNativeDisplayInfo __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNativeDisplayInfoType {    OSType typeDescriptor;    UInt32 reserved;    CMNativeDisplayInfo nativeDisplayInfo;  }
     CMNativeDisplayInfoType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMParametricCurveType {    OSType typeDescriptor;    UInt32 reserved;    UInt16 functionType;    UInt16 reserved2;    Fixed value[1];  }
     CMParametricCurveType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMTextDescriptionType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 ASCIICount;    UInt8 ASCIIName[2];  }
     CMTextDescriptionType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMTextType {    OSType typeDescriptor;    UInt32 reserved;    UInt8 text[1];  }
     CMTextType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUnicodeTextType {    OSType typeDescriptor;    UInt32 reserved;    UniChar text[1];  }
     CMUnicodeTextType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMScreeningChannelRec {    Fixed frequency;    Fixed angle;    UInt32 spotFunction;  }
     CMScreeningChannelRec __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMScreeningType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 screeningFlag;    UInt32 channelCount;    CMScreeningChannelRec channelInfo[1];  }
     CMScreeningType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMSignatureType {    OSType typeDescriptor;    UInt32 reserved;    OSType signature;  }
     CMSignatureType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMS15Fixed16ArrayType {    OSType typeDescriptor;    UInt32 reserved;    Fixed value[1];  }
     CMS15Fixed16ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMU16Fixed16ArrayType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 value[1];  }
     CMU16Fixed16ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUInt8ArrayType {    OSType typeDescriptor;    UInt32 reserved;    UInt8 value[1];  }
     CMUInt8ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUInt16ArrayType {    OSType typeDescriptor;    UInt32 reserved;    UInt16 value[1];  }
     CMUInt16ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUInt32ArrayType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 value[1];  }
     CMUInt32ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUInt64ArrayType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 value[1];  }
     CMUInt64ArrayType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMViewingConditionsType {    OSType typeDescriptor;    UInt32 reserved;    CMFixedXYZColor illuminant;    CMFixedXYZColor surround;    UInt32 stdIlluminant;  }
     CMViewingConditionsType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMXYZType {    OSType typeDescriptor;    UInt32 reserved;    CMFixedXYZColor XYZ[1];  }
     CMXYZType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMProfileSequenceDescType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 count;    char data[1];  }
     CMProfileSequenceDescType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMUcrBgType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 ucrCount;    UInt16 ucrValues[1];  }
     CMUcrBgType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMIntentCRDVMSize {    UInt32 renderingIntent;    UInt32 VMSize;  }
     CMIntentCRDVMSize __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMPS2CRDVMSizeType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 count;    CMIntentCRDVMSize intentCRD[1];  }
     CMPS2CRDVMSizeType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmVideoCardGammaTableType = 0,   cmVideoCardGammaFormulaType = 1 };
     typedef struct CMVideoCardGammaTable {    UInt16 channels;    UInt16 entryCount;    UInt16 entrySize;    char data[1];  }
     CMVideoCardGammaTable __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMVideoCardGammaFormula {    Fixed redGamma;    Fixed redMin;    Fixed redMax;    Fixed greenGamma;    Fixed greenMin;    Fixed greenMax;    Fixed blueGamma;    Fixed blueMin;    Fixed blueMax;  }
     CMVideoCardGammaFormula __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMVideoCardGamma {    UInt32 tagType;    union {     CMVideoCardGammaTable table;     CMVideoCardGammaFormula formula;   }  u;  }
     CMVideoCardGamma __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMVideoCardGammaType {    OSType typeDescriptor;    UInt32 reserved;    CMVideoCardGamma gamma;  }
     CMVideoCardGammaType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMakeAndModel {    OSType manufacturer;    UInt32 model;    UInt32 serialNumber;    UInt32 manufactureDate;    UInt32 reserved1;    UInt32 reserved2;    UInt32 reserved3;    UInt32 reserved4;  }
     CMMakeAndModel __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMakeAndModelType {    OSType typeDescriptor;    UInt32 reserved;    CMMakeAndModel makeAndModel;  }
     CMMakeAndModelType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultiLocalizedUniCodeEntryRec {    char languageCode[2];    char regionCode[2];    UInt32 textLength;    UInt32 textOffset;  }
     CMMultiLocalizedUniCodeEntryRec __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultiLocalizedUniCodeType {    OSType typeDescriptor;    UInt32 reserved;    UInt32 entryCount;    UInt32 entrySize;  }
     CMMultiLocalizedUniCodeType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef OSStatus CMError __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct OpaqueCMProfileRef* CMProfileRef __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct OpaqueCMWorldRef* CMWorldRef __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef UInt32 CMDisplayIDType __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef UInt32 CMChromaticAdaptation __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmUseDefaultChromaticAdaptation = 0,   cmLinearChromaticAdaptation = 1,   cmVonKriesChromaticAdaptation = 2,   cmBradfordChromaticAdaptation = 3 };
     typedef OSErr ( * CMFlattenProcPtr)(SInt32 command, long *size, void *data, void *refCon);
     typedef CMFlattenProcPtr CMFlattenUPP;
     typedef Boolean ( * CMBitmapCallBackProcPtr)(SInt32 progress, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef CMBitmapCallBackProcPtr CMBitmapCallBackUPP __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef Boolean ( * CMConcatCallBackProcPtr)(SInt32 progress, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef CMConcatCallBackProcPtr CMConcatCallBackUPP __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    kDefaultCMMSignature = 'appl' };
     enum {    cmPS7bit = 1,   cmPS8bit = 2 };
     enum {    cmOpenReadSpool = 1,   cmOpenWriteSpool = 2,   cmReadSpool = 3,   cmWriteSpool = 4,   cmCloseSpool = 5 };
     enum {    cmOpenReadAccess = 1,   cmOpenWriteAccess = 2,   cmReadAccess = 3,   cmWriteAccess = 4,   cmCloseAccess = 5,   cmCreateNewAccess = 6,   cmAbortWriteAccess = 7,   cmBeginAccess = 8,   cmEndAccess = 9 };
     enum {    cmInputUse = 'inpt',   cmOutputUse = 'outp',   cmDisplayUse = 'dply',   cmProofUse = 'pruf' };
     union CMAppleProfileHeader {    CM2Header cm2;    CM4Header cm4;  };
     typedef union CMAppleProfileHeader CMAppleProfileHeader __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMConcatProfileSet {    UInt16 keyIndex;    UInt16 count;    CMProfileRef profileSet[1];  }
     CMConcatProfileSet __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct NCMConcatProfileSpec {    UInt32 renderingIntent;    UInt32 transformTag;    CMProfileRef profile;  }
     NCMConcatProfileSpec __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct NCMConcatProfileSet {    OSType cmm;    UInt32 flags;    UInt32 flagsMask;    UInt32 profileCount;    NCMConcatProfileSpec profileSpecs[1];  }
     NCMConcatProfileSet __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    kNoTransform = 0,   kUseAtoB = 1,   kUseBtoA = 2,   kUseBtoB = 3,   kDeviceToPCS = kUseAtoB,   kPCSToDevice = kUseBtoA,   kPCSToPCS = kUseBtoB,   kUseProfileIntent = (int)0xFFFFFFFF };
     typedef struct CMRGBColor {    UInt16 red;    UInt16 green;    UInt16 blue;  }
     CMRGBColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMCMYKColor {    UInt16 cyan;    UInt16 magenta;    UInt16 yellow;    UInt16 black;  }
     CMCMYKColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMCMYColor {    UInt16 cyan;    UInt16 magenta;    UInt16 yellow;  }
     CMCMYColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMHLSColor {    UInt16 hue;    UInt16 lightness;    UInt16 saturation;  }
     CMHLSColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMHSVColor {    UInt16 hue;    UInt16 saturation;    UInt16 value;  }
     CMHSVColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMLabColor {    UInt16 L;    UInt16 a;    UInt16 b;  }
     CMLabColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMLuvColor {    UInt16 L;    UInt16 u;    UInt16 v;  }
     CMLuvColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMYxyColor {    UInt16 capY;    UInt16 x;    UInt16 y;  }
     CMYxyColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMGrayColor {    UInt16 gray;  }
     CMGrayColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultichannel5Color {    UInt8 components[5];  }
     CMMultichannel5Color __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultichannel6Color {    UInt8 components[6];  }
     CMMultichannel6Color __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultichannel7Color {    UInt8 components[7];  }
     CMMultichannel7Color __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMultichannel8Color {    UInt8 components[8];  }
     CMMultichannel8Color __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMNamedColor {    UInt32 namedColorIndex;  }
     CMNamedColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef union CMColor {    CMRGBColor rgb;    CMHSVColor hsv;    CMHLSColor hls;    CMXYZColor XYZ;    CMLabColor Lab;    CMLuvColor Luv;    CMYxyColor Yxy;    CMCMYKColor cmyk;    CMCMYColor cmy;    CMGrayColor gray;    CMMultichannel5Color mc5;    CMMultichannel6Color mc6;    CMMultichannel7Color mc7;    CMMultichannel8Color mc8;    CMNamedColor namedColor;  }
     CMColor __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMMInfo {    size_t dataSize;    OSType CMMType;    OSType CMMMfr;    UInt32 CMMVersion;    unsigned char ASCIIName[32];    unsigned char ASCIIDesc[256];    UniCharCount UniCodeNameCount;    UniChar UniCodeName[32];    UniCharCount UniCodeDescCount;    UniChar UniCodeDesc[256];  }
     CMMInfo __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmColorSpaceSpaceMask = 0x0000003F,   cmColorSpacePremulAlphaMask = 0x00000040,   cmColorSpaceAlphaMask = 0x00000080,   cmColorSpaceSpaceAndAlphaMask = 0x000000FF,   cmColorSpacePackingMask = 0x0000FF00,   cmColorSpaceEncodingMask = 0x000F0000,   cmColorSpaceReservedMask = (int)0xFFF00000 };
     enum {    cmNoColorPacking = 0x0000,   cmWord5ColorPacking = 0x0500,   cmWord565ColorPacking = 0x0600,   cmLong8ColorPacking = 0x0800,   cmLong10ColorPacking = 0x0A00,   cmAlphaFirstPacking = 0x1000,   cmOneBitDirectPacking = 0x0B00,   cmAlphaLastPacking = 0x0000,   cm8_8ColorPacking = 0x2800,   cm16_8ColorPacking = 0x2000,   cm24_8ColorPacking = 0x2100,   cm32_8ColorPacking = cmLong8ColorPacking,   cm40_8ColorPacking = 0x2200,   cm48_8ColorPacking = 0x2300,   cm56_8ColorPacking = 0x2400,   cm64_8ColorPacking = 0x2500,   cm32_16ColorPacking = 0x2600,   cm48_16ColorPacking = 0x2900,   cm64_16ColorPacking = 0x2A00,   cm32_32ColorPacking = 0x2700,   cmLittleEndianPacking = 0x4000,   cmReverseChannelPacking = 0x8000 };
     enum {    cmSRGB16ChannelEncoding = 0x00010000 };
     enum {    cmNoSpace = 0x0000,   cmRGBSpace = 0x0001,   cmCMYKSpace = 0x0002,   cmHSVSpace = 0x0003,   cmHLSSpace = 0x0004,   cmYXYSpace = 0x0005,   cmXYZSpace = 0x0006,   cmLUVSpace = 0x0007,   cmLABSpace = 0x0008,   cmReservedSpace1 = 0x0009,   cmGraySpace = 0x000A,   cmReservedSpace2 = 0x000B,   cmGamutResultSpace = 0x000C,   cmNamedIndexedSpace = 0x0010,   cmMCFiveSpace = 0x0011,   cmMCSixSpace = 0x0012,   cmMCSevenSpace = 0x0013,   cmMCEightSpace = 0x0014,   cmAlphaPmulSpace = 0x0040,   cmAlphaSpace = 0x0080,   cmRGBASpace = cmRGBSpace + cmAlphaSpace,   cmGrayASpace = cmGraySpace + cmAlphaSpace,   cmRGBAPmulSpace = cmRGBASpace + cmAlphaPmulSpace,   cmGrayAPmulSpace = cmGrayASpace + cmAlphaPmulSpace };
     enum {    cmGray8Space = cmGraySpace + cm8_8ColorPacking,   cmGray16Space = cmGraySpace,   cmGray16LSpace = cmGraySpace + cmLittleEndianPacking,   cmGrayA16Space = cmGrayASpace + cm16_8ColorPacking,   cmGrayA32Space = cmGrayASpace,   cmGrayA32LSpace = cmGrayASpace + cmLittleEndianPacking,   cmGrayA16PmulSpace = cmGrayAPmulSpace + cm16_8ColorPacking,   cmGrayA32PmulSpace = cmGrayAPmulSpace,   cmGrayA32LPmulSpace = cmGrayAPmulSpace + cmLittleEndianPacking,   cmRGB16Space = cmRGBSpace + cmWord5ColorPacking,   cmRGB16LSpace = cmRGBSpace + cmWord5ColorPacking + cmLittleEndianPacking,   cmRGB565Space = cmRGBSpace + cmWord565ColorPacking,   cmRGB565LSpace = cmRGBSpace + cmWord565ColorPacking + cmLittleEndianPacking,   cmRGB24Space = cmRGBSpace + cm24_8ColorPacking,   cmRGB32Space = cmRGBSpace + cm32_8ColorPacking,   cmRGB48Space = cmRGBSpace + cm48_16ColorPacking,   cmRGB48LSpace = cmRGBSpace + cm48_16ColorPacking + cmLittleEndianPacking,   cmARGB32Space = cmRGBASpace + cm32_8ColorPacking + cmAlphaFirstPacking,   cmARGB64Space = cmRGBASpace + cm64_16ColorPacking + cmAlphaFirstPacking,   cmARGB64LSpace = cmRGBASpace + cm64_16ColorPacking + cmAlphaFirstPacking + cmLittleEndianPacking,   cmRGBA32Space = cmRGBASpace + cm32_8ColorPacking + cmAlphaLastPacking,   cmRGBA64Space = cmRGBASpace + cm64_16ColorPacking + cmAlphaLastPacking,   cmRGBA64LSpace = cmRGBASpace + cm64_16ColorPacking + cmAlphaLastPacking + cmLittleEndianPacking,   cmARGB32PmulSpace = cmRGBAPmulSpace + cm32_8ColorPacking + cmAlphaFirstPacking,   cmARGB64PmulSpace = cmRGBAPmulSpace + cm64_16ColorPacking + cmAlphaFirstPacking,   cmARGB64LPmulSpace = cmRGBAPmulSpace + cm64_16ColorPacking + cmAlphaFirstPacking + cmLittleEndianPacking,   cmRGBA32PmulSpace = cmRGBAPmulSpace + cm32_8ColorPacking + cmAlphaLastPacking,   cmRGBA64PmulSpace = cmRGBAPmulSpace + cm64_16ColorPacking + cmAlphaLastPacking,   cmRGBA64LPmulSpace = cmRGBAPmulSpace + cm64_16ColorPacking + cmAlphaLastPacking + cmLittleEndianPacking,   cmCMYK32Space = cmCMYKSpace + cm32_8ColorPacking,   cmCMYK64Space = cmCMYKSpace + cm64_16ColorPacking,   cmCMYK64LSpace = cmCMYKSpace + cm64_16ColorPacking + cmLittleEndianPacking,   cmHSV32Space = cmHSVSpace + cmLong10ColorPacking,   cmHLS32Space = cmHLSSpace + cmLong10ColorPacking,   cmYXY32Space = cmYXYSpace + cmLong10ColorPacking,   cmXYZ24Space = cmXYZSpace + cm24_8ColorPacking,   cmXYZ32Space = cmXYZSpace + cmLong10ColorPacking,   cmXYZ48Space = cmXYZSpace + cm48_16ColorPacking,   cmXYZ48LSpace = cmXYZSpace + cm48_16ColorPacking + cmLittleEndianPacking,   cmLUV32Space = cmLUVSpace + cmLong10ColorPacking,   cmLAB24Space = cmLABSpace + cm24_8ColorPacking,   cmLAB32Space = cmLABSpace + cmLong10ColorPacking,   cmLAB48Space = cmLABSpace + cm48_16ColorPacking,   cmLAB48LSpace = cmLABSpace + cm48_16ColorPacking + cmLittleEndianPacking,   cmGamutResult1Space = cmOneBitDirectPacking + cmGamutResultSpace,   cmNamedIndexed32Space = cm32_32ColorPacking + cmNamedIndexedSpace,   cmNamedIndexed32LSpace = cm32_32ColorPacking + cmNamedIndexedSpace + cmLittleEndianPacking,   cmMCFive8Space = cm40_8ColorPacking + cmMCFiveSpace,   cmMCSix8Space = cm48_8ColorPacking + cmMCSixSpace,   cmMCSeven8Space = cm56_8ColorPacking + cmMCSevenSpace,   cmMCEight8Space = cm64_8ColorPacking + cmMCEightSpace };
     typedef UInt32 CMBitmapColorSpace __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMBitmap {    char * image;    size_t width;    size_t height;    size_t rowBytes;    size_t pixelSize;    CMBitmapColorSpace space;    UInt32 user1;    UInt32 user2;  }
     CMBitmap __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    CS_MAX_PATH = 1024 };
     enum {    cmNoProfileBase = 0,   cmPathBasedProfile = 5,   cmBufferBasedProfile = 6 };
     typedef struct CMHandleLocation {    Handle h;  }
     CMHandleLocation __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMPathLocation {    char path[CS_MAX_PATH];  }
     CMPathLocation __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMBufferLocation {    void * buffer;    UInt32 size;  }
     CMBufferLocation __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef union CMProfLoc {    CMHandleLocation handleLoc;    CMPathLocation pathLoc;    CMBufferLocation bufferLoc;  }
     CMProfLoc __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMProfileLocation {    short locType;    CMProfLoc u;  }
     CMProfileLocation __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmOriginalProfileLocationSize = 72,   cmCurrentProfileLocationSize = sizeof(CMProfileLocation) };
     enum {    cmProfileIterateDataVersion1 = 0x00010000,   cmProfileIterateDataVersion2 = 0x00020000,   cmProfileIterateDataVersion3 = 0x00030000,   cmProfileIterateDataVersion4 = 0x00040000 };
     typedef struct CMProfileIterateData {    UInt32 dataVersion;    CM2Header header;    ScriptCode code;    Str255 name;    CMProfileLocation location;    UniCharCount uniCodeNameCount;    UniChar * uniCodeName;    unsigned char * asciiName;    CMMakeAndModel * makeAndModel;    CMProfileMD5 * digest;  }
     CMProfileIterateData __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef OSErr ( * CMProfileIterateProcPtr)(CMProfileIterateData *iterateData, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef CMProfileIterateProcPtr CMProfileIterateUPP __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef OSErr ( * CMMIterateProcPtr)(CMMInfo *iterateData, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef CMMIterateProcPtr CMMIterateUPP __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef void ( * CMLabToLabProcPtr)(float *L, float *a, float *b, void *refcon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum CMFloatBitmapFlags {    kCMFloatBitmapFlagsNone = 0,   kCMFloatBitmapFlagsAlpha = 1,   kCMFloatBitmapFlagsAlphaPremul = 2,   kCMFloatBitmapFlagsRangeClipped = 4 };
     typedef enum CMFloatBitmapFlags CMFloatBitmapFlags;
     typedef struct CMFloatBitmap {    unsigned long version;    float * buffers[16];    size_t height;    size_t width;    ptrdiff_t rowStride;    ptrdiff_t colStride;    OSType space;    CMFloatBitmapFlags flags;  }
     CMFloatBitmap __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmDeviceInfoVersion1 = 0x00010000,   cmDeviceProfileInfoVersion1 = 0x00010000,   cmDeviceProfileInfoVersion2 = 0x00020000 };
     enum {    cmCurrentDeviceInfoVersion = cmDeviceInfoVersion1,   cmCurrentProfileInfoVersion = cmDeviceProfileInfoVersion1 };
     enum {    cmDefaultDeviceID = 0,   cmDefaultProfileID = 0 };
     enum {    cmDeviceStateDefault = 0x00000000,   cmDeviceStateOffline = 0x00000001,   cmDeviceStateBusy = 0x00000002,   cmDeviceStateForceNotify = (int)0x80000000,   cmDeviceStateDeviceRsvdBits = 0x00FF0000,   cmDeviceStateAppleRsvdBits = (int)0xFF00FFFF };
     enum {    cmIterateFactoryDeviceProfiles = 0x00000001,   cmIterateCustomDeviceProfiles = 0x00000002,   cmIterateCurrentDeviceProfiles = 0x00000003,   cmIterateAllDeviceProfiles = 0x00000004,   cmIterateDeviceProfilesMask = 0x0000000F };
     enum {    cmDeviceDBNotFoundErr = -4227,   cmDeviceAlreadyRegistered = -4228,   cmDeviceNotRegistered = -4229,   cmDeviceProfilesNotFound = -4230,   cmInternalCFErr = -4231,   cmPrefsSynchError = -4232 };
     typedef UInt32 CMDeviceState __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef UInt32 CMDeviceID __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef UInt32 CMDeviceProfileID __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     enum {    cmScannerDeviceClass = 'scnr',   cmCameraDeviceClass = 'cmra',   cmDisplayDeviceClass = 'mntr',   cmPrinterDeviceClass = 'prtr',   cmProofDeviceClass = 'pruf' };
     typedef OSType CMDeviceClass;
     typedef struct CMDeviceScope {    CFStringRef deviceUser;    CFStringRef deviceHost;  }
     CMDeviceScope, CMDeviceProfileScope __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMDeviceInfo {    UInt32 dataVersion;    CMDeviceClass deviceClass;    CMDeviceID deviceID;    CMDeviceScope deviceScope;    CMDeviceState deviceState;    CMDeviceProfileID defaultProfileID;    CFDictionaryRef * deviceName;    UInt32 profileCount;    UInt32 reserved;  }
     CMDeviceInfo, *CMDeviceInfoPtr __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMDeviceProfileInfo {    UInt32 dataVersion;    CMDeviceProfileID profileID;    CMProfileLocation profileLoc;    CFDictionaryRef profileName;    UInt32 reserved;  }
     CMDeviceProfileInfo __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct NCMDeviceProfileInfo {    UInt32 dataVersion;    CMDeviceProfileID profileID;    CMProfileLocation profileLoc;    CFDictionaryRef profileName;    CMDeviceProfileScope profileScope;    UInt32 reserved;  }
     NCMDeviceProfileInfo __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct CMDeviceProfileArray {    UInt32 profileCount;    CMDeviceProfileInfo profiles[1];  }
     CMDeviceProfileArray, *CMDeviceProfileArrayPtr __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef OSErr ( * CMIterateDeviceInfoProcPtr)(const CMDeviceInfo *deviceInfo, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef OSErr ( * CMIterateDeviceProfileProcPtr)(const CMDeviceInfo *deviceInfo, const NCMDeviceProfileInfo *profileInfo, void *refCon) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef struct OpaqueGrafPtr* GrafPtr;
     typedef GrafPtr CGrafPtr;
     typedef CGrafPtr GWorldPtr;
     typedef short QDErr;
     typedef unsigned long GWorldFlags;
     enum {    srcCopy = 0 };
     struct BitMap {    Ptr baseAddr;    short rowBytes;    Rect bounds;  };
     typedef struct BitMap BitMap;
     typedef BitMap * BitMapPtr;
     typedef BitMapPtr * BitMapHandle;
     struct RGBColor {    unsigned short red;    unsigned short green;    unsigned short blue;  };
     typedef struct RGBColor RGBColor;
     struct ColorSpec {    short value;    RGBColor rgb;  };
     typedef struct ColorSpec ColorSpec;
     typedef ColorSpec * ColorSpecPtr;
     typedef ColorSpec CSpecArray[1];
     struct ColorTable {    SInt32 ctSeed;    short ctFlags;    short ctSize;    CSpecArray ctTable;  };
     typedef struct ColorTable ColorTable;
     typedef ColorTable * CTabPtr;
     typedef CTabPtr * CTabHandle;
     struct PixMap {    Ptr baseAddr;    short rowBytes;    Rect bounds;    short pmVersion;    short packType;    SInt32 packSize;    Fixed hRes;    Fixed vRes;    short pixelType;    short pixelSize;    short cmpCount;    short cmpSize;    OSType pixelFormat;    CTabHandle pmTable;    void * pmExt;  };
     typedef struct PixMap PixMap;
     typedef PixMap * PixMapPtr;
     typedef PixMapPtr * PixMapHandle;
     enum {    k1MonochromePixelFormat = 0x00000001,   k2IndexedPixelFormat = 0x00000002,   k4IndexedPixelFormat = 0x00000004,   k8IndexedPixelFormat = 0x00000008,   k16BE555PixelFormat = 0x00000010,   k24RGBPixelFormat = 0x00000018,   k32ARGBPixelFormat = 0x00000020,   k1IndexedGrayPixelFormat = 0x00000021,   k2IndexedGrayPixelFormat = 0x00000022,   k4IndexedGrayPixelFormat = 0x00000024,   k8IndexedGrayPixelFormat = 0x00000028,   k16LE555PixelFormat = 'L555',   k16LE5551PixelFormat = '5551',   k16BE565PixelFormat = 'B565',   k16LE565PixelFormat = 'L565',   k24BGRPixelFormat = '24BG',   k32BGRAPixelFormat = 'BGRA',   k32ABGRPixelFormat = 'ABGR',   k32RGBAPixelFormat = 'RGBA',   kYUVSPixelFormat = 'yuvs',   kYUVUPixelFormat = 'yuvu',   kYVU9PixelFormat = 'YVU9',   kYUV411PixelFormat = 'Y411',   kYVYU422PixelFormat = 'YVYU',   kUYVY422PixelFormat = 'UYVY',   kYUV211PixelFormat = 'Y211',   k2vuyPixelFormat = '2vuy' };
     struct Pattern {    UInt8 pat[8];  };
     typedef struct Pattern Pattern;
     typedef Pattern * PatPtr;
     typedef PatPtr * PatHandle;
     struct PixPat {    short patType;    PixMapHandle patMap;    Handle patData;    Handle patXData;    short patXValid;    Handle patXMap;    Pattern pat1Data;  };
     typedef struct PixPat PixPat;
     typedef PixPat * PixPatPtr;
     typedef PixPatPtr * PixPatHandle;
     typedef struct OpaqueRgnHandle* RgnHandle;
     typedef struct GDevice GDevice;
     typedef GDevice * GDPtr;
     typedef GDPtr * GDHandle;
     struct GDevice {    short gdRefNum;    short gdID;    short gdType;    Handle gdITable;    short gdResPref;    Handle gdSearchProc;    Handle gdCompProc;    short gdFlags;    PixMapHandle gdPMap;    SInt32 gdRefCon;    GDHandle gdNextGD;    Rect gdRect;    SInt32 gdMode;    short gdCCBytes;    short gdCCDepth;    Handle gdCCXData;    Handle gdCCXMask;    Handle gdExt;  };
     struct Picture {    short picSize;    Rect picFrame;  };
     typedef struct Picture Picture;
     typedef Picture * PicPtr;
     typedef PicPtr * PicHandle;
     struct OpenCPicParams {    Rect srcRect;    Fixed hRes;    Fixed vRes;    short version;    short reserved1;    SInt32 reserved2;  };
     typedef struct OpenCPicParams OpenCPicParams;
     struct FontInfo {    short ascent;    short descent;    short widMax;    short leading;  };
     typedef struct FontInfo FontInfo;
     typedef SInt32 QDRegionParseDirection;
     typedef OSStatus ( * RegionToRectsProcPtr)(UInt16 message, RgnHandle rgn, const Rect *rect, void *refCon);
     typedef RegionToRectsProcPtr RegionToRectsUPP;
     typedef short TruncCode;
     typedef UInt16 DragConstraint;
     enum {    kNoConstraint = 0,   kVerticalConstraint = 1,   kHorizontalConstraint = 2 };
     typedef void ( * DragGrayRgnProcPtr)(void);
     typedef Boolean ( * ColorSearchProcPtr)(RGBColor *rgb, long *position);
     typedef Boolean ( * ColorComplementProcPtr)(RGBColor * rgb);
     typedef DragGrayRgnProcPtr DragGrayRgnUPP;
     typedef ColorSearchProcPtr ColorSearchUPP;
     typedef ColorComplementProcPtr ColorComplementUPP;
     typedef struct OpaqueWindowPtr* WindowPtr;
     typedef struct OpaqueDialogPtr* DialogPtr;
     typedef WindowPtr WindowRef;
     struct VDGammaRecord {    Ptr csGTable;  };
     typedef struct VDGammaRecord VDGammaRecord;
     typedef VDGammaRecord * VDGamRecPtr;
     struct MacPolygon {    short polySize;    Rect polyBBox;    Point polyPoints[1];  };
     typedef struct MacPolygon MacPolygon;
     typedef MacPolygon Polygon;
     typedef MacPolygon * PolyPtr;
     typedef PolyPtr * PolyHandle;
     typedef SInt8 GrafVerb;
     typedef SInt32 PrinterStatusOpcode;
     typedef void ( * QDTextProcPtr)(short byteCount, const void *textBuf, Point numer, Point denom);
     typedef void ( * QDLineProcPtr)(Point newPt);
     typedef void ( * QDRectProcPtr)(GrafVerb verb, const Rect *r);
     typedef void ( * QDRRectProcPtr)(GrafVerb verb, const Rect *r, short ovalWidth, short ovalHeight);
     typedef void ( * QDOvalProcPtr)(GrafVerb verb, const Rect *r);
     typedef void ( * QDArcProcPtr)(GrafVerb verb, const Rect *r, short startAngle, short arcAngle);
     typedef void ( * QDPolyProcPtr)(GrafVerb verb, PolyHandle poly);
     typedef void ( * QDRgnProcPtr)(GrafVerb verb, RgnHandle rgn);
     typedef void ( * QDBitsProcPtr)(const BitMap *srcBits, const Rect *srcRect, const Rect *dstRect, short mode, RgnHandle maskRgn);
     typedef void ( * QDCommentProcPtr)(short kind, short dataSize, Handle dataHandle);
     typedef short ( * QDTxMeasProcPtr)(short byteCount, const void *textAddr, Point *numer, Point *denom, FontInfo *info);
     typedef void ( * QDGetPicProcPtr)(void *dataPtr, short byteCount);
     typedef void ( * QDPutPicProcPtr)(const void *dataPtr, short byteCount);
     typedef void ( * QDOpcodeProcPtr)(const Rect *fromRect, const Rect *toRect, UInt16 opcode, SInt16 version);
     typedef OSStatus ( * QDStdGlyphsProcPtr)(void *dataStream, ByteCount size);
     typedef void ( * QDJShieldCursorProcPtr)(short left, short top, short right, short bottom);
     typedef OSStatus ( * QDPrinterStatusProcPtr)(PrinterStatusOpcode opcode, CGrafPtr currentPort, void *printerStatus);
     typedef QDTextProcPtr QDTextUPP;
     typedef QDLineProcPtr QDLineUPP;
     typedef QDRectProcPtr QDRectUPP;
     typedef QDRRectProcPtr QDRRectUPP;
     typedef QDOvalProcPtr QDOvalUPP;
     typedef QDArcProcPtr QDArcUPP;
     typedef QDPolyProcPtr QDPolyUPP;
     typedef QDRgnProcPtr QDRgnUPP;
     typedef QDBitsProcPtr QDBitsUPP;
     typedef QDCommentProcPtr QDCommentUPP;
     typedef QDTxMeasProcPtr QDTxMeasUPP;
     typedef QDGetPicProcPtr QDGetPicUPP;
     typedef QDPutPicProcPtr QDPutPicUPP;
     typedef QDOpcodeProcPtr QDOpcodeUPP;
     typedef QDStdGlyphsProcPtr QDStdGlyphsUPP;
     typedef QDJShieldCursorProcPtr QDJShieldCursorUPP;
     typedef QDPrinterStatusProcPtr QDPrinterStatusUPP;
     struct CQDProcs {    QDTextUPP textProc;    QDLineUPP lineProc;    QDRectUPP rectProc;    QDRRectUPP rRectProc;    QDOvalUPP ovalProc;    QDArcUPP arcProc;    QDPolyUPP polyProc;    QDRgnUPP rgnProc;    QDBitsUPP bitsProc;    QDCommentUPP commentProc;    QDTxMeasUPP txMeasProc;    QDGetPicUPP getPicProc;    QDPutPicUPP putPicProc;    QDOpcodeUPP opcodeProc;    UniversalProcPtr newProc1;    QDStdGlyphsUPP glyphsProc;    QDPrinterStatusUPP printerStatusProc;    UniversalProcPtr newProc4;    UniversalProcPtr newProc5;    UniversalProcPtr newProc6;  };
     typedef struct CQDProcs CQDProcs;
     typedef UInt32 ATSUDirectDataSelector;
     enum {    kATSUDirectDataAdvanceDeltaFixedArray = 0,   kATSUDirectDataBaselineDeltaFixedArray = 1,   kATSUDirectDataDeviceDeltaSInt16Array = 2,   kATSUDirectDataStyleIndexUInt16Array = 3,   kATSUDirectDataStyleSettingATSUStyleSettingRefArray = 4,   kATSUDirectDataLayoutRecordATSLayoutRecordVersion1 = 100,   kATSUDirectDataLayoutRecordATSLayoutRecordCurrent = kATSUDirectDataLayoutRecordATSLayoutRecordVersion1 };
     typedef struct LLCStyleInfo* ATSUStyleSettingRef;
     enum {    kTextToSpeechSynthType = 'ttsc',   kTextToSpeechVoiceType = 'ttvd',   kTextToSpeechVoiceFileType = 'ttvf',   kTextToSpeechVoiceBundleType = 'ttvb' };
     enum {    kNoEndingProsody = 1,   kNoSpeechInterrupt = 2,   kPreflightThenPause = 4 };
     enum {    kImmediate = 0,   kEndOfWord = 1,   kEndOfSentence = 2 };
     enum {    soStatus = 'stat',   soErrors = 'erro',   soInputMode = 'inpt',   soCharacterMode = 'char',   soNumberMode = 'nmbr',   soRate = 'rate',   soPitchBase = 'pbas',   soPitchMod = 'pmod',   soVolume = 'volm',   soSynthType = 'vers',   soRecentSync = 'sync',   soPhonemeSymbols = 'phsy',   soCurrentVoice = 'cvox',   soCommandDelimiter = 'dlim',   soReset = 'rset',   soCurrentA5 = 'myA5',   soRefCon = 'refc',   soTextDoneCallBack = 'tdcb',   soSpeechDoneCallBack = 'sdcb',   soSyncCallBack = 'sycb',   soErrorCallBack = 'ercb',   soPhonemeCallBack = 'phcb',   soWordCallBack = 'wdcb',   soSynthExtension = 'xtnd',   soSoundOutput = 'sndo',   soOutputToFileWithCFURL = 'opaf',   soOutputToExtAudioFile = 'opax',   soOutputToAudioDevice = 'opad',   soPhonemeOptions = 'popt' };
     enum {    modeText = 'TEXT',   modePhonemes = 'PHON',   modeTune = 'TUNE',   modeNormal = 'NORM',   modeLiteral = 'LTRL' };
     enum {    soVoiceDescription = 'info',   soVoiceFile = 'fref' };
     enum {    kSpeechGenerateTune = 1,   kSpeechRelativePitch = 2,   kSpeechRelativeDuration = 4,   kSpeechShowSyllables = 8 };
     enum {    kAudioUnitSubType_SpeechSynthesis = 'ttsp',   kAudioUnitProperty_Voice = 3330,   kAudioUnitProperty_SpeechChannel = 3331 };
     struct SpeechChannelRecord {    long data[1];  };
     typedef struct SpeechChannelRecord SpeechChannelRecord;
     typedef SpeechChannelRecord * SpeechChannel;
     struct VoiceSpec {    OSType creator;    OSType id;  };
     typedef struct VoiceSpec VoiceSpec;
     typedef VoiceSpec * VoiceSpecPtr;
     enum {    kNeuter = 0,   kMale = 1,   kFemale = 2 };
     struct VoiceDescription {    SInt32 length;    VoiceSpec voice;    SInt32 version;    Str63 name;    Str255 comment;    SInt16 gender;    SInt16 age;    SInt16 script;    SInt16 language;    SInt16 region;    SInt32 reserved[4];  };
     typedef struct VoiceDescription VoiceDescription;
     struct VoiceFileInfo {    FSSpec fileSpec;    SInt16 resID;  };
     extern OSErr MakeVoiceSpec(   OSType creator,   OSType id,   VoiceSpec * voice) ;
     extern OSErr CountVoices(SInt16 * numVoices) ;
     extern OSErr GetIndVoice(   SInt16 index,   VoiceSpec * voice) ;
     extern OSErr GetVoiceDescription(   const VoiceSpec * _Nullable voice,   VoiceDescription * _Nullable info,   long infoLength) ;
     extern OSErr GetVoiceInfo(   const VoiceSpec * _Nullable voice,   OSType selector,   void * voiceInfo) ;
     extern OSErr NewSpeechChannel(   VoiceSpec * _Nullable voice,   SpeechChannel _Nullable * _Nonnull chan) ;
     extern OSErr DisposeSpeechChannel(SpeechChannel chan) ;
     extern OSErr SpeakString(ConstStr255Param textToBeSpoken) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr SpeakText(   SpeechChannel chan,   const void * textBuf,   unsigned long textBytes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr SpeakBuffer(   SpeechChannel chan,   const void * textBuf,   unsigned long textBytes,   SInt32 controlFlags) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr StopSpeech(SpeechChannel chan) ;
     extern OSErr StopSpeechAt(   SpeechChannel chan,   SInt32 whereToStop) ;
     extern OSErr PauseSpeechAt(   SpeechChannel chan,   SInt32 whereToPause) ;
     extern OSErr ContinueSpeech(SpeechChannel chan) ;
     extern SInt16 SpeechBusy(void) ;
     extern SInt16 SpeechBusySystemWide(void) ;
     extern OSErr SetSpeechRate(   SpeechChannel chan,   Fixed rate) ;
     extern OSErr GetSpeechRate(   SpeechChannel chan,   Fixed * rate) ;
     extern OSErr SetSpeechPitch(   SpeechChannel chan,   Fixed pitch) ;
     extern OSErr GetSpeechPitch(   SpeechChannel chan,   Fixed * pitch) ;
     extern OSErr SetSpeechInfo(   SpeechChannel chan,   OSType selector,   const void * _Nullable speechInfo) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr GetSpeechInfo(   SpeechChannel chan,   OSType selector,   void * speechInfo) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr TextToPhonemes(   SpeechChannel chan,   const void * textBuf,   unsigned long textBytes,   Handle _Nonnull phonemeBuf,   long * phonemeBytes) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr UseDictionary(   SpeechChannel chan,   Handle _Nonnull dictionary) __attribute__((availability(macosx,introduced=10.0,deprecated=10.8)));
     extern OSErr SpeakCFString(   SpeechChannel chan,   CFStringRef aString,   CFDictionaryRef _Nullable options) __attribute__((availability(macosx,introduced=10.5)));
     extern OSErr UseSpeechDictionary(   SpeechChannel chan,   CFDictionaryRef speechDictionary) __attribute__((availability(macosx,introduced=10.5)));
     extern OSErr CopyPhonemesFromText(   SpeechChannel chan,   CFStringRef text,   CFStringRef _Nullable * _Nonnull __attribute__((cf_returns_retained)) phonemes) __attribute__((availability(macosx,introduced=10.5)));
     extern OSErr CopySpeechProperty(   SpeechChannel chan,   CFStringRef property,   CFTypeRef _Nullable * _Nonnull __attribute__((cf_returns_retained)) object) __attribute__((availability(macosx,introduced=10.5)));
     extern OSErr SetSpeechProperty(   SpeechChannel chan,   CFStringRef property,   CFTypeRef _Nullable object) __attribute__((availability(macosx,introduced=10.5)));
     extern OSErr SpeechSynthesisRegisterModuleURL(CFURLRef url) __attribute__((availability(macosx,introduced=10.6)));
     extern OSErr SpeechSynthesisUnregisterModuleURL(CFURLRef url) __attribute__((availability(macosx,introduced=10.6)));
     typedef CGPoint HIPoint;
     typedef CGSize HISize;
     typedef CGRect HIRect;
     typedef UInt32 HICoordinateSpace;
     enum {    kHICoordSpace72DPIGlobal = 1,   kHICoordSpaceScreenPixel = 2,   kHICoordSpaceWindow = 3,   kHICoordSpaceView = 4 };
     extern void HIPointConvert(   HIPoint * ioPoint,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
     extern void HIRectConvert(   HIRect * ioRect,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
     extern void HISizeConvert(   HISize * ioSize,   HICoordinateSpace inSourceSpace,   void * inSourceObject,   HICoordinateSpace inDestinationSpace,   void * inDestinationObject) __attribute__((availability(macosx,introduced=10.4)));
     typedef struct OpaqueEventRef* EventRef;
     enum {    eventAlreadyPostedErr = -9860,   eventTargetBusyErr = -9861,   eventClassInvalidErr = -9862,   eventClassIncorrectErr = -9864,   eventDeferAccessibilityEventErr = -9865,   eventHandlerAlreadyInstalledErr = -9866,   eventInternalErr = -9868,   eventKindIncorrectErr = -9869,   eventParameterNotFoundErr = -9870,   eventNotHandledErr = -9874,   eventLoopTimedOutErr = -9875,   eventLoopQuitErr = -9876,   eventNotInQueueErr = -9877,   eventHotKeyExistsErr = -9878,   eventHotKeyInvalidErr = -9879,   eventPassToNextTargetErr = -9880 };
     enum {    kEventParamDirectObject = '----',   kEventParamDragRef = 'drag' };
     enum {    typeDragRef = 'drag',   typeCTFontRef = 'ctfr',   typeCTGlyphInfoRef = 'ctgi' };
     typedef SInt16 EventPriority;
     enum {    kEventPriorityLow = 0,   kEventPriorityStandard = 1,   kEventPriorityHigh = 2 };
     enum {    kEventLeaveInQueue = 0,   kEventRemoveFromQueue = 1 };
     typedef double EventTime;
     typedef EventTime EventTimeout;
     typedef EventTime EventTimerInterval;
     struct EventTypeSpec {    OSType eventClass;    UInt32 eventKind;  };
     typedef struct EventTypeSpec EventTypeSpec;
     typedef OSType EventParamName;
     typedef OSType EventParamType;
     typedef struct OpaqueEventLoopRef* EventLoopRef;
     extern EventLoopRef GetCurrentEventLoop(void) ;
     extern EventLoopRef GetMainEventLoop(void) ;
     extern OSStatus RunCurrentEventLoop(EventTimeout inTimeout) ;
     extern OSStatus QuitEventLoop(EventLoopRef inEventLoop) ;
     extern CFTypeRef GetCFRunLoopFromEventLoop(EventLoopRef inEventLoop) __attribute__((availability(macosx,introduced=10.1)));
     extern OSStatus ReceiveNextEvent(   ItemCount inNumTypes,   const EventTypeSpec * inList,   EventTimeout inTimeout,   Boolean inPullEvent,   EventRef * outEvent) ;
     typedef UInt32 EventAttributes;
     enum {    kEventAttributeNone = 0,   kEventAttributeUserEvent = 1 << 0,   kEventAttributeMonitored = 1 << 3 };
     extern OSStatus CreateEvent(   CFAllocatorRef inAllocator,   OSType inClassID,   UInt32 inKind,   EventTime inWhen,   EventAttributes inAttributes,   EventRef * outEvent) ;
     extern EventRef CopyEvent(EventRef inOther) ;
     extern EventRef CopyEventAs(   CFAllocatorRef inAllocator,   EventRef inOther,   OSType inEventClass,   UInt32 inEventKind) __attribute__((availability(macosx,introduced=10.3)));
     extern EventRef RetainEvent(EventRef inEvent) ;
     extern ItemCount GetEventRetainCount(EventRef inEvent) ;
     extern void ReleaseEvent(EventRef inEvent) ;
     extern OSStatus SetEventParameter(   EventRef inEvent,   EventParamName inName,   EventParamType inType,   ByteCount inSize,   const void * inDataPtr) ;
     extern OSStatus GetEventParameter(   EventRef inEvent,   EventParamName inName,   EventParamType inDesiredType,   EventParamType * outActualType,   ByteCount inBufferSize,   ByteCount * outActualSize,   void * outData) ;
     extern OSStatus RemoveEventParameter(   EventRef inEvent,   EventParamName inName) __attribute__((availability(macosx,introduced=10.5)));
     extern OSType GetEventClass(EventRef inEvent) ;
     extern UInt32 GetEventKind(EventRef inEvent) ;
     extern EventTime GetEventTime(EventRef inEvent) ;
     extern OSStatus SetEventTime(   EventRef inEvent,   EventTime inTime) ;
     extern OSStatus CreateEventWithCGEvent(   CFAllocatorRef inAllocator,   CGEventRef inEvent,   EventAttributes inAttributes,   EventRef * outEvent) __attribute__((availability(macosx,introduced=10.5)));
     extern CGEventRef CopyEventCGEvent(EventRef inEvent) __attribute__((availability(macosx,introduced=10.5)));
     typedef struct OpaqueEventQueueRef* EventQueueRef;
     extern EventQueueRef GetCurrentEventQueue(void) ;
     extern EventQueueRef GetMainEventQueue(void) ;
     typedef Boolean ( * EventComparatorProcPtr)(EventRef inEvent, void *inCompareData);
     typedef EventComparatorProcPtr EventComparatorUPP;
     extern EventComparatorUPP NewEventComparatorUPP(EventComparatorProcPtr userRoutine) ;
     extern void DisposeEventComparatorUPP(EventComparatorUPP userUPP) ;
     extern Boolean InvokeEventComparatorUPP(   EventRef inEvent,   void * inCompareData,   EventComparatorUPP userUPP) ;
     extern OSStatus PostEventToQueue(   EventQueueRef inQueue,   EventRef inEvent,   EventPriority inPriority) ;
     extern OSStatus FlushEventsMatchingListFromQueue(   EventQueueRef inQueue,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
     extern OSStatus FlushSpecificEventsFromQueue(   EventQueueRef inQueue,   EventComparatorUPP inComparator,   void * inCompareData) ;
     extern OSStatus FlushEventQueue(EventQueueRef inQueue) ;
     extern EventRef FindSpecificEventInQueue(   EventQueueRef inQueue,   EventComparatorUPP inComparator,   void * inCompareData) ;
     extern ItemCount GetNumEventsInQueue(EventQueueRef inQueue) ;
     extern OSStatus RemoveEventFromQueue(   EventQueueRef inQueue,   EventRef inEvent) ;
     extern Boolean IsEventInQueue(   EventQueueRef inQueue,   EventRef inEvent) ;
     enum {    kEventQueueOptionsNone = 0 };
     extern EventRef AcquireFirstMatchingEventInQueue(   EventQueueRef inQueue,   ItemCount inNumTypes,   const EventTypeSpec * inList,   OptionBits inOptions) __attribute__((availability(macosx,introduced=10.3)));
     extern EventRef GetCurrentEvent(void) __attribute__((availability(macosx,introduced=10.2)));
     extern UInt32 GetCurrentEventButtonState(void) __attribute__((availability(macosx,introduced=10.2)));
     extern UInt32 GetCurrentEventKeyModifiers(void) __attribute__((availability(macosx,introduced=10.2)));
     extern HIPoint * HIGetMousePosition(   HICoordinateSpace inSpace,   void * inObject,   HIPoint * outPoint) __attribute__((availability(macosx,introduced=10.5)));
     extern UInt32 GetCurrentButtonState(void) __attribute__((availability(macosx,introduced=10.2)));
     extern UInt32 GetCurrentKeyModifiers(void) ;
     extern EventTime GetCurrentEventTime(void) ;
     typedef struct __EventLoopTimer* EventLoopTimerRef;
     typedef void ( * EventLoopTimerProcPtr)(EventLoopTimerRef inTimer, void *inUserData);
     enum {    kEventLoopIdleTimerStarted = 1,   kEventLoopIdleTimerIdling = 2,   kEventLoopIdleTimerStopped = 3 };
     typedef UInt16 EventLoopIdleTimerMessage;
     typedef void ( * EventLoopIdleTimerProcPtr)(EventLoopTimerRef inTimer, EventLoopIdleTimerMessage inState, void *inUserData);
     typedef EventLoopTimerProcPtr EventLoopTimerUPP;
     typedef EventLoopIdleTimerProcPtr EventLoopIdleTimerUPP;
     extern EventLoopTimerUPP NewEventLoopTimerUPP(EventLoopTimerProcPtr userRoutine) ;
     extern EventLoopIdleTimerUPP NewEventLoopIdleTimerUPP(EventLoopIdleTimerProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.2)));
     extern void DisposeEventLoopTimerUPP(EventLoopTimerUPP userUPP) ;
     extern void DisposeEventLoopIdleTimerUPP(EventLoopIdleTimerUPP userUPP) __attribute__((availability(macosx,introduced=10.2)));
     extern void InvokeEventLoopTimerUPP(   EventLoopTimerRef inTimer,   void * inUserData,   EventLoopTimerUPP userUPP) ;
     extern void InvokeEventLoopIdleTimerUPP(   EventLoopTimerRef inTimer,   EventLoopIdleTimerMessage inState,   void * inUserData,   EventLoopIdleTimerUPP userUPP) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus InstallEventLoopTimer(   EventLoopRef inEventLoop,   EventTimerInterval inFireDelay,   EventTimerInterval inInterval,   EventLoopTimerUPP inTimerProc,   void * inTimerData,   EventLoopTimerRef * outTimer) ;
     extern OSStatus RemoveEventLoopTimer(EventLoopTimerRef inTimer) ;
     extern OSStatus SetEventLoopTimerNextFireTime(   EventLoopTimerRef inTimer,   EventTimerInterval inNextFire) ;
     typedef struct OpaqueEventHandlerRef* EventHandlerRef;
     typedef struct OpaqueEventHandlerCallRef* EventHandlerCallRef;
     typedef OSStatus ( * EventHandlerProcPtr)(EventHandlerCallRef inHandlerCallRef, EventRef inEvent, void *inUserData);
     typedef EventHandlerProcPtr EventHandlerUPP;
     extern EventHandlerUPP NewEventHandlerUPP(EventHandlerProcPtr userRoutine) ;
     extern void DisposeEventHandlerUPP(EventHandlerUPP userUPP) ;
     extern OSStatus InvokeEventHandlerUPP(   EventHandlerCallRef inHandlerCallRef,   EventRef inEvent,   void * inUserData,   EventHandlerUPP userUPP) ;
     typedef struct OpaqueEventTargetRef* EventTargetRef;
     extern OSStatus InstallEventHandler(   EventTargetRef inTarget,   EventHandlerUPP inHandler,   ItemCount inNumTypes,   const EventTypeSpec * inList,   void * inUserData,   EventHandlerRef * outRef) ;
     extern OSStatus RemoveEventHandler(EventHandlerRef inHandlerRef) ;
     extern OSStatus AddEventTypesToHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
     extern OSStatus RemoveEventTypesFromHandler(   EventHandlerRef inHandlerRef,   ItemCount inNumTypes,   const EventTypeSpec * inList) ;
     extern OSStatus CallNextEventHandler(   EventHandlerCallRef inCallRef,   EventRef inEvent) ;
     enum {    kEventTargetDontPropagate = (1 << 0),   kEventTargetSendToAllHandlers = (1 << 1) };
     extern OSStatus SendEventToEventTarget(   EventRef inEvent,   EventTargetRef inTarget) ;
     extern OSStatus SendEventToEventTargetWithOptions(   EventRef inEvent,   EventTargetRef inTarget,   OptionBits inOptions) __attribute__((availability(macosx,introduced=10.2)));
     extern OSStatus EnableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
     extern OSStatus DisableSecureEventInput(void) __attribute__((availability(macosx,introduced=10.3)));
     extern Boolean IsSecureEventInputEnabled(void) __attribute__((availability(macosx,introduced=10.3)));
     typedef UInt16 EventKind;
     typedef UInt16 EventMask;
     enum {    nullEvent = 0,   mouseDown = 1,   mouseUp = 2,   keyDown = 3,   keyUp = 4,   autoKey = 5,   updateEvt = 6,   diskEvt = 7,   activateEvt = 8,   osEvt = 15,   kHighLevelEvent = 23 };
     enum {    mDownMask = 1 << mouseDown,   mUpMask = 1 << mouseUp,   keyDownMask = 1 << keyDown,   keyUpMask = 1 << keyUp,   autoKeyMask = 1 << autoKey,   updateMask = 1 << updateEvt,   diskMask = 1 << diskEvt,   activMask = 1 << activateEvt,   highLevelEventMask = 0x0400,   osMask = 1 << osEvt,   everyEvent = 0xFFFF };
     enum {    charCodeMask = 0x000000FF,   keyCodeMask = 0x0000FF00,   adbAddrMask = 0x00FF0000,   osEvtMessageMask = (UInt32)0xFF000000 };
     enum {    mouseMovedMessage = 0x00FA,   suspendResumeMessage = 0x0001 };
     enum {    resumeFlag = 1 };
     typedef UInt16 EventModifiers;
     enum {    activeFlagBit = 0,   btnStateBit = 7,   cmdKeyBit = 8,   shiftKeyBit = 9,   alphaLockBit = 10,   optionKeyBit = 11,   controlKeyBit = 12,   rightShiftKeyBit = 13,   rightOptionKeyBit = 14,   rightControlKeyBit = 15 };
     enum {    activeFlag = 1 << activeFlagBit,   btnState = 1 << btnStateBit,   cmdKey = 1 << cmdKeyBit,   shiftKey = 1 << shiftKeyBit,   alphaLock = 1 << alphaLockBit,   optionKey = 1 << optionKeyBit,   controlKey = 1 << controlKeyBit,   rightShiftKey = 1 << rightShiftKeyBit,   rightOptionKey = 1 << rightOptionKeyBit,   rightControlKey = 1 << rightControlKeyBit };
     enum {    kNullCharCode = 0,   kHomeCharCode = 1,   kEnterCharCode = 3,   kEndCharCode = 4,   kHelpCharCode = 5,   kBellCharCode = 7,   kBackspaceCharCode = 8,   kTabCharCode = 9,   kLineFeedCharCode = 10,   kVerticalTabCharCode = 11,   kPageUpCharCode = 11,   kFormFeedCharCode = 12,   kPageDownCharCode = 12,   kReturnCharCode = 13,   kFunctionKeyCharCode = 16,   kCommandCharCode = 17,   kCheckCharCode = 18,   kDiamondCharCode = 19,   kAppleLogoCharCode = 20,   kEscapeCharCode = 27,   kClearCharCode = 27,   kLeftArrowCharCode = 28,   kRightArrowCharCode = 29,   kUpArrowCharCode = 30,   kDownArrowCharCode = 31,   kSpaceCharCode = 32,   kDeleteCharCode = 127,   kBulletCharCode = 165,   kNonBreakingSpaceCharCode = 202 };
     enum {    kShiftUnicode = 0x21E7,   kControlUnicode = 0x2303,   kOptionUnicode = 0x2325,   kCommandUnicode = 0x2318,   kPencilUnicode = 0x270E,   kPencilLeftUnicode = 0xF802,   kCheckUnicode = 0x2713,   kDiamondUnicode = 0x25C6,   kBulletUnicode = 0x2022,   kAppleLogoUnicode = 0xF8FF };
     enum {    kVK_ANSI_A = 0x00,   kVK_ANSI_S = 0x01,   kVK_ANSI_D = 0x02,   kVK_ANSI_F = 0x03,   kVK_ANSI_H = 0x04,   kVK_ANSI_G = 0x05,   kVK_ANSI_Z = 0x06,   kVK_ANSI_X = 0x07,   kVK_ANSI_C = 0x08,   kVK_ANSI_V = 0x09,   kVK_ANSI_B = 0x0B,   kVK_ANSI_Q = 0x0C,   kVK_ANSI_W = 0x0D,   kVK_ANSI_E = 0x0E,   kVK_ANSI_R = 0x0F,   kVK_ANSI_Y = 0x10,   kVK_ANSI_T = 0x11,   kVK_ANSI_1 = 0x12,   kVK_ANSI_2 = 0x13,   kVK_ANSI_3 = 0x14,   kVK_ANSI_4 = 0x15,   kVK_ANSI_6 = 0x16,   kVK_ANSI_5 = 0x17,   kVK_ANSI_Equal = 0x18,   kVK_ANSI_9 = 0x19,   kVK_ANSI_7 = 0x1A,   kVK_ANSI_Minus = 0x1B,   kVK_ANSI_8 = 0x1C,   kVK_ANSI_0 = 0x1D,   kVK_ANSI_RightBracket = 0x1E,   kVK_ANSI_O = 0x1F,   kVK_ANSI_U = 0x20,   kVK_ANSI_LeftBracket = 0x21,   kVK_ANSI_I = 0x22,   kVK_ANSI_P = 0x23,   kVK_ANSI_L = 0x25,   kVK_ANSI_J = 0x26,   kVK_ANSI_Quote = 0x27,   kVK_ANSI_K = 0x28,   kVK_ANSI_Semicolon = 0x29,   kVK_ANSI_Backslash = 0x2A,   kVK_ANSI_Comma = 0x2B,   kVK_ANSI_Slash = 0x2C,   kVK_ANSI_N = 0x2D,   kVK_ANSI_M = 0x2E,   kVK_ANSI_Period = 0x2F,   kVK_ANSI_Grave = 0x32,   kVK_ANSI_KeypadDecimal = 0x41,   kVK_ANSI_KeypadMultiply = 0x43,   kVK_ANSI_KeypadPlus = 0x45,   kVK_ANSI_KeypadClear = 0x47,   kVK_ANSI_KeypadDivide = 0x4B,   kVK_ANSI_KeypadEnter = 0x4C,   kVK_ANSI_KeypadMinus = 0x4E,   kVK_ANSI_KeypadEquals = 0x51,   kVK_ANSI_Keypad0 = 0x52,   kVK_ANSI_Keypad1 = 0x53,   kVK_ANSI_Keypad2 = 0x54,   kVK_ANSI_Keypad3 = 0x55,   kVK_ANSI_Keypad4 = 0x56,   kVK_ANSI_Keypad5 = 0x57,   kVK_ANSI_Keypad6 = 0x58,   kVK_ANSI_Keypad7 = 0x59,   kVK_ANSI_Keypad8 = 0x5B,   kVK_ANSI_Keypad9 = 0x5C };
     enum {    kVK_Return = 0x24,   kVK_Tab = 0x30,   kVK_Space = 0x31,   kVK_Delete = 0x33,   kVK_Escape = 0x35,   kVK_Command = 0x37,   kVK_Shift = 0x38,   kVK_CapsLock = 0x39,   kVK_Option = 0x3A,   kVK_Control = 0x3B,   kVK_RightCommand = 0x36,   kVK_RightShift = 0x3C,   kVK_RightOption = 0x3D,   kVK_RightControl = 0x3E,   kVK_Function = 0x3F,   kVK_F17 = 0x40,   kVK_VolumeUp = 0x48,   kVK_VolumeDown = 0x49,   kVK_Mute = 0x4A,   kVK_F18 = 0x4F,   kVK_F19 = 0x50,   kVK_F20 = 0x5A,   kVK_F5 = 0x60,   kVK_F6 = 0x61,   kVK_F7 = 0x62,   kVK_F3 = 0x63,   kVK_F8 = 0x64,   kVK_F9 = 0x65,   kVK_F11 = 0x67,   kVK_F13 = 0x69,   kVK_F16 = 0x6A,   kVK_F14 = 0x6B,   kVK_F10 = 0x6D,   kVK_F12 = 0x6F,   kVK_F15 = 0x71,   kVK_Help = 0x72,   kVK_Home = 0x73,   kVK_PageUp = 0x74,   kVK_ForwardDelete = 0x75,   kVK_F4 = 0x76,   kVK_End = 0x77,   kVK_F2 = 0x78,   kVK_PageDown = 0x79,   kVK_F1 = 0x7A,   kVK_LeftArrow = 0x7B,   kVK_RightArrow = 0x7C,   kVK_DownArrow = 0x7D,   kVK_UpArrow = 0x7E };
     enum {    kVK_ISO_Section = 0x0A };
     enum {    kVK_JIS_Yen = 0x5D,   kVK_JIS_Underscore = 0x5E,   kVK_JIS_KeypadComma = 0x5F,   kVK_JIS_Eisu = 0x66,   kVK_JIS_Kana = 0x68 };
     struct EventRecord {    EventKind what;    unsigned long message;    UInt32 when;    Point where;    EventModifiers modifiers;  };
     typedef struct EventRecord EventRecord;
     typedef void ( * FKEYProcPtr)(void);
     typedef FKEYProcPtr FKEYUPP;
     extern Boolean Button(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     typedef BigEndianUInt32 KeyMap[4];
     typedef UInt8 KeyMapByteArray[16];
     extern void GetKeys(KeyMap theKeys) ;
     enum {    networkEvt = 10,   driverEvt = 11,   app1Evt = 12,   app2Evt = 13,   app3Evt = 14,   app4Evt = 15,   networkMask = 0x0400,   driverMask = 0x0800,   app1Mask = 0x1000,   app2Mask = 0x2000,   app3Mask = 0x4000,   app4Mask = 0x8000 };
     struct EvQEl {    QElemPtr qLink;    SInt16 qType;    EventKind evtQWhat;    unsigned long evtQMessage;    UInt32 evtQWhen;    Point evtQWhere;    EventModifiers evtQModifiers;  };
     typedef struct EvQEl EvQEl;
     typedef EvQEl * EvQElPtr;
     typedef void ( * GetNextEventFilterProcPtr)(EventRecord *theEvent, Boolean *result);
     typedef GetNextEventFilterProcPtr GetNextEventFilterUPP;
     typedef GetNextEventFilterUPP GNEFilterUPP;
     extern void FlushEvents(   EventMask whichMask,   EventMask stopMask) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     extern Boolean IsCmdChar(   const EventRecord * event,   short test) __attribute__((availability(macosx,introduced=10.0,deprecated=10.6)));
     extern SInt16 LMGetKeyThresh(void) ;
     extern SInt16 LMGetKeyRepThresh(void) ;
     extern UInt8 LMGetKbdLast(void) ;
     extern UInt8 LMGetKbdType(void) ;
     enum {    kAppearanceEventClass = 'appr',   kAEAppearanceChanged = 'thme',   kAESystemFontChanged = 'sysf',   kAESmallSystemFontChanged = 'ssfn',   kAEViewsFontChanged = 'vfnt' };
     enum {    kThemeDataFileType = 'thme',   kThemePlatinumFileType = 'pltn',   kThemeCustomThemesFileType = 'scen',   kThemeSoundTrackFileType = 'tsnd' };
     typedef SInt16 AppearancePartCode;
     enum {    kAppearancePartMetaNone = 0,   kAppearancePartMetaDisabled = 254,   kAppearancePartMetaInactive = 255,   kAppearancePartIndicator = 129,   kAppearancePartUpButton = 20,   kAppearancePartDownButton = 21,   kAppearancePartLeftButton = kAppearancePartUpButton,   kAppearancePartRightButton = kAppearancePartDownButton,   kAppearancePartPageUpArea = 22,   kAppearancePartPageDownArea = 23,   kAppearancePartPageLeftArea = kAppearancePartPageUpArea,   kAppearancePartPageRightArea = kAppearancePartPageDownArea };
     typedef UInt16 AppearanceRegionCode;
     enum {    kAppearanceRegionTitleBar = 0,   kAppearanceRegionTitleText = 1,   kAppearanceRegionCloseBox = 2,   kAppearanceRegionZoomBox = 3,   kAppearanceRegionDrag = 5,   kAppearanceRegionGrow = 6,   kAppearanceRegionCollapseBox = 7,   kAppearanceRegionTitleProxyIcon = 8,   kAppearanceRegionStructure = 32,   kAppearanceRegionContent = 33,   kAppearanceRegionToolbarButton = 41 };
     enum {    kThemeBrushDialogBackgroundActive = 1,   kThemeBrushDialogBackgroundInactive = 2,   kThemeBrushAlertBackgroundActive = 3,   kThemeBrushAlertBackgroundInactive = 4,   kThemeBrushModelessDialogBackgroundActive = 5,   kThemeBrushModelessDialogBackgroundInactive = 6,   kThemeBrushUtilityWindowBackgroundActive = 7,   kThemeBrushUtilityWindowBackgroundInactive = 8,   kThemeBrushListViewSortColumnBackground = 9,   kThemeBrushListViewBackground = 10,   kThemeBrushIconLabelBackground = 11,   kThemeBrushListViewSeparator = 12,   kThemeBrushChasingArrows = 13,   kThemeBrushDragHilite = 14,   kThemeBrushDocumentWindowBackground = 15,   kThemeBrushFinderWindowBackground = 16,   kThemeBrushScrollBarDelimiterActive = 17,   kThemeBrushScrollBarDelimiterInactive = 18,   kThemeBrushFocusHighlight = 19,   kThemeBrushPopupArrowActive = 20,   kThemeBrushPopupArrowPressed = 21,   kThemeBrushPopupArrowInactive = 22,   kThemeBrushAppleGuideCoachmark = 23,   kThemeBrushIconLabelBackgroundSelected = 24,   kThemeBrushStaticAreaFill = 25,   kThemeBrushActiveAreaFill = 26,   kThemeBrushButtonFrameActive = 27,   kThemeBrushButtonFrameInactive = 28,   kThemeBrushButtonFaceActive = 29,   kThemeBrushButtonFaceInactive = 30,   kThemeBrushButtonFacePressed = 31,   kThemeBrushButtonActiveDarkShadow = 32,   kThemeBrushButtonActiveDarkHighlight = 33,   kThemeBrushButtonActiveLightShadow = 34,   kThemeBrushButtonActiveLightHighlight = 35,   kThemeBrushButtonInactiveDarkShadow = 36,   kThemeBrushButtonInactiveDarkHighlight = 37,   kThemeBrushButtonInactiveLightShadow = 38,   kThemeBrushButtonInactiveLightHighlight = 39,   kThemeBrushButtonPressedDarkShadow = 40,   kThemeBrushButtonPressedDarkHighlight = 41,   kThemeBrushButtonPressedLightShadow = 42,   kThemeBrushButtonPressedLightHighlight = 43,   kThemeBrushBevelActiveLight = 44,   kThemeBrushBevelActiveDark = 45,   kThemeBrushBevelInactiveLight = 46,   kThemeBrushBevelInactiveDark = 47,   kThemeBrushNotificationWindowBackground = 48,   kThemeBrushMovableModalBackground = 49,   kThemeBrushSheetBackgroundOpaque = 50,   kThemeBrushDrawerBackground = 51,   kThemeBrushToolbarBackground = 52,   kThemeBrushSheetBackgroundTransparent = 53,   kThemeBrushMenuBackground = 54,   kThemeBrushMenuBackgroundSelected = 55,   kThemeBrushListViewOddRowBackground = 56,   kThemeBrushListViewEvenRowBackground = 57,   kThemeBrushListViewColumnDivider = 58,   kThemeBrushSheetBackground = kThemeBrushSheetBackgroundOpaque,   kThemeBrushBlack = -1,   kThemeBrushWhite = -2,   kThemeBrushPrimaryHighlightColor = -3,   kThemeBrushSecondaryHighlightColor = -4,   kThemeBrushAlternatePrimaryHighlightColor = -5 };
     typedef SInt16 ThemeBrush;
     enum {    kThemeTextColorDialogActive = 1,   kThemeTextColorDialogInactive = 2,   kThemeTextColorAlertActive = 3,   kThemeTextColorAlertInactive = 4,   kThemeTextColorModelessDialogActive = 5,   kThemeTextColorModelessDialogInactive = 6,   kThemeTextColorWindowHeaderActive = 7,   kThemeTextColorWindowHeaderInactive = 8,   kThemeTextColorPlacardActive = 9,   kThemeTextColorPlacardInactive = 10,   kThemeTextColorPlacardPressed = 11,   kThemeTextColorPushButtonActive = 12,   kThemeTextColorPushButtonInactive = 13,   kThemeTextColorPushButtonPressed = 14,   kThemeTextColorBevelButtonActive = 15,   kThemeTextColorBevelButtonInactive = 16,   kThemeTextColorBevelButtonPressed = 17,   kThemeTextColorPopupButtonActive = 18,   kThemeTextColorPopupButtonInactive = 19,   kThemeTextColorPopupButtonPressed = 20,   kThemeTextColorIconLabel = 21,   kThemeTextColorListView = 22 };
     enum {    kThemeTextColorDocumentWindowTitleActive = 23,   kThemeTextColorDocumentWindowTitleInactive = 24,   kThemeTextColorMovableModalWindowTitleActive = 25,   kThemeTextColorMovableModalWindowTitleInactive = 26,   kThemeTextColorUtilityWindowTitleActive = 27,   kThemeTextColorUtilityWindowTitleInactive = 28,   kThemeTextColorPopupWindowTitleActive = 29,   kThemeTextColorPopupWindowTitleInactive = 30,   kThemeTextColorRootMenuActive = 31,   kThemeTextColorRootMenuSelected = 32,   kThemeTextColorRootMenuDisabled = 33,   kThemeTextColorMenuItemActive = 34,   kThemeTextColorMenuItemSelected = 35,   kThemeTextColorMenuItemDisabled = 36,   kThemeTextColorPopupLabelActive = 37,   kThemeTextColorPopupLabelInactive = 38 };
     enum {    kThemeTextColorTabFrontActive = 39,   kThemeTextColorTabNonFrontActive = 40,   kThemeTextColorTabNonFrontPressed = 41,   kThemeTextColorTabFrontInactive = 42,   kThemeTextColorTabNonFrontInactive = 43,   kThemeTextColorIconLabelSelected = 44,   kThemeTextColorBevelButtonStickyActive = 45,   kThemeTextColorBevelButtonStickyInactive = 46 };
     enum {    kThemeTextColorNotification = 47 };
     enum {    kThemeTextColorSystemDetail = 48 };
     enum {    kThemeTextColorBlack = -1,   kThemeTextColorWhite = -2 };
     typedef SInt16 ThemeTextColor;
     enum {    kThemeStateInactive = 0,   kThemeStateActive = 1,   kThemeStatePressed = 2,   kThemeStateRollover = 6,   kThemeStateUnavailable = 7,   kThemeStateUnavailableInactive = 8 };
     enum {    kThemeStateDisabled = 0 };
     enum {    kThemeStatePressedUp = 2,   kThemeStatePressedDown = 3 };
     typedef UInt32 ThemeDrawState;
     enum {    kThemeArrowCursor = 0,   kThemeCopyArrowCursor = 1,   kThemeAliasArrowCursor = 2,   kThemeContextualMenuArrowCursor = 3,   kThemeIBeamCursor = 4,   kThemeCrossCursor = 5,   kThemePlusCursor = 6,   kThemeWatchCursor = 7,   kThemeClosedHandCursor = 8,   kThemeOpenHandCursor = 9,   kThemePointingHandCursor = 10,   kThemeCountingUpHandCursor = 11,   kThemeCountingDownHandCursor = 12,   kThemeCountingUpAndDownHandCursor = 13,   kThemeSpinningCursor = 14,   kThemeResizeLeftCursor = 15,   kThemeResizeRightCursor = 16,   kThemeResizeLeftRightCursor = 17,   kThemeNotAllowedCursor = 18,   kThemeResizeUpCursor = 19,   kThemeResizeDownCursor = 20,   kThemeResizeUpDownCursor = 21,   kThemePoofCursor = 22 };
     typedef UInt32 ThemeCursor;
     enum {    kThemeMenuBarNormal = 0,   kThemeMenuBarSelected = 1,   kThemeMenuBarInactive = 2 };
     typedef UInt16 ThemeMenuBarState;
     enum {    kThemeMenuSquareMenuBar = (1 << 0) };
     enum {    kThemeMenuActive = 0,   kThemeMenuSelected = 1,   kThemeMenuDisabled = 3 };
     typedef UInt16 ThemeMenuState;
     enum {    kThemeMenuTypePullDown = 0,   kThemeMenuTypePopUp = 1,   kThemeMenuTypeHierarchical = 2,   kThemeMenuTypeInactive = 0x0100 };
     typedef UInt16 ThemeMenuType;
     enum {    kThemeMenuItemPlain = 0,   kThemeMenuItemHierarchical = 1,   kThemeMenuItemScrollUpArrow = 2,   kThemeMenuItemScrollDownArrow = 3,   kThemeMenuItemAtTop = 0x0100,   kThemeMenuItemAtBottom = 0x0200,   kThemeMenuItemHierBackground = 0x0400,   kThemeMenuItemPopUpBackground = 0x0800,   kThemeMenuItemHasIcon = 0x8000,   kThemeMenuItemNoBackground = 0x4000,   kThemeMenuItemAlignRight = 0x2000 };
     typedef UInt16 ThemeMenuItemType;
     enum {    kThemeBackgroundTabPane = 1,   kThemeBackgroundPlacard = 2,   kThemeBackgroundWindowHeader = 3,   kThemeBackgroundListViewWindowHeader = 4,   kThemeBackgroundSecondaryGroupBox = 5,   kThemeBackgroundMetal = 6 };
     typedef UInt32 ThemeBackgroundKind;
     enum {    kThemeNameTag = 'name',   kThemeVariantNameTag = 'varn',   kThemeVariantBaseTintTag = 'tint',   kThemeHighlightColorTag = 'hcol',   kThemeScrollBarArrowStyleTag = 'sbar',   kThemeScrollBarThumbStyleTag = 'sbth',   kThemeSoundsEnabledTag = 'snds',   kThemeDblClickCollapseTag = 'coll' };
     enum {    kThemeAppearanceFileNameTag = 'thme',   kThemeSystemFontTag = 'lgsf',   kThemeSmallSystemFontTag = 'smsf',   kThemeViewsFontTag = 'vfnt',   kThemeViewsFontSizeTag = 'vfsz',   kThemeDesktopPatternNameTag = 'patn',   kThemeDesktopPatternTag = 'patt',   kThemeDesktopPictureNameTag = 'dpnm',   kThemeDesktopPictureAliasTag = 'dpal',   kThemeDesktopPictureAlignmentTag = 'dpan',   kThemeHighlightColorNameTag = 'hcnm',   kThemeExamplePictureIDTag = 'epic',   kThemeSoundTrackNameTag = 'sndt',   kThemeSoundMaskTag = 'smsk',   kThemeUserDefinedTag = 'user',   kThemeSmoothFontEnabledTag = 'smoo',   kThemeSmoothFontMinSizeTag = 'smos' };
     enum {    kTiledOnScreen = 1,   kCenterOnScreen = 2,   kFitToScreen = 3,   kFillScreen = 4,   kUseBestGuess = 5 };
     enum {    kThemeCheckBoxClassicX = 0,   kThemeCheckBoxCheckMark = 1 };
     typedef UInt16 ThemeCheckBoxStyle;
     enum {    kThemeScrollBarArrowsSingle = 0,   kThemeScrollBarArrowsLowerRight = 1 };
     typedef UInt16 ThemeScrollBarArrowStyle;
     enum {    kThemeScrollBarThumbNormal = 0,   kThemeScrollBarThumbProportional = 1 };
     typedef UInt16 ThemeScrollBarThumbStyle;
     enum {    kThemeSystemFont = 0,   kThemeSmallSystemFont = 1,   kThemeSmallEmphasizedSystemFont = 2,   kThemeViewsFont = 3,   kThemeEmphasizedSystemFont = 4,   kThemeApplicationFont = 5,   kThemeLabelFont = 6,   kThemeSystemFontDetail = 7,   kThemeSystemFontDetailEmphasized = 8,   kThemeMenuTitleFont = 100,   kThemeMenuItemFont = 101,   kThemeMenuItemMarkFont = 102,   kThemeMenuItemCmdKeyFont = 103,   kThemeWindowTitleFont = 104,   kThemePushButtonFont = 105,   kThemeUtilityWindowTitleFont = 106,   kThemeAlertHeaderFont = 107,   kThemeToolbarFont = 108,   kThemeMiniSystemFont = 109,   kThemeCurrentPortFont = 200,   kThemeSpecifiedFont = 201 };
     enum {    kPublicThemeFontCount = 21 };
     typedef UInt16 ThemeFontID;
     enum {    kThemeTabNonFront = 0,   kThemeTabNonFrontPressed = 1,   kThemeTabNonFrontInactive = 2,   kThemeTabFront = 3,   kThemeTabFrontInactive = 4,   kThemeTabNonFrontUnavailable = 5,   kThemeTabFrontUnavailable = 6 };
     typedef UInt16 ThemeTabStyle;
     enum {    kThemeTabNorth = 0,   kThemeTabSouth = 1,   kThemeTabEast = 2,   kThemeTabWest = 3 };
     typedef UInt16 ThemeTabDirection;
     enum {    kThemeSmallTabHeight = 16,   kThemeLargeTabHeight = 21,   kThemeTabPaneOverlap = 3,   kThemeSmallTabHeightMax = 19,   kThemeLargeTabHeightMax = 24 };
     enum {    kThemeScrollBarMedium = 0,   kThemeScrollBarSmall = 1,   kThemeSliderMedium = 2,   kThemeProgressBarMedium = 3,   kThemeIndeterminateBarMedium = 4,   kThemeRelevanceBar = 5,   kThemeSliderSmall = 6,   kThemeProgressBarLarge = 7,   kThemeIndeterminateBarLarge = 8 };
     enum {    kThemeScrollBarMini = 9,   kThemeSliderMini = 10,   kThemeProgressBarMini = 11,   kThemeIndeterminateBarMini = 12 };
     enum {    kThemeMediumScrollBar = kThemeScrollBarMedium,   kThemeSmallScrollBar = kThemeScrollBarSmall,   kThemeMediumSlider = kThemeSliderMedium,   kThemeMediumProgressBar = kThemeProgressBarMedium,   kThemeMediumIndeterminateBar = kThemeIndeterminateBarMedium,   kThemeSmallSlider = kThemeSliderSmall,   kThemeLargeProgressBar = kThemeProgressBarLarge,   kThemeLargeIndeterminateBar = kThemeIndeterminateBarLarge,   kThemeMiniScrollBar = kThemeScrollBarMini,   kThemeMiniSlider = kThemeSliderMini,   kThemeMiniProgressBar = kThemeProgressBarMini,   kThemeMiniIndeterminateBar = kThemeIndeterminateBarMini };
     typedef UInt16 ThemeTrackKind;
     enum {    kThemeTrackActive = 0,   kThemeTrackDisabled = 1,   kThemeTrackNothingToScroll = 2,   kThemeTrackInactive = 3 };
     typedef UInt8 ThemeTrackEnableState;
     enum {    kThemeLeftOutsideArrowPressed = 0x01,   kThemeLeftInsideArrowPressed = 0x02,   kThemeLeftTrackPressed = 0x04,   kThemeThumbPressed = 0x08,   kThemeRightTrackPressed = 0x10,   kThemeRightInsideArrowPressed = 0x20,   kThemeRightOutsideArrowPressed = 0x40,   kThemeTopOutsideArrowPressed = kThemeLeftOutsideArrowPressed,   kThemeTopInsideArrowPressed = kThemeLeftInsideArrowPressed,   kThemeTopTrackPressed = kThemeLeftTrackPressed,   kThemeBottomTrackPressed = kThemeRightTrackPressed,   kThemeBottomInsideArrowPressed = kThemeRightInsideArrowPressed,   kThemeBottomOutsideArrowPressed = kThemeRightOutsideArrowPressed };
     typedef UInt8 ThemeTrackPressState;
     enum {    kThemeThumbPlain = 0,   kThemeThumbUpward = 1,   kThemeThumbDownward = 2 };
     typedef UInt8 ThemeThumbDirection;
     enum {    kThemeTrackHorizontal = (1 << 0),   kThemeTrackRightToLeft = (1 << 1),   kThemeTrackShowThumb = (1 << 2),   kThemeTrackThumbRgnIsNotGhost = (1 << 3),   kThemeTrackNoScrollBarArrows = (1 << 4),   kThemeTrackHasFocus = (1 << 5),   kThemeTrackHideTrack = (1 << 6) };
     typedef UInt16 ThemeTrackAttributes;
     struct ScrollBarTrackInfo {    SInt32 viewsize;    ThemeTrackPressState pressState;  };
     typedef struct ScrollBarTrackInfo ScrollBarTrackInfo;
     struct SliderTrackInfo {    ThemeThumbDirection thumbDir;    ThemeTrackPressState pressState;  };
     typedef struct SliderTrackInfo SliderTrackInfo;
     struct ProgressTrackInfo {    UInt8 phase;  };
     typedef struct ProgressTrackInfo ProgressTrackInfo;
     struct ThemeTrackDrawInfo {    ThemeTrackKind kind;    Rect bounds;    SInt32 min;    SInt32 max;    SInt32 value;    UInt32 reserved;    ThemeTrackAttributes attributes;    ThemeTrackEnableState enableState;    UInt8 filler1;    union {     ScrollBarTrackInfo scrollbar;     SliderTrackInfo slider;     ProgressTrackInfo progress;   }  trackInfo;  };
     typedef struct ThemeTrackDrawInfo ThemeTrackDrawInfo;
     enum {    kThemeWindowHasGrow = (1 << 0),   kThemeWindowHasHorizontalZoom = (1 << 3),   kThemeWindowHasVerticalZoom = (1 << 4),   kThemeWindowHasFullZoom = kThemeWindowHasHorizontalZoom + kThemeWindowHasVerticalZoom,   kThemeWindowHasCloseBox = (1 << 5),   kThemeWindowHasCollapseBox = (1 << 6),   kThemeWindowHasTitleText = (1 << 7),   kThemeWindowIsCollapsed = (1 << 8),   kThemeWindowHasDirty = (1 << 9),   kThemeWindowHasToolbarButton = (1 << 11) };
     typedef UInt32 ThemeWindowAttributes;
     enum {    kThemeDocumentWindow = 0,   kThemeDialogWindow = 1,   kThemeMovableDialogWindow = 2,   kThemeAlertWindow = 3,   kThemeMovableAlertWindow = 4,   kThemePlainDialogWindow = 5,   kThemeShadowDialogWindow = 6,   kThemePopupWindow = 7,   kThemeUtilityWindow = 8,   kThemeUtilitySideWindow = 9,   kThemeSheetWindow = 10,   kThemeDrawerWindow = 11 };
     typedef UInt16 ThemeWindowType;
     enum {    kThemeWidgetCloseBox = 0,   kThemeWidgetZoomBox = 1,   kThemeWidgetCollapseBox = 2,   kThemeWidgetDirtyCloseBox = 6,   kThemeWidgetToolbarButton = 7 };
     typedef UInt16 ThemeTitleBarWidget;
     enum {    kThemeArrowLeft = 0,   kThemeArrowDown = 1,   kThemeArrowRight = 2,   kThemeArrowUp = 3 };
     typedef UInt16 ThemeArrowOrientation;
     enum {    kThemeArrow3pt = 0,   kThemeArrow5pt = 1,   kThemeArrow7pt = 2,   kThemeArrow9pt = 3 };
     typedef UInt16 ThemePopupArrowSize;
     enum {    kThemeGrowLeft = (1 << 0),   kThemeGrowRight = (1 << 1),   kThemeGrowUp = (1 << 2),   kThemeGrowDown = (1 << 3) };
     typedef UInt16 ThemeGrowDirection;
     enum {    kThemePushButton = 0,   kThemeCheckBox = 1,   kThemeRadioButton = 2,   kThemeBevelButton = 3,   kThemeArrowButton = 4,   kThemePopupButton = 5,   kThemeDisclosureTriangle = 6,   kThemeIncDecButton = 7,   kThemeBevelButtonSmall = 8,   kThemeBevelButtonMedium = 3,   kThemeBevelButtonLarge = 9,   kThemeListHeaderButton = 10,   kThemeRoundButton = 11,   kThemeRoundButtonLarge = 12,   kThemeCheckBoxSmall = 13,   kThemeRadioButtonSmall = 14,   kThemeRoundedBevelButton = 15,   kThemeComboBox = 16,   kThemeComboBoxSmall = 17 };
     enum {    kThemeComboBoxMini = 18,   kThemeCheckBoxMini = 19,   kThemeRadioButtonMini = 20,   kThemeIncDecButtonSmall = 21,   kThemeIncDecButtonMini = 22,   kThemeArrowButtonSmall = 23,   kThemeArrowButtonMini = 24,   kThemePushButtonNormal = 25,   kThemePushButtonSmall = 26,   kThemePushButtonMini = 27,   kThemePopupButtonNormal = 28,   kThemePopupButtonSmall = 29,   kThemePopupButtonMini = 30 };
     enum {    kThemeBevelButtonInset = 31,   kThemePushButtonTextured = 32,   kThemePushButtonTexturedSmall = 33,   kThemeRoundButtonHelp = 34,   kThemePushButtonInset = kThemePushButtonTextured,   kThemePushButtonInsetSmall = kThemePushButtonTexturedSmall };
     enum {    kThemeNormalCheckBox = kThemeCheckBox,   kThemeNormalRadioButton = kThemeRadioButton,   kThemeLargeBevelButton = kThemeBevelButtonLarge,   kThemeMediumBevelButton = kThemeBevelButtonMedium,   kThemeMiniCheckBox = kThemeCheckBoxMini,   kThemeMiniRadioButton = kThemeRadioButtonMini,   kThemeSmallBevelButton = kThemeBevelButtonSmall,   kThemeSmallCheckBox = kThemeCheckBoxSmall,   kThemeSmallRadioButton = kThemeRadioButtonSmall,   kThemeLargeRoundButton = kThemeRoundButtonLarge,   kThemeDisclosureButton = kThemeDisclosureTriangle };
     typedef UInt16 ThemeButtonKind;
     enum {    kThemeButtonOff = 0,   kThemeButtonOn = 1,   kThemeButtonMixed = 2,   kThemeDisclosureRight = 0,   kThemeDisclosureDown = 1,   kThemeDisclosureLeft = 2 };
     typedef UInt16 ThemeButtonValue;
     enum {    kThemeAdornmentNone = 0,   kThemeAdornmentDefault = (1 << 0),   kThemeAdornmentFocus = (1 << 2),   kThemeAdornmentRightToLeft = (1 << 4),   kThemeAdornmentDrawIndicatorOnly = (1 << 5),   kThemeAdornmentHeaderButtonLeftNeighborSelected = (1 << 6),   kThemeAdornmentHeaderButtonRightNeighborSelected = (1 << 7),   kThemeAdornmentHeaderButtonSortUp = (1 << 8),   kThemeAdornmentHeaderMenuButton = (1 << 9),   kThemeAdornmentHeaderButtonNoShadow = (1 << 10),   kThemeAdornmentHeaderButtonShadowOnly = (1 << 11),   kThemeAdornmentHeaderButtonNoSortArrow = (1 << 12),   kThemeAdornmentArrowLeftArrow = (1 << 6),   kThemeAdornmentArrowDownArrow = (1 << 7),   kThemeAdornmentArrowDoubleArrow = (1 << 8),   kThemeAdornmentArrowUpArrow = (1 << 9),   kThemeAdornmentArrowRightArrow = (1 << 10) };
     enum {    kThemeAdornmentNoShadow = kThemeAdornmentHeaderButtonNoShadow,   kThemeAdornmentShadowOnly = kThemeAdornmentHeaderButtonShadowOnly };
     typedef UInt16 ThemeButtonAdornment;
     struct ThemeButtonDrawInfo {    ThemeDrawState state;    ThemeButtonValue value;    ThemeButtonAdornment adornment;  };
     typedef struct ThemeButtonDrawInfo ThemeButtonDrawInfo;
     typedef ThemeButtonDrawInfo * ThemeButtonDrawInfoPtr;
     enum {    kThemeNoSounds = 0,   kThemeWindowSoundsMask = (1 << 0),   kThemeMenuSoundsMask = (1 << 1),   kThemeControlSoundsMask = (1 << 2),   kThemeFinderSoundsMask = (1 << 3) };
     enum {    kThemeDragSoundNone = 0,   kThemeDragSoundMoveWindow = 'wmov',   kThemeDragSoundGrowWindow = 'wgro',   kThemeDragSoundMoveUtilWindow = 'umov',   kThemeDragSoundGrowUtilWindow = 'ugro',   kThemeDragSoundMoveDialog = 'dmov',   kThemeDragSoundMoveAlert = 'amov',   kThemeDragSoundMoveIcon = 'imov',   kThemeDragSoundSliderThumb = 'slth',   kThemeDragSoundSliderGhost = 'slgh',   kThemeDragSoundScrollBarThumb = 'sbth',   kThemeDragSoundScrollBarGhost = 'sbgh',   kThemeDragSoundScrollBarArrowDecreasing = 'sbad',   kThemeDragSoundScrollBarArrowIncreasing = 'sbai',   kThemeDragSoundDragging = 'drag' };
     typedef OSType ThemeDragSoundKind;
     enum {    kThemeSoundNone = 0,   kThemeSoundMenuOpen = 'mnuo',   kThemeSoundMenuClose = 'mnuc',   kThemeSoundMenuItemHilite = 'mnui',   kThemeSoundMenuItemRelease = 'mnus',   kThemeSoundWindowClosePress = 'wclp',   kThemeSoundWindowCloseEnter = 'wcle',   kThemeSoundWindowCloseExit = 'wclx',   kThemeSoundWindowCloseRelease = 'wclr',   kThemeSoundWindowZoomPress = 'wzmp',   kThemeSoundWindowZoomEnter = 'wzme',   kThemeSoundWindowZoomExit = 'wzmx',   kThemeSoundWindowZoomRelease = 'wzmr',   kThemeSoundWindowCollapsePress = 'wcop',   kThemeSoundWindowCollapseEnter = 'wcoe',   kThemeSoundWindowCollapseExit = 'wcox',   kThemeSoundWindowCollapseRelease = 'wcor',   kThemeSoundWindowDragBoundary = 'wdbd',   kThemeSoundUtilWinClosePress = 'uclp',   kThemeSoundUtilWinCloseEnter = 'ucle',   kThemeSoundUtilWinCloseExit = 'uclx',   kThemeSoundUtilWinCloseRelease = 'uclr',   kThemeSoundUtilWinZoomPress = 'uzmp',   kThemeSoundUtilWinZoomEnter = 'uzme',   kThemeSoundUtilWinZoomExit = 'uzmx',   kThemeSoundUtilWinZoomRelease = 'uzmr',   kThemeSoundUtilWinCollapsePress = 'ucop',   kThemeSoundUtilWinCollapseEnter = 'ucoe',   kThemeSoundUtilWinCollapseExit = 'ucox',   kThemeSoundUtilWinCollapseRelease = 'ucor',   kThemeSoundUtilWinDragBoundary = 'udbd',   kThemeSoundWindowOpen = 'wopn',   kThemeSoundWindowClose = 'wcls',   kThemeSoundWindowZoomIn = 'wzmi',   kThemeSoundWindowZoomOut = 'wzmo',   kThemeSoundWindowCollapseUp = 'wcol',   kThemeSoundWindowCollapseDown = 'wexp',   kThemeSoundWindowActivate = 'wact',   kThemeSoundUtilWindowOpen = 'uopn',   kThemeSoundUtilWindowClose = 'ucls',   kThemeSoundUtilWindowZoomIn = 'uzmi',   kThemeSoundUtilWindowZoomOut = 'uzmo',   kThemeSoundUtilWindowCollapseUp = 'ucol',   kThemeSoundUtilWindowCollapseDown = 'uexp',   kThemeSoundUtilWindowActivate = 'uact',   kThemeSoundDialogOpen = 'dopn',   kThemeSoundDialogClose = 'dlgc',   kThemeSoundAlertOpen = 'aopn',   kThemeSoundAlertClose = 'altc',   kThemeSoundPopupWindowOpen = 'pwop',   kThemeSoundPopupWindowClose = 'pwcl',   kThemeSoundButtonPress = 'btnp',   kThemeSoundButtonEnter = 'btne',   kThemeSoundButtonExit = 'btnx',   kThemeSoundButtonRelease = 'btnr',   kThemeSoundDefaultButtonPress = 'dbtp',   kThemeSoundDefaultButtonEnter = 'dbte',   kThemeSoundDefaultButtonExit = 'dbtx',   kThemeSoundDefaultButtonRelease = 'dbtr',   kThemeSoundCancelButtonPress = 'cbtp',   kThemeSoundCancelButtonEnter = 'cbte',   kThemeSoundCancelButtonExit = 'cbtx',   kThemeSoundCancelButtonRelease = 'cbtr',   kThemeSoundCheckboxPress = 'chkp',   kThemeSoundCheckboxEnter = 'chke',   kThemeSoundCheckboxExit = 'chkx',   kThemeSoundCheckboxRelease = 'chkr',   kThemeSoundRadioPress = 'radp',   kThemeSoundRadioEnter = 'rade',   kThemeSoundRadioExit = 'radx',   kThemeSoundRadioRelease = 'radr',   kThemeSoundScrollArrowPress = 'sbap',   kThemeSoundScrollArrowEnter = 'sbae',   kThemeSoundScrollArrowExit = 'sbax',   kThemeSoundScrollArrowRelease = 'sbar',   kThemeSoundScrollEndOfTrack = 'sbte',   kThemeSoundScrollTrackPress = 'sbtp',   kThemeSoundSliderEndOfTrack = 'slte',   kThemeSoundSliderTrackPress = 'sltp',   kThemeSoundBalloonOpen = 'blno',   kThemeSoundBalloonClose = 'blnc',   kThemeSoundBevelPress = 'bevp',   kThemeSoundBevelEnter = 'beve',   kThemeSoundBevelExit = 'bevx',   kThemeSoundBevelRelease = 'bevr',   kThemeSoundLittleArrowUpPress = 'laup',   kThemeSoundLittleArrowDnPress = 'ladp',   kThemeSoundLittleArrowEnter = 'lare',   kThemeSoundLittleArrowExit = 'larx',   kThemeSoundLittleArrowUpRelease = 'laur',   kThemeSoundLittleArrowDnRelease = 'ladr',   kThemeSoundPopupPress = 'popp',   kThemeSoundPopupEnter = 'pope',   kThemeSoundPopupExit = 'popx',   kThemeSoundPopupRelease = 'popr',   kThemeSoundDisclosurePress = 'dscp',   kThemeSoundDisclosureEnter = 'dsce',   kThemeSoundDisclosureExit = 'dscx',   kThemeSoundDisclosureRelease = 'dscr',   kThemeSoundTabPressed = 'tabp',   kThemeSoundTabEnter = 'tabe',   kThemeSoundTabExit = 'tabx',   kThemeSoundTabRelease = 'tabr',   kThemeSoundDragTargetHilite = 'dthi',   kThemeSoundDragTargetUnhilite = 'dtuh',   kThemeSoundDragTargetDrop = 'dtdr',   kThemeSoundEmptyTrash = 'ftrs',   kThemeSoundSelectItem = 'fsel',   kThemeSoundNewItem = 'fnew',   kThemeSoundReceiveDrop = 'fdrp',   kThemeSoundCopyDone = 'fcpd',   kThemeSoundResolveAlias = 'fral',   kThemeSoundLaunchApp = 'flap',   kThemeSoundDiskInsert = 'dski',   kThemeSoundDiskEject = 'dske',   kThemeSoundFinderDragOnIcon = 'fdon',   kThemeSoundFinderDragOffIcon = 'fdof' };
     typedef OSType ThemeSoundKind;
     enum {    kThemePopupTabNormalPosition = 0,   kThemePopupTabCenterOnWindow = 1,   kThemePopupTabCenterOnOffset = 2 };
     struct ThemeWindowMetrics {    UInt16 metricSize;    SInt16 titleHeight;    SInt16 titleWidth;    SInt16 popupTabOffset;    SInt16 popupTabWidth;    UInt16 popupTabPosition;  };
     typedef struct ThemeWindowMetrics ThemeWindowMetrics;
     typedef ThemeWindowMetrics * ThemeWindowMetricsPtr;
     typedef struct OpaqueThemeDrawingState* ThemeDrawingState;
     typedef void ( * ThemeTabTitleDrawProcPtr)(const Rect *bounds, ThemeTabStyle style, ThemeTabDirection direction, SInt16 depth, Boolean isColorDev, URefCon userData);
     typedef void ( * ThemeEraseProcPtr)(const Rect *bounds, URefCon eraseData, SInt16 depth, Boolean isColorDev);
     typedef void ( * ThemeButtonDrawProcPtr)(const Rect *bounds, ThemeButtonKind kind, const ThemeButtonDrawInfo *info, URefCon userData, SInt16 depth, Boolean isColorDev);
     typedef void ( * WindowTitleDrawingProcPtr)(const Rect *bounds, SInt16 depth, Boolean colorDevice, URefCon userData);
     typedef Boolean ( * ThemeIteratorProcPtr)(ConstStr255Param inFileName, SInt16 resID, Collection inThemeSettings, PRefCon inUserData);
     typedef ThemeTabTitleDrawProcPtr ThemeTabTitleDrawUPP;
     typedef ThemeEraseProcPtr ThemeEraseUPP;
     typedef ThemeButtonDrawProcPtr ThemeButtonDrawUPP;
     typedef WindowTitleDrawingProcPtr WindowTitleDrawingUPP;
     typedef ThemeIteratorProcPtr ThemeIteratorUPP;
     extern ThemeTabTitleDrawUPP NewThemeTabTitleDrawUPP(ThemeTabTitleDrawProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern ThemeEraseUPP NewThemeEraseUPP(ThemeEraseProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern ThemeButtonDrawUPP NewThemeButtonDrawUPP(ThemeButtonDrawProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern WindowTitleDrawingUPP NewWindowTitleDrawingUPP(WindowTitleDrawingProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern ThemeIteratorUPP NewThemeIteratorUPP(ThemeIteratorProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeThemeTabTitleDrawUPP(ThemeTabTitleDrawUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeThemeEraseUPP(ThemeEraseUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeThemeButtonDrawUPP(ThemeButtonDrawUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeWindowTitleDrawingUPP(WindowTitleDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeThemeIteratorUPP(ThemeIteratorUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeThemeTabTitleDrawUPP(   const Rect * bounds,   ThemeTabStyle style,   ThemeTabDirection direction,   SInt16 depth,   Boolean isColorDev,   URefCon userData,   ThemeTabTitleDrawUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeThemeEraseUPP(   const Rect * bounds,   URefCon eraseData,   SInt16 depth,   Boolean isColorDev,   ThemeEraseUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeThemeButtonDrawUPP(   const Rect * bounds,   ThemeButtonKind kind,   const ThemeButtonDrawInfo * info,   URefCon userData,   SInt16 depth,   Boolean isColorDev,   ThemeButtonDrawUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeWindowTitleDrawingUPP(   const Rect * bounds,   SInt16 depth,   Boolean colorDevice,   URefCon userData,   WindowTitleDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern Boolean InvokeThemeIteratorUPP(   ConstStr255Param inFileName,   SInt16 resID,   Collection inThemeSettings,   PRefCon inUserData,   ThemeIteratorUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     typedef void ( * MenuTitleDrawingProcPtr)(const Rect *inBounds, SInt16 inDepth, Boolean inIsColorDevice, SRefCon inUserData);
     typedef void ( * MenuItemDrawingProcPtr)(const Rect *inBounds, SInt16 inDepth, Boolean inIsColorDevice, SRefCon inUserData);
     typedef MenuTitleDrawingProcPtr MenuTitleDrawingUPP;
     typedef MenuItemDrawingProcPtr MenuItemDrawingUPP;
     extern MenuTitleDrawingUPP NewMenuTitleDrawingUPP(MenuTitleDrawingProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern MenuItemDrawingUPP NewMenuItemDrawingUPP(MenuItemDrawingProcPtr userRoutine) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeMenuTitleDrawingUPP(MenuTitleDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void DisposeMenuItemDrawingUPP(MenuItemDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeMenuTitleDrawingUPP(   const Rect * inBounds,   SInt16 inDepth,   Boolean inIsColorDevice,   SRefCon inUserData,   MenuTitleDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     extern void InvokeMenuItemDrawingUPP(   const Rect * inBounds,   SInt16 inDepth,   Boolean inIsColorDevice,   SRefCon inUserData,   MenuItemDrawingUPP userUPP) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5)));
     enum {    appearanceBadBrushIndexErr = themeInvalidBrushErr,   appearanceProcessRegisteredErr = themeProcessRegisteredErr,   appearanceProcessNotRegisteredErr = themeProcessNotRegisteredErr,   appearanceBadTextColorIndexErr = themeBadTextColorErr,   appearanceThemeHasNoAccents = themeHasNoAccentsErr,   appearanceBadCursorIndexErr = themeBadCursorIndexErr };
     enum {    kThemeActiveDialogBackgroundBrush = kThemeBrushDialogBackgroundActive,   kThemeInactiveDialogBackgroundBrush = kThemeBrushDialogBackgroundInactive,   kThemeActiveAlertBackgroundBrush = kThemeBrushAlertBackgroundActive,   kThemeInactiveAlertBackgroundBrush = kThemeBrushAlertBackgroundInactive,   kThemeActiveModelessDialogBackgroundBrush = kThemeBrushModelessDialogBackgroundActive,   kThemeInactiveModelessDialogBackgroundBrush = kThemeBrushModelessDialogBackgroundInactive,   kThemeActiveUtilityWindowBackgroundBrush = kThemeBrushUtilityWindowBackgroundActive,   kThemeInactiveUtilityWindowBackgroundBrush = kThemeBrushUtilityWindowBackgroundInactive,   kThemeListViewSortColumnBackgroundBrush = kThemeBrushListViewSortColumnBackground,   kThemeListViewBackgroundBrush = kThemeBrushListViewBackground,   kThemeIconLabelBackgroundBrush = kThemeBrushIconLabelBackground,   kThemeListViewSeparatorBrush = kThemeBrushListViewSeparator,   kThemeChasingArrowsBrush = kThemeBrushChasingArrows,   kThemeDragHiliteBrush = kThemeBrushDragHilite,   kThemeDocumentWindowBackgroundBrush = kThemeBrushDocumentWindowBackground,   kThemeFinderWindowBackgroundBrush = kThemeBrushFinderWindowBackground };
     enum {    kThemeActiveScrollBarDelimiterBrush = kThemeBrushScrollBarDelimiterActive,   kThemeInactiveScrollBarDelimiterBrush = kThemeBrushScrollBarDelimiterInactive,   kThemeFocusHighlightBrush = kThemeBrushFocusHighlight,   kThemeActivePopupArrowBrush = kThemeBrushPopupArrowActive,   kThemePressedPopupArrowBrush = kThemeBrushPopupArrowPressed,   kThemeInactivePopupArrowBrush = kThemeBrushPopupArrowInactive,   kThemeAppleGuideCoachmarkBrush = kThemeBrushAppleGuideCoachmark };
     enum {    kThemeActiveDialogTextColor = kThemeTextColorDialogActive,   kThemeInactiveDialogTextColor = kThemeTextColorDialogInactive,   kThemeActiveAlertTextColor = kThemeTextColorAlertActive,   kThemeInactiveAlertTextColor = kThemeTextColorAlertInactive,   kThemeActiveModelessDialogTextColor = kThemeTextColorModelessDialogActive,   kThemeInactiveModelessDialogTextColor = kThemeTextColorModelessDialogInactive,   kThemeActiveWindowHeaderTextColor = kThemeTextColorWindowHeaderActive,   kThemeInactiveWindowHeaderTextColor = kThemeTextColorWindowHeaderInactive,   kThemeActivePlacardTextColor = kThemeTextColorPlacardActive,   kThemeInactivePlacardTextColor = kThemeTextColorPlacardInactive,   kThemePressedPlacardTextColor = kThemeTextColorPlacardPressed,   kThemeActivePushButtonTextColor = kThemeTextColorPushButtonActive,   kThemeInactivePushButtonTextColor = kThemeTextColorPushButtonInactive,   kThemePressedPushButtonTextColor = kThemeTextColorPushButtonPressed,   kThemeActiveBevelButtonTextColor = kThemeTextColorBevelButtonActive,   kThemeInactiveBevelButtonTextColor = kThemeTextColorBevelButtonInactive,   kThemePressedBevelButtonTextColor = kThemeTextColorBevelButtonPressed,   kThemeActivePopupButtonTextColor = kThemeTextColorPopupButtonActive,   kThemeInactivePopupButtonTextColor = kThemeTextColorPopupButtonInactive,   kThemePressedPopupButtonTextColor = kThemeTextColorPopupButtonPressed,   kThemeIconLabelTextColor = kThemeTextColorIconLabel,   kThemeListViewTextColor = kThemeTextColorListView };
     enum {    kThemeActiveDocumentWindowTitleTextColor = kThemeTextColorDocumentWindowTitleActive,   kThemeInactiveDocumentWindowTitleTextColor = kThemeTextColorDocumentWindowTitleInactive,   kThemeActiveMovableModalWindowTitleTextColor = kThemeTextColorMovableModalWindowTitleActive,   kThemeInactiveMovableModalWindowTitleTextColor = kThemeTextColorMovableModalWindowTitleInactive,   kThemeActiveUtilityWindowTitleTextColor = kThemeTextColorUtilityWindowTitleActive,   kThemeInactiveUtilityWindowTitleTextColor = kThemeTextColorUtilityWindowTitleInactive,   kThemeActivePopupWindowTitleColor = kThemeTextColorPopupWindowTitleActive,   kThemeInactivePopupWindowTitleColor = kThemeTextColorPopupWindowTitleInactive,   kThemeActiveRootMenuTextColor = kThemeTextColorRootMenuActive,   kThemeSelectedRootMenuTextColor = kThemeTextColorRootMenuSelected,   kThemeDisabledRootMenuTextColor = kThemeTextColorRootMenuDisabled,   kThemeActiveMenuItemTextColor = kThemeTextColorMenuItemActive,   kThemeSelectedMenuItemTextColor = kThemeTextColorMenuItemSelected,   kThemeDisabledMenuItemTextColor = kThemeTextColorMenuItemDisabled,   kThemeActivePopupLabelTextColor = kThemeTextColorPopupLabelActive,   kThemeInactivePopupLabelTextColor = kThemeTextColorPopupLabelInactive };
     enum {    kAEThemeSwitch = kAEAppearanceChanged };
     enum {    kThemeNoAdornment = kThemeAdornmentNone,   kThemeDefaultAdornment = kThemeAdornmentDefault,   kThemeFocusAdornment = kThemeAdornmentFocus,   kThemeRightToLeftAdornment = kThemeAdornmentRightToLeft,   kThemeDrawIndicatorOnly = kThemeAdornmentDrawIndicatorOnly };
     enum {    kThemeBrushPassiveAreaFill = kThemeBrushStaticAreaFill };
     enum {    kThemeScrollBar = kThemeMediumScrollBar,   kThemeSlider = kThemeMediumSlider,   kThemeProgressBar = kThemeMediumProgressBar,   kThemeIndeterminateBar = kThemeMediumIndeterminateBar };
     typedef struct OpaqueHIObjectClassRef* HIObjectClassRef;
     typedef struct OpaqueHIObjectRef* HIObjectRef;
     enum {    hiObjectClassExistsErr = -22080,   hiObjectClassHasInstancesErr = -22081,   hiObjectClassHasSubclassesErr = -22082,   hiObjectClassIsAbstractErr = -22083,   hiObjectCannotSubclassSingletonErr = -22084,   hiObjectDelegateAlreadyExistsErr = -22090,   hiObjectDelegateNotFoundErr = -22091 };
     extern OSStatus HIObjectCreateFromBundle(   CFBundleRef inBundle,   HIObjectRef * outObject) __attribute__((availability(macosx,introduced=10.2)));
     extern HIObjectRef HIObjectFromEventTarget(EventTargetRef inTarget) __attribute__((availability(macosx,introduced=10.5)));
     extern Boolean HIObjectIsArchivingIgnored(HIObjectRef inObject) __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataParameterNamesKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataParameterTypesKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataParameterValuesKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataClassIDKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataSuperClassIDKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataCDEFProcIDKey __attribute__((availability(macosx,introduced=10.4)));
     extern const CFStringRef kHIObjectCustomDataDelegateGroupParametersKey __attribute__((availability(macosx,introduced=10.5)));
     typedef UInt32 HIDelegatePosition;
     enum {    kHIDelegateAll = 0,   kHIDelegateBefore = 1,   kHIDelegateAfter = 2 };
     extern const CFStringRef kHIDelegateBeforeKey __attribute__((availability(macosx,introduced=10.5)));
     extern const CFStringRef kHIDelegateAfterKey __attribute__((availability(macosx,introduced=10.5)));
     extern OSStatus HIObjectAddDelegate(   HIObjectRef inObject,   HIObjectRef inDelegate,   HIDelegatePosition inPosition) __attribute__((availability(macosx,introduced=10.5)));
     extern OSStatus HIObjectRemoveDelegate(   HIObjectRef inObject,   HIObjectRef inDelegate,   HIDelegatePosition inPosition) __attribute__((availability(macosx,introduced=10.5)));
     extern OSStatus HIObjectCopyDelegates(   HIObjectRef inObject,   CFDictionaryRef * outDelegates) __attribute__((availability(macosx,introduced=10.5)));
     extern HIObjectRef HIObjectGetEventHandlerObject(EventHandlerCallRef inRef) __attribute__((availability(macosx,introduced=10.5)));
     typedef struct OpaqueControlRef* ControlRef;
     typedef ControlRef ControlHandle;
     typedef ControlRef HIViewRef;
     enum {    textMenuProc = 0,   kHIMenuAppendItem = 0x0000FFFF };
     enum {    noMark = 0 };
     enum {    kMenuStdMenuProc = 63,   kMenuStdMenuBarProc = 63 };
     enum {    kMenuNoModifiers = 0,   kMenuShiftModifier = (1 << 0),   kMenuOptionModifier = (1 << 1),   kMenuControlModifier = (1 << 2),   kMenuNoCommandModifier = (1 << 3) };
     enum {    kMenuNoIcon = 0,   kMenuIconType = 1,   kMenuShrinkIconType = 2,   kMenuSmallIconType = 3,   kMenuColorIconType = 4,   kMenuIconSuiteType = 5,   kMenuIconRefType = 6,   kMenuCGImageRefType = 7,   kMenuSystemIconSelectorType = 8,   kMenuIconResourceType = 9 };
     enum {    kMenuNullGlyph = 0x00,   kMenuTabRightGlyph = 0x02,   kMenuTabLeftGlyph = 0x03,   kMenuEnterGlyph = 0x04,   kMenuShiftGlyph = 0x05,   kMenuControlGlyph = 0x06,   kMenuOptionGlyph = 0x07,   kMenuSpaceGlyph = 0x09,   kMenuDeleteRightGlyph = 0x0A,   kMenuReturnGlyph = 0x0B,   kMenuReturnR2LGlyph = 0x0C,   kMenuNonmarkingReturnGlyph = 0x0D,   kMenuPencilGlyph = 0x0F,   kMenuDownwardArrowDashedGlyph = 0x10,   kMenuCommandGlyph = 0x11,   kMenuCheckmarkGlyph = 0x12,   kMenuDiamondGlyph = 0x13,   kMenuAppleLogoFilledGlyph = 0x14,   kMenuParagraphKoreanGlyph = 0x15,   kMenuDeleteLeftGlyph = 0x17,   kMenuLeftArrowDashedGlyph = 0x18,   kMenuUpArrowDashedGlyph = 0x19,   kMenuRightArrowDashedGlyph = 0x1A,   kMenuEscapeGlyph = 0x1B,   kMenuClearGlyph = 0x1C,   kMenuLeftDoubleQuotesJapaneseGlyph = 0x1D,   kMenuRightDoubleQuotesJapaneseGlyph = 0x1E,   kMenuTrademarkJapaneseGlyph = 0x1F,   kMenuBlankGlyph = 0x61,   kMenuPageUpGlyph = 0x62,   kMenuCapsLockGlyph = 0x63,   kMenuLeftArrowGlyph = 0x64,   kMenuRightArrowGlyph = 0x65,   kMenuNorthwestArrowGlyph = 0x66,   kMenuHelpGlyph = 0x67,   kMenuUpArrowGlyph = 0x68,   kMenuSoutheastArrowGlyph = 0x69,   kMenuDownArrowGlyph = 0x6A,   kMenuPageDownGlyph = 0x6B,   kMenuAppleLogoOutlineGlyph = 0x6C,   kMenuContextualMenuGlyph = 0x6D,   kMenuPowerGlyph = 0x6E,   kMenuF1Glyph = 0x6F,   kMenuF2Glyph = 0x70,   kMenuF3Glyph = 0x71,   kMenuF4Glyph = 0x72,   kMenuF5Glyph = 0x73,   kMenuF6Glyph = 0x74,   kMenuF7Glyph = 0x75,   kMenuF8Glyph = 0x76,   kMenuF9Glyph = 0x77,   kMenuF10Glyph = 0x78,   kMenuF11Glyph = 0x79,   kMenuF12Glyph = 0x7A,   kMenuF13Glyph = 0x87,   kMenuF14Glyph = 0x88,   kMenuF15Glyph = 0x89,   kMenuControlISOGlyph = 0x8A,   kMenuEjectGlyph = 0x8C,   kMenuEisuGlyph = 0x8D,   kMenuKanaGlyph = 0x8E,   kMenuF16Glyph = 0x8F,   kMenuF17Glyph = 0x90,   kMenuF18Glyph = 0x91,   kMenuF19Glyph = 0x92 };
     typedef UInt32 MenuAttributes;
     enum {    kMenuAttrExcludesMarkColumn = (1 << 0),   kMenuAttrAutoDisable = (1 << 2),   kMenuAttrUsePencilGlyph = (1 << 3),   kMenuAttrHidden = (1 << 4),   kMenuAttrCondenseSeparators = (1 << 5),   kMenuAttrDoNotCacheImage = (1 << 6),   kMenuAttrDoNotUseUserCommandKeys = (1 << 7) };
     typedef UInt32 MenuItemAttributes;
     enum {    kMenuItemAttrDisabled = (1 << 0),   kMenuItemAttrIconDisabled = (1 << 1),   kMenuItemAttrSubmenuParentChoosable = (1 << 2),   kMenuItemAttrDynamic = (1 << 3),   kMenuItemAttrNotPreviousAlternate = (1 << 4),   kMenuItemAttrHidden = (1 << 5),   kMenuItemAttrSeparator = (1 << 6),   kMenuItemAttrSectionHeader = (1 << 7),   kMenuItemAttrIgnoreMeta = (1 << 8),   kMenuItemAttrAutoRepeat = (1 << 9),   kMenuItemAttrUseVirtualKey = (1 << 10),   kMenuItemAttrCustomDraw = (1 << 11),   kMenuItemAttrIncludeInCmdKeyMatching = (1 << 12),   kMenuItemAttrAutoDisable = (1 << 13),   kMenuItemAttrUpdateSingleItem = (1 << 14) };
     typedef UInt32 MenuTrackingMode;
     enum {    kMenuTrackingModeMouse = 1,   kMenuTrackingModeKeyboard = 2 };
     typedef UInt32 MenuEventOptions;
     enum {    kMenuEventIncludeDisabledItems = 0x0001,   kMenuEventQueryOnly = 0x0002,   kMenuEventDontCheckSubmenus = 0x0004 };
     typedef SInt16 MenuID;
     typedef UInt16 MenuItemIndex;
     typedef OSType MenuCommand;
     typedef struct OpaqueMenuRef* MenuRef;
     typedef MenuRef MenuHandle;
     typedef Handle MenuBarHandle;
     struct MenuBarHeader {    UInt16 lastMenu;    SInt16 lastRight;    SInt16 mbResID;  };
     typedef struct MenuBarHeader MenuBarHeader;
     struct HMenuBarHeader {    UInt16 lastHMenu;    PixMapHandle menuTitleBits;  };
     typedef struct HMenuBarHeader HMenuBarHeader;
     struct MenuBarMenu {    MenuRef menu;    SInt16 menuLeft;  };
     typedef struct MenuBarMenu MenuBarMenu;
     struct HMenuBarMenu {    MenuRef menu;    SInt16 reserved;  };
     enum {    kEventParamAppleEvent = 'aevt',   kEventParamAppleEventReply = 'aerp' };
     typedef UInt16 MouseTrackingResult;
     enum {    kMouseTrackingMouseDown = 1,   kMouseTrackingMouseUp = 2,   kMouseTrackingMouseExited = 3,   kMouseTrackingMouseEntered = 4,   kMouseTrackingMouseDragged = 5,   kMouseTrackingKeyModifiersChanged = 6,   kMouseTrackingUserCancelled = 7,   kMouseTrackingTimedOut = 8,   kMouseTrackingMouseMoved = 9,   kMouseTrackingClientEvent = 10,   kMouseTrackingScrollWheel = 11 };
     enum {    kTrackMouseLocationOptionDontConsumeMouseUp = (1 << 0),   kTrackMouseLocationOptionIncludeScrollWheel = (1 << 3) };
     extern Boolean CheckEventQueueForUserCancel(void) ;
     extern Boolean IsUserCancelEventRef(EventRef event) ;
     enum {    kMouseParamsSticky = 'stic',   kMouseParamsProxyIcon = 'prox',   kMouseParamsClickAndHold = 'clho',   kMouseParamsDragInitiation = 'drag' };
     extern OSStatus HIMouseTrackingGetParameters(   OSType inSelector,   EventTime * outTime,   HISize * outDistance) __attribute__((availability(macosx,introduced=10.3)));
     enum {    kEventClassMouse = 'mous',   kEventClassKeyboard = 'keyb',   kEventClassTextInput = 'text',   kEventClassApplication = 'appl',   kEventClassAppleEvent = 'eppc',   kEventClassMenu = 'menu',   kEventClassWindow = 'wind',   kEventClassControl = 'cntl',   kEventClassCommand = 'cmds',   kEventClassTablet = 'tblt',   kEventClassVolume = 'vol ',   kEventClassAppearance = 'appm',   kEventClassService = 'serv',   kEventClassToolbar = 'tbar',   kEventClassToolbarItem = 'tbit',   kEventClassToolbarItemView = 'tbiv',   kEventClassAccessibility = 'acce',   kEventClassSystem = 'macs',   kEventClassInk = 'ink ',   kEventClassTSMDocumentAccess = 'tdac',   kEventClassGesture = 'gest' };
     typedef UInt16 EventMouseButton;
     enum {    kEventTextInputUpdateActiveInputArea = 1 };
     enum {    kEventTextInputUnicodeForKeyEvent = 2 };
     enum {    kEventTextInputOffsetToPos = 3 };
     enum {    kEventTextInputPosToOffset = 4 };
     enum {    kEventTextInputShowHideBottomWindow = 5 };
     enum {    kEventTextInputGetSelectedText = 6 };
     enum {    kEventTextInputUnicodeText = 7 };
     enum {    kEventTextInputFilterText = 14 };
     enum {    kEventTextInputIsMouseEventInInlineInputArea = 16 };
     enum {    kEventRawKeyDown = 1 };
     enum {    kEventRawKeyRepeat = 2 };
     enum {    kEventRawKeyUp = 3 };
     enum {    kEventRawKeyModifiersChanged = 4 };
     enum {    kEventHotKeyPressed = 5 };
     enum {    kEventHotKeyReleased = 6 };
     enum {    kEventKeyModifierNumLockBit = 16,   kEventKeyModifierFnBit = 17 };
     enum {    kEventKeyModifierNumLockMask = 1 << kEventKeyModifierNumLockBit,   kEventKeyModifierFnMask = 1 << kEventKeyModifierFnBit };
     enum {    kEventAppActivated = 1 };
     enum {    kEventAppDeactivated = 2 };
     enum {    kEventAppQuit = 3 };
     enum {    kEventAppLaunchNotification = 4 };
     enum {    kEventAppLaunched = 5 };
     enum {    kEventAppTerminated = 6 };
     enum {    kEventAppFrontSwitched = 7 };
     enum {    kEventAppHidden = 107 };
     enum {    kEventAppShown = 108 };
     enum {    kEventAppSystemUIModeChanged = 109 };
     enum {    kAvailBoundsChangedForDock = 1 << 0,   kAvailBoundsChangedForDisplay = 1 << 1,   kAvailBoundsChangedForMenuBar = 1 << 2 };
     enum {    kEventAppAvailableWindowBoundsChanged = 110 };
     enum {    kEventAppActiveWindowChanged = 111 };
     enum {    kEventAppGetDockTileMenu = 20 };
     enum {    kEventAppUpdateDockTile = 21 };
     enum {    kEventAppFocusMenuBar = 8 };
     enum {    kEventAppFocusNextDocumentWindow = 9 };
     enum {    kEventAppFocusNextFloatingWindow = 10 };
     enum {    kEventAppFocusToolbar = 11 };
     enum {    kEventAppFocusDrawer = 12 };
     enum {    kEventAppIsEventInInstantMouser = 104 };
     enum {    kEventAppleEvent = 1 };
     enum {    kEventWindowActivated = 5 };
     enum {    kEventWindowDeactivated = 6 };
     enum {    kEventWindowHandleActivate = 91 };
     enum {    kEventWindowHandleDeactivate = 92 };
     enum {    kEventWindowGetClickActivation = 7 };
     enum {    kHIModalClickIsModal = 1 << 0,   kHIModalClickAllowEvent = 1 << 1,   kHIModalClickAnnounce = 1 << 2,   kHIModalClickRaiseWindow = 1 << 3 };
     typedef UInt32 HIModalClickResult;
     enum {    typeModalClickResult = 'wmcr',   typeWindowModality = 'wmod',   kEventParamModalClickResult = typeModalClickResult,   kEventParamModalWindow = 'mwin',   kEventParamWindowModality = typeWindowModality };
     enum {    kEventWindowGetClickModality = 8 };
     enum {    kWindowBoundsChangeUserDrag = (1 << 0),   kWindowBoundsChangeUserResize = (1 << 1),   kWindowBoundsChangeSizeChanged = (1 << 2),   kWindowBoundsChangeOriginChanged = (1 << 3),   kWindowBoundsChangeZoom = (1 << 4) };
     enum {    kEventWindowShowing = 22 };
     enum {    kEventWindowHiding = 23 };
     enum {    kEventWindowShown = 24 };
     enum {    kEventWindowHidden = 25 };
     enum {    kEventWindowCollapsing = 86 };
     enum {    kEventWindowCollapsed = 67 };
     enum {    kEventWindowExpanding = 87 };
     enum {    kEventWindowExpanded = 70 };
     enum {    kEventWindowZoomed = 76 };
     enum {    kEventWindowUpdateDockTile = 94 };
     enum {    kEventWindowColorSpaceChanged = 95 };
     enum {    kEventWindowRestoredAfterRelaunch = 96 };
     enum {    kEventWindowToolbarSwitchMode = 150 };
     enum {    kEventWindowFocusAcquired = 200 };
     enum {    kEventWindowFocusRelinquish = 201 };
     enum {    kEventWindowFocusLost = 205 };
     enum {    kEventWindowFocusRestored = 206 };
     enum {    kEventWindowFocusContent = 202 };
     enum {    kEventWindowFocusToolbar = 203 };
     enum {    kEventWindowFocusDrawer = 204 };
     enum {    kEventWindowSheetOpening = 210 };
     enum {    kEventWindowSheetOpened = 211 };
     enum {    kEventWindowSheetClosing = 212 };
     enum {    kEventWindowSheetClosed = 213 };
     enum {    kEventWindowDrawerOpening = 220 };
     enum {    kEventWindowDrawerOpened = 221 };
     enum {    kEventWindowDrawerClosing = 222 };
     enum {    kEventWindowDrawerClosed = 223 };
     enum {    kEventWindowDrawFrame = 1000 };
     enum {    kEventWindowDrawPart = 1001 };
     enum {    kEventWindowGetRegion = 1002 };
     enum {    kEventWindowHitTest = 1003 };
     enum {    kEventWindowInit = 1004 };
     enum {    kEventWindowDispose = 1005 };
     enum {    kEventWindowDragHilite = 1006 };
     enum {    kEventWindowModified = 1007 };
     enum {    kEventWindowSetupProxyDragImage = 1008 };
     enum {    kEventWindowStateChanged = 1009 };
     enum {    kEventWindowMeasureTitle = 1010 };
     enum {    kEventWindowDrawGrowBox = 1011 };
     enum {    kEventWindowGetGrowImageRegion = 1012 };
     enum {    kEventWindowPaint = 1013 };
     enum {    kEventWindowAttributesChanged = 1019 };
     enum {    kEventWindowTitleChanged = 1020 };
     enum {    kEventWindowGetFullScreenContentSize = 240 };
     enum {    kEventWindowFullScreenEnterStarted = 241 };
     enum {    kEventWindowFullScreenEnterCompleted = 242 };
     enum {    kEventWindowFullScreenExitStarted = 243 };
     enum {    kEventWindowFullScreenExitCompleted = 244 };
     enum {    kMenuContextMenuBar = 1 << 0 };
     enum {    kMenuContextPullDown = 1 << 8,   kMenuContextPopUp = 1 << 9,   kMenuContextSubmenu = 1 << 10 };
     enum {    kMenuContextMenuBarTracking = 1 << 16,   kMenuContextPopUpTracking = 1 << 17,   kMenuContextKeyMatching = 1 << 18,   kMenuContextMenuEnabling = 1 << 19,   kMenuContextCommandIDSearch = 1 << 20,   kMenuContextInspection = 1 << 22,   kMenuContextContextualMenu = 1 << 23 };
     enum {    kMenuContextDontUpdateText = 1 << 24,   kMenuContextDontUpdateKey = 1 << 25,   kMenuContextDontUpdateIcon = 1 << 26,   kMenuContextDontUpdateEnabled = 1 << 27 };
     enum {    kHIMenuRightDirection = 0,   kHIMenuLeftDirection = 1,   kHIMenuCenterDirection = 2 };
     enum {    kEventMenuBeginTracking = 1 };
     enum {    kEventMenuEndTracking = 2 };
     enum {    kEventMenuChangeTrackingMode = 3 };
     enum {    kEventMenuOpening = 4 };
     enum {    kEventMenuClosed = 5 };
     enum {    kEventMenuTargetItem = 6 };
     enum {    kEventMenuMatchKey = 7 };
     enum {    kEventMenuEnableItems = 8 };
     enum {    kEventMenuPopulate = 9 };
     enum {    kEventMenuDispose = 1001 };
     enum {    kEventMenuMeasureItemWidth = 100 };
     enum {    kEventMenuMeasureItemHeight = 101 };
     enum {    kEventMenuDrawItem = 102 };
     enum {    kEventMenuDrawItemContent = 103 };
     enum {    kEventMenuCalculateSize = 1004 };
     enum {    kEventMenuCreateFrameView = 1005 };
     enum {    kEventMenuGetFrameBounds = 1006 };
     enum {    kEventMenuBecomeScrollable = 1007 };
     enum {    kEventMenuCeaseToBeScrollable = 1008 };
     enum {    kEventMenuBarShown = 2000 };
     enum {    kEventMenuBarHidden = 2001 };
     enum {    kEventCommandProcess = 1 };
     enum {    kEventCommandUpdateStatus = 2 };
     enum {    kHICommandOK = 'ok  ',   kHICommandCancel = 'not!',   kHICommandQuit = 'quit',   kHICommandQuitAndDiscardWindows = 'qudw',   kHICommandQuitAndKeepWindows = 'qukw',   kHICommandUndo = 'undo',   kHICommandRedo = 'redo',   kHICommandCut = 'cut ',   kHICommandCopy = 'copy',   kHICommandPaste = 'past',   kHICommandClear = 'clea',   kHICommandSelectAll = 'sall',   kHICommandHide = 'hide',   kHICommandHideOthers = 'hido',   kHICommandShowAll = 'shal',   kHICommandPreferences = 'pref',   kHICommandZoomWindow = 'zoom',   kHICommandMinimizeWindow = 'mini',   kHICommandMinimizeAll = 'mina',   kHICommandMaximizeWindow = 'maxi',   kHICommandMaximizeAll = 'maxa',   kHICommandArrangeInFront = 'frnt',   kHICommandBringAllToFront = 'bfrt',   kHICommandWindowListSeparator = 'wldv',   kHICommandWindowListTerminator = 'wlst',   kHICommandSelectWindow = 'swin',   kHICommandRotateWindowsForward = 'rotw',   kHICommandRotateWindowsBackward = 'rotb',   kHICommandRotateFloatingWindowsForward = 'rtfw',   kHICommandRotateFloatingWindowsBackward = 'rtfb',   kHICommandToggleFullScreen = 'fsm ',   kHICommandAbout = 'abou',   kHICommandNew = 'new ',   kHICommandOpen = 'open',   kHICommandClose = 'clos',   kHICommandCloseAll = 'cloa',   kHICommandCloseFile = 'clof',   kHICommandSave = 'save',   kHICommandSaveAs = 'svas',   kHICommandRevert = 'rvrt',   kHICommandPrint = 'prnt',   kHICommandPageSetup = 'page',   kHICommandAppHelp = 'ahlp',   kHICommandShowCharacterPalette = 'chrp',   kHICommandShowSpellingPanel = 'shsp',   kHICommandCheckSpelling = 'cksp',   kHICommandChangeSpelling = 'chsp',   kHICommandCheckSpellingAsYouType = 'aspc',   kHICommandIgnoreSpelling = 'igsp',   kHICommandLearnWord = 'lrwd',   kHICommandStartDictation = 'sdct' };
     enum {    kHICommandFromMenu = (1 << 0),   kHICommandFromControl = (1 << 1),   kHICommandFromWindow = (1 << 2) };
     struct HICommand {    UInt32 attributes;    UInt32 commandID;    struct {     MenuRef menuRef;     MenuItemIndex menuItemIndex;   }  menu;  };
     typedef struct HICommand HICommand;
     struct HICommandExtended {    UInt32 attributes;    UInt32 commandID;    union {     ControlRef control;     WindowRef window;     struct {       MenuRef menuRef;       MenuItemIndex menuItemIndex;     } menu;   }  source;  };
     typedef struct HICommandExtended HICommandExtended;
     enum {    kEventControlClick = 13 };
     enum {    kEventControlHit = 1 };
     enum {    kEventControlInitialize = 1000 };
     enum {    kEventControlDispose = 1001 };
     enum {    kEventControlGetOptimalBounds = 1003 };
     enum {    kEventControlOptimalBoundsChanged = 1004 };
     enum {    kEventControlSimulateHit = 2 };
     enum {    kEventControlHitTest = 3 };
     enum {    kEventControlDraw = 4 };
     enum {    kEventControlApplyTextColor = 6 };
     enum {    kEventControlGetNextFocusCandidate = 14 };
     enum {    kEventControlGetAutoToggleValue = 15 };
     enum {    kEventControlInterceptSubviewClick = 16 };
     enum {    kEventControlOwningWindowChanged = 159 };
     enum {    kEventControlTitleChanged = 158 };
     enum {    kEventControlHiliteChanged = 160 };
     enum {    kEventControlEnabledStateChanged = 161 };
     enum {    kEventControlLayoutInfoChanged = 162 };
     enum {    kEventControlFocusPartChanged = 164 };
     enum {    kControlBoundsChangeSizeChanged = (1 << 2),   kControlBoundsChangePositionChanged = (1 << 3) };
     enum {    kEventTabletPoint = 1 };
     enum {    kEventTabletProximity = 2 };
     struct TabletPointRec {    SInt32 absX;    SInt32 absY;    SInt32 absZ;    UInt16 buttons;    UInt16 pressure;    SInt16 tiltX;    SInt16 tiltY;    UInt16 rotation;    SInt16 tangentialPressure;    UInt16 deviceID;    SInt16 vendor1;    SInt16 vendor2;    SInt16 vendor3;  };
     typedef struct TabletPointRec TabletPointRec;
     typedef TabletPointRec TabletPointerRec;
     struct TabletProximityRec {    UInt16 vendorID;    UInt16 tabletID;    UInt16 pointerID;    UInt16 deviceID;    UInt16 systemTabletID;    UInt16 vendorPointerType;    UInt32 pointerSerialNumber;    UInt64 uniqueID;    UInt32 capabilityMask;    UInt8 pointerType;    UInt8 enterProximity;  };
     typedef struct TabletProximityRec TabletProximityRec;
     enum {    typeFSVolumeRefNum = 'voln' };
     enum {    kEventVolumeMounted = 1 };
     enum {    kEventVolumeUnmounted = 2 };
     enum {    kEventAppearanceScrollBarVariantChanged = 1 };
     enum {    kEventServiceCopy = 1 };
     enum {    kEventServicePaste = 2 };
     enum {    kEventServiceGetTypes = 3 };
     enum {    kEventServicePerform = 4 };
     enum {    kEventSystemTimeDateChanged = 2 };
     enum {    kEventSystemDisplaysAsleep = 3 };
     enum {    kEventSystemDisplaysAwake = 4 };
     enum {    kEventSystemDisplayReconfigured = 6 };
     enum {    kEventSystemUserSessionActivated = 10 };
     enum {    kEventSystemUserSessionDeactivated = 11 };
     extern EventTargetRef GetApplicationEventTarget(void) ;
     extern EventTargetRef GetEventDispatcherTarget(void) ;
     extern EventTargetRef GetEventMonitorTarget(void) __attribute__((availability(macosx,introduced=10.3)));
     extern OSStatus ProcessHICommand(const HICommand * inCommand) ;
     struct EventHotKeyID {    OSType signature;    UInt32 id;  };
     typedef struct EventHotKeyID EventHotKeyID;
     typedef struct OpaqueEventHotKeyRef* EventHotKeyRef;
     enum {    kEventHotKeyNoOptions = 0,   kEventHotKeyExclusive = (1 << 0) };
     extern OSStatus RegisterEventHotKey(   UInt32 inHotKeyCode,   UInt32 inHotKeyModifiers,   EventHotKeyID inHotKeyID,   EventTargetRef inTarget,   OptionBits inOptions,   EventHotKeyRef * outRef) ;
     extern OSStatus UnregisterEventHotKey(EventHotKeyRef inHotKey) ;
     extern OSStatus CopySymbolicHotKeys(CFArrayRef * outHotKeyArray) __attribute__((availability(macosx,introduced=10.3)));
     enum {    kHIHotKeyModeAllEnabled = 0,   kHIHotKeyModeAllDisabled = (1 << 0),   kHIHotKeyModeAllDisabledExceptUniversalAccess = (1 << 1) };
     extern void * PushSymbolicHotKeyMode(OptionBits inOptions) __attribute__((availability(macosx,introduced=10.4)));
     extern void PopSymbolicHotKeyMode(void * inToken) __attribute__((availability(macosx,introduced=10.4)));
     extern OptionBits GetSymbolicHotKeyMode(void) __attribute__((availability(macosx,introduced=10.4)));
     enum {    kEventParamInkTextRef = 'iwrd',   kEventParamInkKeyboardShortcut = 'ikbd',   kEventParamInkGestureKind = 'gknd',   kEventParamInkGestureBounds = 'gbnd',   kEventParamInkGestureHotspot = 'ghot' };
     enum {    kEventInkPoint = 10 };
     enum {    kEventInkGesture = 11 };
     enum {    kEventInkText = 12 };
     typedef struct OpaqueToolboxObjectClassRef* ToolboxObjectClassRef;
     enum {    kEventParamTabletPointerRec = 'tbrc',   typeTabletPointerRec = 'tbrc' };
     enum {    kEventWindowDefDrawFrame = kEventWindowDrawFrame,   kEventWindowDefDrawPart = kEventWindowDrawPart,   kEventWindowDefGetRegion = kEventWindowGetRegion,   kEventWindowDefHitTest = kEventWindowHitTest,   kEventWindowDefInit = kEventWindowInit,   kEventWindowDefDispose = kEventWindowDispose,   kEventWindowDefDragHilite = kEventWindowDragHilite,   kEventWindowDefModified = kEventWindowModified,   kEventWindowDefSetupProxyDragImage = kEventWindowSetupProxyDragImage,   kEventWindowDefStateChanged = kEventWindowStateChanged,   kEventWindowDefMeasureTitle = kEventWindowMeasureTitle,   kEventWindowDefDrawGrowBox = kEventWindowDrawGrowBox,   kEventWindowDefGetGrowImageRegion = kEventWindowGetGrowImageRegion };
     enum {    kEventClassEPPC = kEventClassAppleEvent,   kEventHighLevelEvent = kEventAppleEvent };
     enum {    kEventUpdateActiveInputArea = kEventTextInputUpdateActiveInputArea,   kEventUnicodeForKeyEvent = kEventTextInputUnicodeForKeyEvent,   kEventOffsetToPos = kEventTextInputOffsetToPos,   kEventPosToOffset = kEventTextInputPosToOffset,   kEventShowHideBottomWindow = kEventTextInputShowHideBottomWindow,   kEventGetSelectedText = kEventTextInputGetSelectedText };
     enum {    kEventProcessCommand = kEventCommandProcess,   kEventTabletPointer = kEventTabletPoint };
     typedef UInt32 EventClassID;
     typedef UInt32 EventClass;
     typedef UInt32 EventType;
     enum {    kMouseTrackingMousePressed = kMouseTrackingMouseDown,   kMouseTrackingMouseReleased = kMouseTrackingMouseUp };
     enum {    kEventControlGetSubviewForMouseEvent = kEventControlInterceptSubviewClick };
